using DevExpress.Data.Filtering;
using DevExpress.ExpressApp;
using DevExpress.ExpressApp.Actions;
using DevExpress.ExpressApp.Editors;
using DevExpress.ExpressApp.FileAttachments.Web;
using DevExpress.ExpressApp.Model;
using DevExpress.ExpressApp.Security;
using DevExpress.ExpressApp.SystemModule;
using DevExpress.ExpressApp.Utils;
using DevExpress.ExpressApp.Web;
using DevExpress.ExpressApp.Web.Editors;
using DevExpress.ExpressApp.Web.Editors.ASPx;
using DevExpress.ExpressApp.Web.SystemModule;
using DevExpress.ExpressApp.Web.Templates;
using DevExpress.ExpressApp.Xpo;
using DevExpress.Pdf;
using DevExpress.Persistent.Base;
using DevExpress.Web;
using DevExpress.Xpo;
using DevExpress.Xpo.DB;
using DevExpress.Xpo.Metadata;
using DevExpress.XtraReports.UI;
using LDM.Module.Controllers.Public;
using LDM.Module.Controllers.Public.FTPSetup;
using LDM.Module.Controllers.SamplingManagement;
using Modules.BusinessObjects.Assets;
using Modules.BusinessObjects.Crm;
using Modules.BusinessObjects.Hr;
using Modules.BusinessObjects.InfoClass;
using Modules.BusinessObjects.PLM;
using Modules.BusinessObjects.Report;
using Modules.BusinessObjects.SampleManagement;
using Modules.BusinessObjects.Setting;
using Modules.BusinessObjects.Setting.Invoicing;
using Modules.BusinessObjects.Setting.PLM;
using Modules.BusinessObjects.Setting.Quotes;
using Modules.BusinessObjects.Setting.SamplesSite;
using Modules.BusinessObjects.SuboutTracking;
using Modules.BusinessObjects.TaskManagement;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Text;
using System.Web;
using System.Web.UI.WebControls;
using Attachment = Modules.BusinessObjects.SampleManagement.Attachment;

namespace LDM.Module.Controllers.SampleRegistration
{
    // For more typical usage scenarios, be sure to check out https://documentation.devexpress.com/eXpressAppFramework/clsDevExpressExpressAppViewControllertopic.aspx.
    public partial class SampleRegistrationViewController : ViewController, IXafCallbackHandler
    {
        curlanguage objLanguage = new curlanguage();
        DynamicReportDesignerConnection ObjReportDesignerInfo = new DynamicReportDesignerConnection();
        MessageTimer timer = new MessageTimer();
        ShowNavigationItemController ShowNavigationController;
        SampleCheckInInfo objSCInfo = new SampleCheckInInfo();
        SampleLogInInfo objSLInfo = new SampleLogInInfo();
        SampleRegistrationInfo SRInfo = new SampleRegistrationInfo();
        TestMethodInfo objInfo = new TestMethodInfo();
        PermissionInfo objPermissionInfo = new PermissionInfo();
        viewInfo tempviewinfo = new viewInfo();
        DynamicReportDesignerConnection objDRDCInfo = new DynamicReportDesignerConnection();
        LDMReportingVariables ObjReportingInfo = new LDMReportingVariables();
        CaseNarativeInfo CNInfo = new CaseNarativeInfo();
        FileDataPropertyEditor FilePropertyEditor;
        List<Guid> testParameterOid = new List<Guid>();
        List<Guid> sampleParameterOid = new List<Guid>();
        List<Guid> TPOid = new List<Guid>();
        AuditInfo objAuditInfo = new AuditInfo();
        ICallbackManagerHolder uncheckSampleSubout;
        QuotesInfo objquotesinfo = new QuotesInfo();

        string jobid;
        bool samplingfirstdefault = false;
        bool boolHold;

        Boolean boolListview = false;
        Boolean boolTestListView = false;
        string strJobID;
        private StaticText staticText;
        bool boolsaveaction = false;
        bool boolMailSend;
        FtpInfo objFTP = new FtpInfo();

        public string strFTPServerName = string.Empty;
        public string strFTPPath = string.Empty;
        public string strFTPUserName = string.Empty;
        public string strFTPPassword = string.Empty;
        public int FTPPort = 0;
        public bool strFTPStatus;
        string[] strSampleMatrix;

        SimpleAction SRSubmit;
        SimpleAction btnRecalculate_Invoice;
        SimpleAction btnCOCImport;
        SimpleAction btnDeleteSamplesandTest;
        SimpleAction BtnCoolerId;
        viewInfo strviewid = new viewInfo();
        ASPxLookupPropertyEditor collector;
        bool IsDisableCheckBox = false;
        DefaultSetting objNavigationViewSingOff = null;
        bool IsReset = false;
        string jScript = @"
                        //for (var i = 0 ; i <= Grid.GetVisibleRowsOnPage() - 1; i++) { 
                        //    var CollectTimeDisplay = Grid.batchEditApi.GetCellValue(i, 'CollectTimeDisplay', false);
                        //    if(CollectTimeDisplay == null || CollectTimeDisplay.toString().length ==0){
                        //       Grid.batchEditApi.SetCellValue(i, 'CollectTimeDisplay', '00:00');
                        //    }
                        //}
                       Grid.UpdateEdit();
                       ";
        //public static string LongOperationStatus = "NotStarted";
        public SampleRegistrationViewController()
        {
            InitializeComponent();
            // Target required Views (via the TargetXXX properties) and create their Actions.
            TargetViewId = "SampleRegistration_DashboardView;" + "Samplecheckin_DetailView;" + "SampleLogIn_DetailView;" + "SampleLogIn_ListView_Copy_SampleRegistration;"
                + "Samplecheckin_DetailView_Copy_SampleRegistration;" + "SampleRegistration;" + "SampleCheckin;" + "SampleLogin;" + "Tests;" + "Samplecheckin_ListView_Copy_Registration;"
                + "Test;"//+ "SampleUpload_DetailView;"
                + "Testparameter_LookupListView_Copy_SampleLogin;"
                + "Testparameter_LookupListView_Copy_SampleLogin_Copy;"
                + "Testparameter_LookupListView_Copy_SampleLogin_Copy_Parameter;"
                + "Samplecheckin_Photos_ListView;" + "IndoorInspection_Photos_ListView;"
                + "Samplecheckin_DetailView_Copy_SampleRegistration_History;"
                + "ClauseInspectionSettings_LookupListView;" + "Samplecheckin_Clauses_ListView;"
                + "SampleParameter_ListView_Copy_SampleRegistration;" + "SampleRegistrationFileImport_DetailView;"
                + "AnalysisPricing_ListView_Quotes_SampleRegistration;"+ "CRMQuotes_QuotesItemChargePrice_ListView_ViewMode;" + "CRMQuotes_DetailView_Reviewd_History_SampleRegistration;"
                + "Notes_DetailView;"
                + "CRMQuotes_ItemChargePricing_ListView_SampleRegistration;"
                + "Samplecheckin_DetailView_Copy_SampleRegistration_History;"
                + "SubOutSampleRegistrations_ListView_TestOrder;"
                + "SampleConditionCheck_DetailView_Copy;" + "Samplecheckin_CustomDueDates_ListView;"
                + "Samplecheckin_ImageUpload_ListView;" + "SampleLogIn_ListView_Copy_SampleRegistration;" + "Testparameter_ListView_Parameter;"
                + "Samplecheckin_DetailView_Copy_RegistrationSigningOff;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History;" + "SampleLogIn_ListView_SampleRegistration_Bottle;" + "Samplecheckin_ListView_SampleReceiptNotification;"
                + "Samplecheckin_Attachments_ListView;" + "Samplecheckin_ListView_SampleReceiptNotification_History;" + "DataSource_ListView;" + "MailContent;" + "Samplecheckin_ListView_Copy_RegistrationSigningOff;"
                + "Samplecheckin_ListView_Copy_Registration_History;" + "Customer_DetailView_SampleRegistration;" + "Contact_ListView_Report;" + "Contact_ListView_Invoice;" + "Contact_DetailView_Invoice" + "Contact_DetailView_Report;"
                + "DummyClass_DetailView_Copy_Mail;" + "Contact_LookupListView_Samplereceipt_EmailList;" + "Reporting_ListView_Delivery;" + "Invoicing_ListView_Delivery;" + "eNotificationContentTemplate_DetailView;" + "Contact_DetailView;"
                + "SampleRegistration_SampleLogin;" + "Image_DetailView_ImageEditPreview;" + "COCSettings_ListView_SampleRegistration_ImportCOC;" + "InvoicingAnalysisCharge_ListView_PreInvoiceDetails;" + "Invoicing_DetailView_PreInvoiceDetails;"
                + "Invoicing_ItemCharges_ListView_PreinvoiceDetails;" + "TestEdit_DashboardView;" + "Samplecheckin_DetailView_TestEdit;" + "SampleParameter_ListView_TestEdit;" + "SampleLogIn_LookupListView_EditTest;"
                + "TestEdit_CopyTestsToSample_Dashboard;" + "SampleLogIn_DetailView_EditTest;" + "Testparameter_LookupListView_TestEdit;" + "SampleBottleAllocation_DetailView_SampleTransfer;" + "SubOutSampleRegistrations_ListView_NotificationQueue;";
            SampleRegistrationSC_Save.TargetViewId = "SampleRegistration_DashboardView;" + "Contact_DetailView_popup;";
            SampleRegistrationSL_Save.TargetViewId = "SampleLogIn_DetailView;";
            SR_SLListViewEdit.TargetViewId = "SampleLogIn_ListView_Copy_SampleRegistration;";
            SR_SLDetailViewNew.TargetViewId = "SampleLogIn_DetailView;";
            Sample.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History;" + "SampleBottleAllocation_DetailView_SampleTransfer;";
            AddSample.TargetViewId = "SampleLogIn_ListView_Copy_SampleRegistration;";
            Test.TargetViewId = Containers.TargetViewId = "SampleLogIn_ListView_Copy_SampleRegistration;";
            TestGroup.TargetViewId = "SampleLogIn_ListView_Copy_SampleRegistration";
            btn_TestEdit.TargetViewId = "SampleLogIn_ListView_Copy_SampleRegistration";
            btn_TestEditAddTest.TargetViewId = "SampleParameter_ListView_TestEdit";
            btn_TestEditRemoveTest.TargetViewId = "SampleParameter_ListView_TestEdit";
            btn_TestEditRemoveTest.SelectionDependencyType = SelectionDependencyType.RequireMultipleObjects;
            btn_TestEditCopyTest.TargetViewId = "SampleParameter_ListView_TestEdit";
            //btn_TestEditCopyTest.SelectionDependencyType = SelectionDependencyType.RequireMultipleObjects;
            SaveSampleRegistration.TargetViewId = "SampleRegistration;";
            TestSelectionAdd.TargetViewId = TestSelectionRemove.TargetViewId = TestSelectionSave.TargetViewId = "Test";
            btnCOC_BarReport.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;" + "Samplecheckin_ListView_Copy_Registration;" + "SampleRegistration;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History;"
                + "Samplecheckin_ListView_Copy_RegistrationSigningOff;" + "Samplecheckin_DetailView_Copy_SampleRegistration_History;" + "Samplecheckin_DetailView_Copy_SampleRegistration_History;" + "Samplecheckin_ListView_Copy_Registration_History;";
            btnTask_RegistrationReport.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;" + "Samplecheckin_ListView_Copy_Registration;" + "SampleRegistration;";
            btnImportSamples.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";//"Samplecheckin_ListView_Copy_Registration;" + "SampleRegistration;";
            btnQuoteImportSamples.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            //btnCOCImportSamples.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            //btnCOCImportSamples.TargetObjectsCriteria = "[SampleCount] = 0";
            btnImportBasicInformationAction.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;"/* + "SampleRegistration;"*/;
            //TestDescription.TargetViewId = "Samplecheckin_ListView_Copy_Registration";
            //NewSampleRegistration.TargetViewId = "Samplecheckin_ListView_Copy_Registration;";
            sampleRegistrationDateFilterAction.TargetViewId = "Samplecheckin_ListView_Copy_Registration;" + "Samplecheckin_ListView_Copy_Registration_History;" + "Samplecheckin_ListView_SampleReceiptNotification;" + "Samplecheckin_ListView_SampleReceiptNotification_History;";
            ImageEditPreviewAction.TargetViewId = "Samplecheckin_ImageUpload_ListView";
            SRHistory.TargetViewId = "Samplecheckin_ListView_Copy_Registration;" /*+ "Samplecheckin_ListView_SampleReceiptNotification;"*/;
            MailContent.TargetViewId = /*"Samplecheckin_ListView_SampleReceiptNotification;" +*/ "Reporting_ListView_Delivery;" + "Invoicing_ListView_Delivery;" + "SubOutSampleRegistrations_ListView_NotificationQueue;" /*+ "SubOutSampleRegistrations_ListView_TestOrder;" + "SubOutSampleRegistrations_DetailView_TestOrder;"*/;
            SampleReceipt.TargetViewId = "Samplecheckin_ListView_SampleReceiptNotification;";
            SentMail.TargetViewId = "Samplecheckin_ListView_SampleReceiptNotification;";
            SentMail.TargetObjectsCriteria = "SendingMethod='" + Samplereceiptsendingmethod.Email + "'";
            COCAttach.TargetViewId = "Samplecheckin_ListView_SampleReceiptNotification;";
            PreInvoice.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            PreInvoiceDetails.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            PreInvoiceDetails.TargetObjectsCriteria = "Not IsNullOrEmpty([JobID]) And [ProjectCategory] Is Null Or [ProjectCategory] Is Not Null And ([ProjectCategory.Non_Commercial] <> 'Yes' Or [ProjectCategory.Non_Commercial] Is Null)";
            SaveAsSampleRegistration.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;" + "Samplecheckin_ListView_Copy_Registration;";
            SaveAsSampleRegistration.TargetObjectsCriteria = "Not IsNullOrEmpty([JobID])";
            SimpleAction btnAddContact = new SimpleAction(this, "btnAddContact", PredefinedCategory.PopupActions)
            {
                Caption = "New"
            };
            btnAddContact.TargetViewId = "Contact_LookupListView_Samplereceipt_EmailList;";
            btnAddContact.Execute += btnAddContact_Execute;
            btnAddContact.ImageName = "Action_New";

            SRSubmit = new SimpleAction(this, "SRSubmit", PredefinedCategory.View)
            {
                Caption = "Submit"
            };
            SRSubmit.TargetViewId = "Samplecheckin_ListView_Copy_Registration;" + "Samplecheckin_DetailView_Copy_SampleRegistration;" + "SampleRegistration;";
            //SRSubmit.SelectionDependencyType = SelectionDependencyType.RequireSingleObject;
            SRSubmit.Execute += SRSubmit_Execute;
            btnRecalculate_Invoice = new SimpleAction(this, "RecalculateInvoice", PredefinedCategory.View)
            {
                Caption = "Recalculate Invoice"
            };
            btnRecalculate_Invoice.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            btnRecalculate_Invoice.TargetObjectsCriteria = "[Status] <> 'PendingSubmit'";
            btnRecalculate_Invoice.Execute += SRRecalculate_Execute;
            //SRSubmit.Executed += SRSubmit_Executed;
            //SRSubmit.ImageName = "Submit_16x16";

            //TaskSubmit.TargetObjectsCriteria = "Status<>'" + TaskManagementStatus.Cancelled + "'";
            SRSubmit.TargetObjectsCriteria = "Not IsNullOrEmpty([JobID]) And [Status] = 'PendingSubmit'";

            SimpleAction btnBottleAllocation = new SimpleAction(this, "btnBottleAllocation", PredefinedCategory.Unspecified)
            {
                Caption = "Containers"
            };
            btnBottleAllocation.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History;" + "SampleBottleAllocation_DetailView_SampleTransfer;";
            btnBottleAllocation.Execute += btnBottleAllocation_Execute;
            btnBottleAllocation.Category = "Sample";

            SimpleAction btnSampleTest = new SimpleAction(this, "btnSampleTest", PredefinedCategory.Unspecified)
            {
                Caption = "Tests"
            };
            btnSampleTest.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff;" + "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History;" + "SampleBottleAllocation_DetailView_SampleTransfer;";
            btnSampleTest.Execute += btnSampleTest_Execute;
            btnSampleTest.Category = "Sample";
            SimpleAction BtnResetJobid = new SimpleAction(this, "btnresetsamples", PredefinedCategory.Unspecified)
            {
                Caption = "Reset JobId"
            };
            BtnResetJobid.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            BtnResetJobid.Execute += BtnResetJobid_Execute;
            BtnResetJobid.ImageName = "ViewReset_16x16";

            btnDeleteSamplesandTest = new SimpleAction(this, "btnDeleteSamplesandTest", PredefinedCategory.ObjectsCreation)
            {
                Caption = "Delete"
            };
            btnDeleteSamplesandTest.TargetViewId = /*"SampleLogIn_ListView_Copy_SampleRegistration;" +*/ "SampleParameter_ListView_Copy_SampleRegistration;";
            btnDeleteSamplesandTest.Executing += DeleteAction_Executing;
            btnDeleteSamplesandTest.Execute += DeleteAction_Execute;
            btnDeleteSamplesandTest.ImageName = "Action_Delete";

            btnCOCImport = new SimpleAction(this, "btnCOCImport", PredefinedCategory.Unspecified)
            {
                Caption = "Import Pre-Log"
            };
            btnCOCImport.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            btnCOCImport.Execute += btnCOCImport_Execute;
            btnCOCImport.ImageName = "Down_16x16";
            btnCOCImport.PaintStyle = DevExpress.ExpressApp.Templates.ActionItemPaintStyle.Image;
            btnCOCImport.Category = "ImportCOCSamples";
            btnCOCImport.TargetObjectsCriteria = "[SampleCount] = 0";

            BtnCoolerId = new SimpleAction(this, "btnCoolerId", PredefinedCategory.Unspecified)
            {
                Caption = "CoolerId"
            };
            BtnCoolerId.TargetViewId = "Samplecheckin_DetailView_Copy_SampleRegistration;";
            BtnCoolerId.Execute += BtnCoolerId_Execute;

        }

        private void BtnCoolerId_Execute(object sender, SimpleActionExecuteEventArgs e)
        {            
            Samplecheckin sampleCheckin = View.CurrentObject as Samplecheckin;
            CollectionSource cs = new CollectionSource(Application.CreateObjectSpace(), typeof(SampleBottleAllocation));
            cs.Criteria["filter"] = CriteriaOperator.Parse("[SampleRegistration.JobID.Oid] =?", sampleCheckin.Oid);
            ListView listview = Application.CreateListView("SampleBottleAllocation_ListView_CoolerId", cs, false);
            listview.Caption = "CoolerId";
            ShowViewParameters showViewParameters = new ShowViewParameters(listview);
            showViewParameters.Context = TemplateContext.PopupWindow;
            showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
            DialogController dc = Application.CreateController<DialogController>();
            dc.AcceptAction.Active.SetItemValue("disable", false);
            dc.CancelAction.Active.SetItemValue("disable", false);
            showViewParameters.Controllers.Add(dc);
            Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
        }

        private void BtnResetJobid_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                {
                    Samplecheckin sc = View.CurrentObject as Samplecheckin;
                    if (sc.Status == 0)
                    {
                        //sc.NPTest = null;
                        SRInfo.BoolReset = false;
                        //View.ObjectSpace.CommitChanges();
                        ICallbackManagerHolder handlerid = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                        handlerid.CallbackManager.RegisterHandler("JobidResethandler", this);
                        string msg = "The sample tests and parameters are cleared..! Do you want to continue?";
                        WebWindow.CurrentRequestWindow.RegisterClientScript("Samplereset", string.Format(CultureInfo.InvariantCulture, @"var SampleReset = confirm('" + msg + "'); {0}", handlerid.CallbackManager.GetScript("JobidResethandler", "SampleReset")));
                        IsReset = true;
                        //ICallbackManagerHolder handlerid = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                        //handlerid.CallbackManager.RegisterHandler("InvoiceHandler", this);
                        //string msg = "Report Due Date exist Request Due Date!. Do you want to continue?";
                        //WebWindow.CurrentRequestWindow.RegisterClientScript("ReportingDateGreaterthanDueDate", string.Format(CultureInfo.InvariantCulture, @"var SaveInvoiceID = confirm('" + msg + "'); {0}", handlerid.CallbackManager.GetScript("InvoiceHandler", "SaveInvoiceID")));
                        //e.Cancel = true;
                    }
                    else
                    {
                        Application.ShowViewStrategy.ShowMessage("The submitted job ID cannot be reset. ", InformationType.Info, 3000, InformationPosition.Top);
                    }
                    //List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lsamplelogin = ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", sc.Oid)).ToList();
                    //// DashboardViewItem lsampllogin = ((DetailView)View).FindItem("SampleRegistration_SampleLogin") as DashboardViewItem;
                    // foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn sl in lsamplelogin)
                    // {
                    //     List<SampleParameter> lstsampleparameter = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", sl.Oid)).Where(i => i.IsPrepMethodComplete != null && i.PrepMethodCount != 0).ToList();
                    //     if (lstsampleparameter.Count > 0)
                    //     {
                    //         string sampleprebatch = "yes";
                    //         {
                    //             if (sampleprebatch == "yes")
                    //             {
                    //                 Application.ShowViewStrategy.ShowMessage("Cannot be reset result is already entered on one sample", InformationType.Info, 3000, InformationPosition.Top);
                    //             }
                    //             else
                    //             {
                    //                 var qcbatch = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", sl.Oid)).Where(i => i.QCBatchID != null).ToList();
                    //                 //  QCBatchSequence qcbatchid=ObjectSpace.FindObject<QCBatchSequence>(CriteriaOperator.Parse("",))
                    //                 if (qcbatch.Count > 0)
                    //                 {
                    //                     Application.ShowViewStrategy.ShowMessage("Cannot be reset result is already entered on one sample", InformationType.Info, 3000, InformationPosition.Top);
                    //                 }
                    //             }
                    //         }

                    //     }
                    //     else
                    //     {
                    //         ICallbackManagerHolder handlerid = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    //         handlerid.CallbackManager.RegisterHandler("Sampleresethandler", this);
                    //         string msg = "The sample tests and parameters are cleared..! Do you want to continue?";
                    //         WebWindow.CurrentRequestWindow.RegisterClientScript("Samplereset", string.Format(CultureInfo.InvariantCulture, @"var SampleReset = confirm('" + msg + "'); {0}", handlerid.CallbackManager.GetScript("Sampleresethandler", "ResetSamples")));

                    //     }



                    // }

                    // //e.Action.ac = false;
                }


            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnCOCImport_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                Samplecheckin objsc = (Samplecheckin)View.CurrentObject;
                if (objsc != null && objsc.ProjectID != null)
                {
                    if (objsc.IsSampling && objsc.DateExpect != DateTime.MinValue || !objsc.IsSampling)
                    {
                        IObjectSpace objspace = Application.CreateObjectSpace();
                        CollectionSource cs = new CollectionSource(objspace, typeof(COCSettings));
                        cs.Criteria["Filter"] = CriteriaOperator.Parse(string.Format("[ProjectID] = '{0}' AND [ClientName] = '{1}' AND ([RetireDate] >= '{2}' Or [RetireDate] Is Null)", objsc.ProjectID.Oid, objsc.ClientName.Oid, DateTime.Today));
                        ListView CreateListView = Application.CreateListView("COCSettings_ListView_SampleRegistration_ImportCOC", cs, false);
                        ShowViewParameters showViewParameters = new ShowViewParameters(CreateListView);
                        showViewParameters.Context = TemplateContext.NestedFrame;
                        showViewParameters.CreatedView.Caption = "Import Pre-Log";
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.Accepting += btncocImporting_Accepting;
                        dc.CloseOnCurrentObjectProcessing = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }
                    else
                    {
                        Application.ShowViewStrategy.ShowMessage("Date expect must not be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                    }
                }
                else
                {
                    Application.ShowViewStrategy.ShowMessage("Project ID must not be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btncocImporting_Accepting(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                if (e.AcceptActionArgs.SelectedObjects.Count == 1)
                {
                    bool DBAccess = false;
                    string strjobid = null;
                    IObjectSpace os = Application.CreateObjectSpace();
                    Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                    UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    int SampleNo = 0;
                    COCSettings objCOCSettings = (COCSettings)e.AcceptActionArgs.CurrentObject;

                    List<COCSettingsSamples> lstcocSample = View.ObjectSpace.GetObjects<COCSettingsSamples>(CriteriaOperator.Parse("[COCID] = ?", objCOCSettings.Oid)).ToList();
                    Samplecheckin objsamplecheckin = (Samplecheckin)View.CurrentObject;
                    //Samplecheckin objsamplecheckin = uow.GetObjectByKey<Samplecheckin>(objsc.Oid) ; //os.GetObject<Samplecheckin>((Samplecheckin)View.CurrentObject);
                    if (objCOCSettings != null && objsamplecheckin != null)
                    {
                        foreach (ViewItem item in ((DetailView)Application.MainWindow.View).Items.Where(i => i.Id == "JobID"))
                        {
                            if (item.GetType() == typeof(ASPxStringPropertyEditor))
                            {
                                ASPxStringPropertyEditor propertyEditor = item as ASPxStringPropertyEditor;
                                if (propertyEditor.AllowEdit == true && string.IsNullOrEmpty(objsamplecheckin.JobID))
                                {
                                    Application.ShowViewStrategy.ShowMessage("JobID must not be empty.", InformationType.Info, timer.Seconds, InformationPosition.Top);
                                }
                                else if (propertyEditor.AllowEdit == false)
                                {
                                    var curdateISampling = DateTime.Now.ToString("yyMM");
                                    CriteriaOperator filternew = null;
                                    if (objsamplecheckin.IsSampling)
                                    {
                                        filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1 And [IsSampling] = True And [JobID] like  ?+'%'", curdateISampling);
                                    }
                                    else
                                    {
                                        filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1 And [IsSampling] <> True");
                                    }
                                    if (objsamplecheckin.IsSampling)
                                    {
                                        if (string.IsNullOrEmpty(objsamplecheckin.JobID))
                                        {
                                            CriteriaOperator qcct = CriteriaOperator.Parse("Max(JobID)");
                                            var val = ((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), qcct, null);
                                            string tempqc = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), qcct, filternew)) + 1).ToString();
                                            string strSampling = "32";
                                            if (tempqc != "1")
                                            {
                                                var predate = tempqc.Substring(0, 4);
                                                if (predate != curdateISampling)
                                                {
                                                    tempqc = curdateISampling + strSampling + "01";
                                                }
                                            }
                                            else
                                            {
                                                tempqc = curdateISampling + strSampling + "01";
                                            }
                                            objsamplecheckin.JobID = strJobID = tempqc;
                                        }
                                    }
                                    else
                                    {
                                        if (string.IsNullOrEmpty(objsamplecheckin.JobID))
                                        {
                                            var curdate = DateTime.Now;
                                            strjobid = string.Empty;
                                            int formatlen = 0;
                                            JobIDFormat objJDformat = os.FindObject<JobIDFormat>(CriteriaOperator.Parse(""));
                                            if (objJDformat != null)
                                            {
                                                if (objJDformat.Year == YesNoFilter.Yes)
                                                {
                                                    strjobid += curdate.ToString(objJDformat.YearFormat.ToString());
                                                    formatlen = objJDformat.YearFormat.ToString().Length;
                                                }
                                                if (objJDformat.Month == YesNoFilter.Yes)
                                                {
                                                    strjobid += curdate.ToString(objJDformat.MonthFormat.ToUpper());
                                                    formatlen = formatlen + objJDformat.MonthFormat.Length;
                                                }
                                                if (objJDformat.Day == YesNoFilter.Yes)
                                                {
                                                    strjobid += curdate.ToString(objJDformat.DayFormat);
                                                    formatlen = formatlen + objJDformat.DayFormat.Length;
                                                }
                                                CriteriaOperator sam = objJDformat.Prefix == YesNoFilter.Yes ? CriteriaOperator.Parse("Max(SUBSTRING(JobID, " + objJDformat.PrefixValue.ToString().Length + "))") : CriteriaOperator.Parse("Max(SUBSTRING(JobID, 0))");
                                                //CriteriaOperator filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1");
                                                string tempid = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                                                if (tempid != "1")
                                                {
                                                    var predate = tempid.Substring(0, formatlen);
                                                    if (predate == strjobid)
                                                    {
                                                        if (objJDformat.Prefix == YesNoFilter.Yes)
                                                        {
                                                            if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                            {
                                                                strjobid = objJDformat.PrefixValue + tempid;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            strjobid = tempid;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (objJDformat.Prefix == YesNoFilter.Yes)
                                                        {
                                                            if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                            {
                                                                strjobid = objJDformat.PrefixValue + strjobid;
                                                            }
                                                        }
                                                        if (objJDformat.SequentialNumber > 1)
                                                        {
                                                            if (objJDformat.NumberStart > 0)
                                                            {
                                                                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                                            }
                                                            else
                                                            {
                                                                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                                            {
                                                                strjobid = strjobid + objJDformat.NumberStart;
                                                            }
                                                            else
                                                            {
                                                                strjobid = strjobid + "1";
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    if (objJDformat.Prefix == YesNoFilter.Yes)
                                                    {
                                                        if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                        {
                                                            strjobid = objJDformat.PrefixValue + strjobid;
                                                        }
                                                    }
                                                    if (objJDformat.SequentialNumber > 1)
                                                    {
                                                        if (objJDformat.NumberStart > 0)
                                                        {
                                                            strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                                        }
                                                        else
                                                        {
                                                            strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                                        {
                                                            strjobid = strjobid + objJDformat.NumberStart;
                                                        }
                                                        else
                                                        {
                                                            strjobid = strjobid + "1";
                                                        }
                                                    }
                                                }
                                                objsamplecheckin.JobID = strJobID = strjobid;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(objsamplecheckin.JobID))
                        {
                            objsamplecheckin.SampleMatries = objCOCSettings.SampleMatries;
                            if (objCOCSettings.TAT != null)
                            {
                                objsamplecheckin.TAT = View.ObjectSpace.GetObjectByKey<TurnAroundTime>(objCOCSettings.TAT.Oid);
                                int tatHour = objCOCSettings.TAT.Count;
                                int Day = 0;
                                if (!objsamplecheckin.IsSampling)
                                {
                                    if (tatHour >= 24)
                                    {
                                        Day = tatHour / 24;
                                        objsamplecheckin.DueDate = AddWorkingDays(objsamplecheckin.RecievedDate, Day);
                                    }
                                    else
                                    {
                                        objsamplecheckin.DueDate = AddWorkingHours(objsamplecheckin.RecievedDate, tatHour);
                                    }
                                }
                            }

                            objsamplecheckin.BalanceID = objCOCSettings.BalanceID;
                            objsamplecheckin.BatchID = objCOCSettings.BatchID;
                            objsamplecheckin.Comment = objCOCSettings.Comment;
                            objsamplecheckin.Remark = objCOCSettings.Comment;
                            objsamplecheckin.IsAlpacJobid = objCOCSettings.IsAlpacCOCid;
                            objsamplecheckin.NoOfSamples = objCOCSettings.NoOfSamples;
                            objsamplecheckin.NPTest = objCOCSettings.NPTest;
                            objsamplecheckin.NumberOfSample = objCOCSettings.NumberOfSample;
                            objsamplecheckin.PackageNo = objCOCSettings.PackageNo;
                            objsamplecheckin.SampleCategory = objCOCSettings.SampleCategory;
                            objsamplecheckin.ReportTemplate = objCOCSettings.ReportTemplate;
                            objsamplecheckin.Test = objCOCSettings.NPTest;
                            objsamplecheckin.TestName = objCOCSettings.NPTest;
                            ObjectSpace.CommitChanges();
                            if (objCOCSettings.ClientContact != null)
                            {
                                objsamplecheckin.ClientContact = View.ObjectSpace.GetObjectByKey<Contact>(objCOCSettings.ClientContact.Oid);
                            }
                            if (objCOCSettings.ClientName != null)
                            {
                                objsamplecheckin.ClientName = View.ObjectSpace.GetObjectByKey<Customer>(objCOCSettings.ClientName.Oid);
                                objsamplecheckin.ClientAddress = objCOCSettings.ClientAddress;
                                objsamplecheckin.ClientAddress2 = objCOCSettings.ClientAddress2;
                                objsamplecheckin.ClientPhone = objCOCSettings.ClientPhone;
                            }
                            if (objCOCSettings.ProjectID != null)
                            {
                                objsamplecheckin.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objCOCSettings.ProjectID.Oid);
                                objsamplecheckin.ProjectCity = objCOCSettings.ProjectCity;
                                objsamplecheckin.ProjectOverview = objCOCSettings.ProjectOverview;
                                objsamplecheckin.ProjectSource = objCOCSettings.ProjectSource;
                                if (objCOCSettings.ProjectManager != null)
                                {
                                    objsamplecheckin.ProjectManager = View.ObjectSpace.GetObjectByKey<Employee>(objCOCSettings.ProjectManager.Oid);
                                }
                                if (objCOCSettings.ProjectCategory != null)
                                {
                                    objsamplecheckin.ProjectCategory = View.ObjectSpace.GetObjectByKey<ProjectCategory>(objCOCSettings.ProjectCategory.Oid);
                                }
                            }
                            objsamplecheckin.COCSource = View.ObjectSpace.GetObjectByKey<COCSettings>(objCOCSettings.Oid);
                            if (objCOCSettings.QuoteID != null)
                            {
                                objsamplecheckin.QuoteID = View.ObjectSpace.GetObjectByKey<CRMQuotes>(objCOCSettings.QuoteID.Oid);
                                ListPropertyEditor lstItemPrice = ((DetailView)View).FindItem("SCItemCharges") as ListPropertyEditor;
                                if (objCOCSettings.QuoteID != null)
                                {
                                    CRMQuotes objQuote = uow.GetObjectByKey<CRMQuotes>(objCOCSettings.QuoteID.Oid);
                                    if (objQuote != null && objQuote.QuotesItemChargePrice.Count > 0)
                                    {
                                        foreach (QuotesItemChargePrice obj in objQuote.QuotesItemChargePrice.ToList())
                                        {
                                            //SampleCheckinItemChargePricing objNewItem = os.CreateObject<SampleCheckinItemChargePricing>();
                                            SampleCheckinItemChargePricing objNewItem = new SampleCheckinItemChargePricing(uow);
                                            objNewItem.ItemPrice = uow.GetObjectByKey<ItemChargePricing>(obj.ItemPrice.Oid);
                                            objNewItem.Qty = obj.Qty;
                                            objNewItem.UnitPrice = obj.UnitPrice;
                                            objNewItem.Amount = obj.Amount;
                                            objNewItem.FinalAmount = obj.FinalAmount;
                                            objNewItem.Discount = obj.Discount;
                                            objNewItem.Description = obj.Description;
                                            objNewItem.NpUnitPrice = obj.NpUnitPrice;
                                            objNewItem.SampleCheckin = uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                            objsamplecheckin.SCItemCharges.Add(View.ObjectSpace.GetObject(objNewItem));
                                            //objNewItem.Save();
                                        }
                                    }
                                }
                            }
                            if (objCOCSettings.Attachment != null && objCOCSettings.Attachment.Count > 0)
                            {
                                List<Attachment> lstAttachment = View.ObjectSpace.GetObjects<Attachment>(CriteriaOperator.Parse("[COCSettings] = ?", objCOCSettings.Oid)).ToList();
                                foreach (Attachment objAttachment in lstAttachment.ToList())
                                {
                                    if (lstAttachment != null)
                                    {
                                        //Attachment objNewAttachment = os.CreateObject<Attachment>();
                                        Attachment objNewAttachment = new Attachment(uow);
                                        Attachment oldAttachment = uow.GetObjectByKey<Attachment>(objAttachment.Oid);
                                        if (oldAttachment != null)
                                        {
                                            objNewAttachment.Name = oldAttachment.Name;
                                            objNewAttachment.Category = oldAttachment.Category;
                                            objNewAttachment.Date = oldAttachment.Date;
                                            if (oldAttachment.Operator != null)
                                            {
                                                objNewAttachment.Operator = uow.GetObjectByKey<Employee>(oldAttachment.Operator.Oid);
                                            }
                                            objNewAttachment.Comment = oldAttachment.Comment;
                                            objNewAttachment.Samplecheckin = uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                            objNewAttachment.Attachments = oldAttachment.Attachments;
                                            objsamplecheckin.Attachments.Add(View.ObjectSpace.GetObject(objNewAttachment));
                                        }
                                    }
                                }
                            }
                            if (objCOCSettings.Note != null && objCOCSettings.Note.Count > 0)
                            {
                                List<Notes> lstNotes = View.ObjectSpace.GetObjects<Notes>(CriteriaOperator.Parse("[COCSettings] = ?", objCOCSettings.Oid)).ToList();
                                foreach (Notes objNotes in lstNotes.ToList())
                                {
                                    Notes oldNotes = uow.GetObjectByKey<Notes>(objNotes.Oid);
                                    if (oldNotes != null)
                                    {
                                        Notes objNewNotes = new Notes(uow);
                                        objNewNotes.Title = oldNotes.Title;
                                        objNewNotes.Attachment = oldNotes.Attachment;
                                        objNewNotes.Text = oldNotes.Text;
                                        if (oldNotes.Author != null)
                                        {
                                            objNewNotes.Author = uow.GetObjectByKey<Employee>(oldNotes.Author.Oid);
                                        }
                                        objNewNotes.Date = oldNotes.Date;
                                        objNewNotes.Samplecheckin = uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                        objNewNotes.FollowUpDate = oldNotes.FollowUpDate;
                                        objsamplecheckin.Notes.Add(View.ObjectSpace.GetObject(objNewNotes));
                                    }
                                }
                            }
                            foreach (COCSettingsSamples cocSS in lstcocSample.OrderBy(i => i.SampleNo).ToList())
                            {
                                //Modules.BusinessObjects.SampleManagement.SampleLogIn objSLNew = os.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                                Modules.BusinessObjects.SampleManagement.SampleLogIn objSLNew = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                                objSLNew.JobID = uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                if (objSLNew != null)
                                {
                                    if (DBAccess == false)
                                    {
                                        SelectedData sproc = currentSession.ExecuteSproc("GetSampleID", new OperandValue(objsamplecheckin.JobID.ToString()));
                                        if (sproc.ResultSet[1].Rows[0].Values[0] != null)
                                        {
                                            objSLInfo.SampleID = sproc.ResultSet[1].Rows[0].Values[0].ToString();
                                            SampleNo = Convert.ToInt32(objSLInfo.SampleID);
                                            DBAccess = true;
                                        }
                                        else
                                        {
                                            return;
                                        }
                                    }
                                    objSLNew.SampleNo = SampleNo;

                                    if (objsamplecheckin.Collector != null)
                                    {
                                        objSLNew.Collector = uow.GetObjectByKey<Collector>(objsamplecheckin.Collector.Oid);
                                    }
                                    objSLNew.CollectDate = objsamplecheckin.DateCollected ?? DateTime.MinValue;
                                    objSLNew.CollectTimeDisplay = objsamplecheckin.TimeCollected;

                                    objSLNew.ClientSampleID = cocSS.ClientSampleID;
                                    objSLNew.Test = true;
                                    if (cocSS.VisualMatrix != null)
                                    {
                                        objSLNew.VisualMatrix = uow.GetObjectByKey<VisualMatrix>(cocSS.VisualMatrix.Oid);
                                    }
                                    if (cocSS.SampleType != null)
                                    {
                                        objSLNew.SampleType = uow.GetObjectByKey<SampleType>(cocSS.SampleType.Oid);
                                    }
                                    objSLNew.Qty = cocSS.Qty;
                                    if (cocSS.Storage != null)
                                    {
                                        objSLNew.Storage = uow.GetObjectByKey<Storage>(cocSS.Storage.Oid);
                                    }
                                    objSLNew.Preservetives = cocSS.Preservetives;
                                    objSLNew.SamplingLocation = cocSS.SamplingLocation;
                                    if (cocSS.QCType != null)
                                    {
                                        objSLNew.QCType = uow.GetObjectByKey<QCType>(cocSS.QCType.Oid);
                                    }
                                    if (cocSS.QCSource != null)
                                    {
                                        objSLNew.QCSource = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(cocSS.QCSource.Oid);
                                    }
                                    if (cocSS.Client != null)
                                    {
                                        objSLNew.Client = uow.GetObjectByKey<Customer>(cocSS.Client.Oid);
                                    }
                                    if (cocSS.Department != null)
                                    {
                                        objSLNew.Department = uow.GetObjectByKey<Department>(cocSS.Department.Oid);
                                    }
                                    if (cocSS.ProjectID != null)
                                    {
                                        objSLNew.ProjectID = uow.GetObjectByKey<Project>(cocSS.ProjectID.Oid);
                                    }
                                    if (cocSS.PreserveCondition != null)
                                    {
                                        objSLNew.PreserveCondition = uow.GetObjectByKey<PreserveCondition>(cocSS.PreserveCondition.Oid);
                                    }
                                    if (cocSS.StorageID != null)
                                    {
                                        objSLNew.StorageID = uow.GetObjectByKey<Storage>(cocSS.StorageID.Oid);
                                    }
                                    objSLNew.FlowRate = cocSS.FlowRate;
                                    objSLNew.TimeStart = cocSS.TimeStart;
                                    objSLNew.TimeEnd = cocSS.TimeEnd;
                                    objSLNew.Time = cocSS.Time;
                                    objSLNew.Volume = cocSS.Volume;
                                    objSLNew.Address = cocSS.Address;
                                    objSLNew.AreaOrPerson = cocSS.AreaOrPerson;
                                    if (cocSS.BalanceID != null)
                                    {
                                        objSLNew.BalanceID = uow.GetObjectByKey<Modules.BusinessObjects.Assets.Labware>(cocSS.BalanceID.Oid);
                                    }
                                    objSLNew.AssignTo = cocSS.AssignTo;
                                    objSLNew.Barp = cocSS.Barp;
                                    objSLNew.BatchID = cocSS.BatchID;
                                    objSLNew.BatchSize = cocSS.BatchSize;
                                    objSLNew.BatchSize_pc = cocSS.BatchSize_pc;
                                    objSLNew.BatchSize_Units = cocSS.BatchSize_Units;
                                    objSLNew.Blended = cocSS.Blended;
                                    objSLNew.BottleQty = cocSS.BottleQty;
                                    objSLNew.BuriedDepthOfGroundWater = cocSS.BuriedDepthOfGroundWater;
                                    objSLNew.ChlorineFree = cocSS.ChlorineFree;
                                    objSLNew.ChlorineTotal = cocSS.ChlorineTotal;
                                    objSLNew.City = cocSS.City;
                                    objSLNew.CompositeQty = cocSS.CompositeQty;
                                    objSLNew.DateEndExpected = cocSS.DateEndExpected;
                                    objSLNew.DateStartExpected = cocSS.DateStartExpected;
                                    objSLNew.ClientSampleID = cocSS.ClientSampleID;
                                    objSLNew.Comment = cocSS.Comment;
                                    objSLNew.Containers = cocSS.Containers;
                                    objSLNew.Depth = cocSS.Depth;
                                    objSLNew.Description = cocSS.Description;
                                    objSLNew.DischargeFlow = cocSS.DischargeFlow;
                                    objSLNew.DischargePipeHeight = cocSS.DischargePipeHeight;
                                    objSLNew.DO = cocSS.DO;
                                    objSLNew.Emission = cocSS.Emission;
                                    objSLNew.EndOfRoad = cocSS.EndOfRoad;
                                    objSLNew.EquipmentModel = cocSS.EquipmentModel;
                                    objSLNew.EquipmentName = cocSS.EquipmentName;
                                    objSLNew.FacilityID = cocSS.FacilityID;
                                    objSLNew.FacilityName = cocSS.FacilityName;
                                    objSLNew.FacilityType = cocSS.FacilityType;
                                    objSLNew.FinalForm = cocSS.FinalForm;
                                    objSLNew.FinalPackaging = cocSS.FinalPackaging;
                                    objSLNew.FlowRate = cocSS.FlowRate;
                                    objSLNew.FlowRateCubicMeterPerHour = cocSS.FlowRateCubicMeterPerHour;
                                    objSLNew.FlowRateLiterPerMin = cocSS.FlowRateLiterPerMin;
                                    objSLNew.FlowVelocity = cocSS.FlowVelocity;
                                    objSLNew.ForeignMaterial = cocSS.ForeignMaterial;
                                    objSLNew.Frequency = cocSS.Frequency;
                                    objSLNew.GISStatus = cocSS.GISStatus;
                                    objSLNew.GravelContent = cocSS.GravelContent;
                                    objSLNew.GrossWeight = cocSS.GrossWeight;
                                    objSLNew.GroupSample = cocSS.GroupSample;
                                    objSLNew.Hold = cocSS.Hold;
                                    objSLNew.Humidity = cocSS.Humidity;
                                    objSLNew.IceCycle = cocSS.IceCycle;
                                    objSLNew.Increments = cocSS.Increments;
                                    objSLNew.Interval = cocSS.Interval;
                                    objSLNew.IsActive = cocSS.IsActive;
                                    //objSLNew.IsNotTransferred = cocSS.IsNotTransferred;
                                    objSLNew.ItemName = cocSS.ItemName;
                                    objSLNew.KeyMap = cocSS.KeyMap;
                                    objSLNew.LicenseNumber = cocSS.LicenseNumber;
                                    objSLNew.ManifestNo = cocSS.ManifestNo;
                                    objSLNew.MonitoryingRequirement = cocSS.MonitoryingRequirement;
                                    objSLNew.NoOfCollectionsEachTime = cocSS.NoOfCollectionsEachTime;
                                    objSLNew.NoOfPoints = cocSS.NoOfPoints;
                                    objSLNew.Notes = cocSS.Notes;
                                    objSLNew.OriginatingEntiry = cocSS.OriginatingEntiry;
                                    objSLNew.OriginatingLicenseNumber = cocSS.OriginatingLicenseNumber;
                                    objSLNew.PackageNumber = cocSS.PackageNumber;
                                    objSLNew.ParentSampleDate = cocSS.ParentSampleDate;
                                    objSLNew.ParentSampleID = cocSS.ParentSampleID;
                                    objSLNew.PiecesPerUnit = cocSS.PiecesPerUnit;
                                    objSLNew.Preservetives = cocSS.Preservetives;
                                    objSLNew.ProjectName = cocSS.ProjectName;
                                    objSLNew.PurifierSampleID = cocSS.PurifierSampleID;
                                    objSLNew.PWSID = cocSS.PWSID;
                                    if (cocSS.PWSSystemName != null)
                                    {
                                        objSLNew.PWSSystemName = uow.GetObjectByKey<PWSSystem>(cocSS.PWSSystemName.Oid);
                                    }
                                    objSLNew.RegionNameOfSection = cocSS.RegionNameOfSection;
                                    objSLNew.RejectionCriteria = cocSS.RejectionCriteria;
                                    objSLNew.RepeatLocation = cocSS.RepeatLocation;
                                    objSLNew.RetainedWeight = cocSS.RetainedWeight;
                                    objSLNew.RiverWidth = cocSS.RiverWidth;
                                    objSLNew.RushSample = cocSS.RushSample;
                                    objSLNew.SampleAmount = cocSS.SampleAmount;
                                    objSLNew.SampleCondition = cocSS.SampleCondition;
                                    objSLNew.SampleDescription = cocSS.SampleDescription;
                                    objSLNew.SampleImage = cocSS.SampleImage;
                                    //objSLNew.SampleName = cocSS.SampleName;
                                    objSLNew.SamplePointID = cocSS.SamplePointID;
                                    objSLNew.SamplePointType = cocSS.SamplePointType;
                                    objSLNew.SampleSource = cocSS.SampleSource;
                                    objSLNew.SampleTag = cocSS.SampleTag;
                                    objSLNew.SampleWeight = cocSS.SampleWeight;
                                    objSLNew.SamplingAddress = cocSS.SamplingAddress;
                                    objSLNew.SamplingEquipment = cocSS.SamplingEquipment;
                                    objSLNew.SamplingLocation = cocSS.SamplingLocation;
                                    objSLNew.SamplingProcedure = cocSS.SamplingProcedure;
                                    objSLNew.SequenceTestSampleID = cocSS.SequenceTestSampleID;
                                    objSLNew.SequenceTestSortNo = cocSS.SequenceTestSortNo;
                                    objSLNew.ServiceArea = cocSS.ServiceArea;
                                    objSLNew.SiteCode = cocSS.SiteCode;
                                    objSLNew.SiteDescription = cocSS.SiteDescription;
                                    objSLNew.SiteID = cocSS.SiteID;
                                    objSLNew.SiteNameArchived = cocSS.SiteNameArchived;
                                    objSLNew.SiteUserDefinedColumn1 = cocSS.SiteUserDefinedColumn1;
                                    objSLNew.SiteUserDefinedColumn2 = cocSS.SiteUserDefinedColumn2;
                                    objSLNew.SiteUserDefinedColumn3 = cocSS.SiteUserDefinedColumn3;
                                    objSLNew.SubOut = cocSS.SubOut;
                                    if (cocSS.SystemType != null)
                                    {
                                        objSLNew.SystemType = uow.GetObjectByKey<SystemTypes>(cocSS.SystemType.Oid);
                                    }
                                    objSLNew.TargetMGTHC_CBD_mg_pc = cocSS.TargetMGTHC_CBD_mg_pc;
                                    objSLNew.TargetMGTHC_CBD_mg_unit = cocSS.TargetMGTHC_CBD_mg_unit;
                                    objSLNew.TargetPotency = cocSS.TargetPotency;
                                    objSLNew.TargetUnitWeight_g_pc = cocSS.TargetUnitWeight_g_pc;
                                    objSLNew.TargetUnitWeight_g_unit = cocSS.TargetUnitWeight_g_unit;
                                    objSLNew.TargetWeight = cocSS.TargetWeight;
                                    objSLNew.Time = cocSS.Time;
                                    objSLNew.TimeEnd = cocSS.TimeEnd;
                                    objSLNew.TimeStart = cocSS.TimeStart;
                                    objSLNew.TotalSamples = cocSS.TotalSamples;
                                    objSLNew.TotalTimes = cocSS.TotalTimes;
                                    if (cocSS.TtimeUnit != null)
                                    {
                                        objSLNew.TtimeUnit = uow.GetObjectByKey<Modules.BusinessObjects.Setting.Unit>(cocSS.TtimeUnit.Oid);
                                    }
                                    if (cocSS.WaterType != null)
                                    {
                                        objSLNew.WaterType = uow.GetObjectByKey<WaterTypes>(cocSS.WaterType.Oid);
                                    }
                                    objSLNew.ZipCode = cocSS.ZipCode;
                                    if (cocSS.StationLocation != null)
                                    {
                                        objSLNew.StationLocation = uow.GetObjectByKey<SampleSites>(cocSS.StationLocation.Oid);
                                        objSLNew.StationLocationName = cocSS.StationLocation.SiteName;
                                    }
                                    //if (cocSS.ModifiedBy != null)
                                    //{
                                    //    objSLNew.ModifiedBy = os.GetObjectByKey<Modules.BusinessObjects.Hr.CustomSystemUser>(cocSS.ModifiedBy.Oid);
                                    //}
                                    //objSLNew.ModifiedDate = cocSS.ModifiedDate;
                                    objSLNew.Comment = cocSS.Comment;
                                    objSLNew.Latitude = cocSS.Latitude;
                                    objSLNew.Longitude = cocSS.Longitude;
                                    List<COCSettingsTest> lstcocTest = View.ObjectSpace.GetObjects<COCSettingsTest>(CriteriaOperator.Parse("[COCSettingsSamples] = ?", cocSS.Oid)).ToList();
                                    foreach (COCSettingsTest cocT in lstcocTest.ToList())
                                    {
                                        //SampleParameter objSP = os.CreateObject<SampleParameter>();
                                        SampleParameter objSP = new SampleParameter(uow);
                                        if (objSP != null)
                                        {
                                            if (cocT.Testparameter != null)
                                            {
                                                objSP.Testparameter = uow.GetObjectByKey<Testparameter>(cocT.Testparameter.Oid);
                                            }
                                            if (cocT.COCSettingsSamples != null)
                                            {
                                                objSP.Samplelogin = objSLNew;
                                            }
                                        }
                                        objSP.Save();
                                    }
                                    objSLNew.Save();
                                    SampleNo++;
                                    List<COCSettingsBottleAllocation> lstcocBottle = View.ObjectSpace.GetObjects<COCSettingsBottleAllocation>(CriteriaOperator.Parse("[COCSettingsRegistration] = ?", cocSS.Oid)).ToList();
                                    foreach (COCSettingsBottleAllocation cocBA in lstcocBottle.Where(i => i.TestMethod != null && i.TestMethod.IsFieldTest != true).ToList())
                                    {
                                        //SampleBottleAllocation smplnew = os.CreateObject<SampleBottleAllocation>();
                                        SampleBottleAllocation smplnew = new SampleBottleAllocation(uow);
                                        smplnew.SampleRegistration = objSLNew;
                                        smplnew.TestMethod = uow.GetObjectByKey<TestMethod>(cocBA.TestMethod.Oid);
                                        smplnew.BottleID = cocBA.BottleID;
                                        if (cocBA.Containers != null)
                                        {
                                            smplnew.Containers = uow.GetObjectByKey<Modules.BusinessObjects.Setting.Container>(cocBA.Containers.Oid);
                                        }
                                        if (cocBA.Preservative != null)
                                        {
                                            smplnew.Preservative = uow.GetObjectByKey<Preservative>(cocBA.Preservative.Oid);
                                        }
                                        if (cocBA.StorageID != null)
                                        {
                                            smplnew.StorageID = uow.GetObjectByKey<Storage>(cocBA.StorageID.Oid);
                                        }
                                        if (cocBA.StorageCondition != null)
                                        {
                                            smplnew.StorageCondition = uow.GetObjectByKey<PreserveCondition>(cocBA.StorageCondition.Oid);
                                        }
                                        smplnew.Save();
                                    }
                                }
                                uow.CommitChanges();
                                IList<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSamples = uow.GetObjects(uow.GetClassInfo(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn)), CriteriaOperator.Parse("[JobID.Oid]=?", objsamplecheckin.Oid), null, int.MaxValue, false, true).Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList();
                                foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSample in lstSamples.ToList())
                                {
                                    objSample.TestSummary = string.Join("; ", new XPQuery<SampleParameter>(uow).Where(i => i.Samplelogin.Oid == objSample.Oid && i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.TestName).Distinct().ToList());
                                    objSample.FieldTestSummary = string.Join(", ", new XPQuery<SampleParameter>(uow).Where(i => i.Samplelogin.Oid == objSample.Oid && i.Testparameter != null && i.Testparameter.TestMethod != null && i.Testparameter.TestMethod.IsFieldTest == true).Select(i => i.Testparameter.TestMethod.TestName).Distinct().ToList());
                                }
                                uow.CommitChanges();
                            }
                            SelectedData updateStatusProc = currentSession.ExecuteSproc("StatusUpdate_SP");
                            objSLInfo.boolCopySamples = false;
                            ObjectSpace.CommitChanges();
                            ObjectSpace.Refresh();
                            //View.ObjectSpace.Refresh();
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "COCSettingsImportSuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                        }
                    }
                }
                else if (e.AcceptActionArgs.SelectedObjects.Count > 1)
                {
                    e.Cancel = true;
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectonlychk"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                }
                else
                {
                    e.Cancel = true;
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void DeleteAction_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View != null && (View.Id == "SampleLogIn_ListView" || View.Id == "SampleLogIn_ListView_Copy_SampleRegistration"))
                {
                    if (View.SelectedObjects.Count > 0)
                    {
                        //bool IsDeleted = false;
                        //View.RefreshDataSource();
                        List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSampleLogin = View.SelectedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList();
                        IObjectSpace os = Application.CreateObjectSpace();
                        Session currentSession = ((XPObjectSpace)os).Session;
                        UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                        foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSampleLogin in lstSampleLogin)
                        {
                            Modules.BusinessObjects.SampleManagement.SampleLogIn obj = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSampleLogin.Oid);
                            if (obj.Testparameters.Count > 0)
                            {
                                int qcCount = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.QC.QCBatchSequence), CriteriaOperator.Parse("[SampleID.Oid] = ?", obj.Oid));
                                int sdmsCount = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SpreadSheetEntry), CriteriaOperator.Parse("[uqSampleParameterID] Is Not Null And [uqSampleParameterID.Samplelogin] Is Not Null And [uqSampleParameterID.Samplelogin.Oid] = ?", obj.Oid));
                                if (qcCount == 0 && sdmsCount == 0)
                                {
                                    bool IsDeleted = false;
                                    List<SampleParameter> lstSampleParameters = obj.SampleParameter.Cast<SampleParameter>().ToList();
                                    foreach (SampleParameter objSampleParam in lstSampleParameters)
                                    {
                                        SampleParameter sampleParam = uow.GetObjectByKey<SampleParameter>(objSampleParam.Oid);
                                        if (sampleParam.AnalyzedDate != null && sampleParam.AnalyzedDate != DateTime.MinValue)
                                        {
                                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletetest"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        }
                                        else
                                        {
                                            CriteriaOperator criteriaSample = CriteriaOperator.Parse("[uqSampleParameterID]='" + sampleParam.Oid + "'");
                                            SpreadSheetEntry objSample = uow.FindObject<SpreadSheetEntry>(criteriaSample);
                                            if (sampleParam.QCBatchID != null)
                                            {
                                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeleteqctest"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                            }
                                            else if (objSample != null)
                                            {
                                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletesdmstest"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                            }
                                            else
                                            {
                                                uow.Delete(uow.GetObjectByKey<SampleParameter>(sampleParam.Oid));
                                                IsDeleted = true;
                                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\SuccessfulMessage", "Deletesuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                                            }

                                        }
                                    }
                                    if (IsDeleted)
                                    {
                                        uow.CommitChanges();
                                    }
                                    int spCount = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleParameter), CriteriaOperator.Parse("[Samplelogin.Oid] = ?", obj.Oid));
                                    if (spCount == 0)
                                    {
                                        XPClassInfo BottleSetupinfo;
                                        ////BottleSetupinfo = uow.GetClassInfo(typeof(BottleSetup));
                                        ////IList<BottleSetup> lstBottles = uow.GetObjects(BottleSetupinfo, CriteriaOperator.Parse("Contains([SampleContainer], ?)", obj.SampleID), new SortingCollection(), 0, 0, false, true).Cast<BottleSetup>().ToList();
                                        ////if (lstBottles != null && lstBottles.Count > 0)
                                        ////{
                                        ////    foreach (BottleSetup objBottleSetup in lstBottles.ToList())
                                        ////    {
                                        ////        BottleSetup objBottle = uow.GetObjectByKey<BottleSetup>(objBottleSetup.Oid);
                                        ////        List<string> lstContainers = objBottle.SampleContainer.Split(',').Where(i => i.Trim().StartsWith(obj.SampleID)).ToList();
                                        ////        if (lstContainers != null && lstContainers.Count > 0)
                                        ////        {
                                        ////            foreach (string strContainer in lstContainers)
                                        ////            {
                                        ////                objBottle.SampleContainer = objBottle.SampleContainer.Replace(strContainer, string.Empty);
                                        ////            }

                                        ////            if (objBottle.SampleContainer.StartsWith(", "))
                                        ////            {
                                        ////                objBottle.SampleContainer = objBottle.SampleContainer.Substring(2);
                                        ////            }
                                        ////            else
                                        ////            if (objBottle.SampleContainer.StartsWith(","))
                                        ////            {
                                        ////                objBottle.SampleContainer = objBottle.SampleContainer.Substring(1);
                                        ////            }
                                        ////            if (objBottle.SampleContainer.EndsWith(","))
                                        ////            {
                                        ////                objBottle.SampleContainer = objBottle.SampleContainer.Substring(0, objBottle.SampleContainer.Length - 1);
                                        ////            }
                                        ////        }
                                        ////        if (string.IsNullOrEmpty(objBottle.SampleContainer))
                                        ////        {
                                        ////            uow.Delete(objBottle);
                                        ////        }
                                        ////    }
                                        ////}
                                        XPClassInfo SampleBottleAllocationinfo;
                                        SampleBottleAllocationinfo = uow.GetClassInfo(typeof(SampleBottleAllocation));
                                        IList<SampleBottleAllocation> lstbottleAllocation = uow.GetObjects(SampleBottleAllocationinfo, CriteriaOperator.Parse("SampleRegistration=?", obj.Oid), new SortingCollection(), 0, 0, false, true).Cast<SampleBottleAllocation>().ToList();
                                        if (lstbottleAllocation.Count > 0)
                                        {
                                            foreach (SampleBottleAllocation objSamplebottleAll in lstbottleAllocation.ToList())
                                            {
                                                SampleBottleAllocation objbottleAll = uow.GetObjectByKey<SampleBottleAllocation>(objSamplebottleAll.Oid);
                                                uow.Delete(objbottleAll);
                                            }
                                        }
                                        uow.Delete(obj);
                                    }
                                    else
                                    {
                                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletesample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    }
                                }
                                else
                                {
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletesample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                }
                            }
                            else
                            {
                                //base.Delete(args);
                                uow.Delete(obj);
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\SuccessfulMessage", "Deletesuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                            }
                        }
                        uow.CommitChanges();
                        if (Application.MainWindow.View is DashboardView)
                        {
                            DashboardViewItem dvSampleCheckin = ((DashboardView)Application.MainWindow.View).FindItem("SampleCheckin") as DashboardViewItem;
                            if (dvSampleCheckin != null && dvSampleCheckin.InnerView != null)
                            {
                                Samplecheckin objCurrent = (Samplecheckin)dvSampleCheckin.InnerView.CurrentObject;
                                if (objCurrent != null)
                                {
                                    List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSamples = uow.Query<Modules.BusinessObjects.SampleManagement.SampleLogIn>().Where(i => i.JobID != null && i.JobID.Oid == objCurrent.Oid).ToList();
                                    if (lstSamples.Count == 0)
                                    {
                                        Samplecheckin objCurre = uow.GetObjectByKey<Samplecheckin>(objCurrent.Oid);
                                        if (objCurre != null)
                                        {
                                            objCurre.Status = SampleRegistrationSignoffStatus.PendingSubmit;
                                            uow.CommitChanges();
                                        }
                                    }
                                }
                            }
                        }
                        if (Frame is NestedFrame)
                        {
                            NestedFrame nestedFrame = (NestedFrame)Frame;
                            if (nestedFrame != null)
                            {
                                CompositeView view = nestedFrame.ViewItem.View;
                                foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                                {
                                    if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
                                    {
                                        //frameContainer.Frame.View.ObjectSpace.Refresh();
                                        if (frameContainer.Frame.View is DetailView)
                                        {
                                            frameContainer.Frame.View.ObjectSpace.ReloadObject(frameContainer.Frame.View.CurrentObject);
                                        }
                                        else
                                        {
                                            (frameContainer.Frame.View as DevExpress.ExpressApp.ListView).CollectionSource.Reload();
                                        }
                                        frameContainer.Frame.View.Refresh();
                                    }
                                }
                            }
                        }
                        View.Refresh();
                        View.RefreshDataSource();
                    }
                    //Application.MainWindow.GetController<SampleRegistrationViewController>().GetDispositionNavigationItemCount();
                }
                else if (View != null && View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                {
                    List<Tuple<string, Guid, Guid>> lstDeletedSampleParameters = new List<Tuple<string, Guid, Guid>>();
                    bool IsDeleted = false;
                    var os = Application.CreateObjectSpace();
                    foreach (SampleParameter obj in View.SelectedObjects)
                    {
                        if (obj.AnalyzedDate != null && obj.AnalyzedDate != DateTime.MinValue)
                        {
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletetest"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                        }
                        else
                        {
                            CriteriaOperator criteriaSample = CriteriaOperator.Parse("[uqSampleParameterID]='" + obj.Oid + "'");
                            SpreadSheetEntry objSample = ObjectSpace.FindObject<SpreadSheetEntry>(criteriaSample);
                            if (objSample != null)
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletesdmstest"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                            }
                            else if (obj.QCBatchID != null)
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeleteqctest"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                            }
                            else if (obj.SignOff && objNavigationViewSingOff != null && objNavigationViewSingOff.Select)
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "testcannotremove"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                            }
                            else
                            {
                                //base.Delete(args);
                                if (obj != null && obj.Samplelogin != null && obj.Samplelogin.JobID != null && obj.Samplelogin.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit &&
                               obj.Samplelogin.JobID.ProjectCategory != null && (obj.Samplelogin.JobID.ProjectCategory.CategoryName == "PT" || obj.Samplelogin.JobID.ProjectCategory.CategoryName == "DOC" || obj.Samplelogin.JobID.ProjectCategory.CategoryName == "MDL"))
                                {
                                    SampleParameter objParam = os.GetObject<SampleParameter>(obj);
                                    PTStudyLogResults objOldPTStudyTest = os.FindObject<PTStudyLogResults>(CriteriaOperator.Parse("[SampleID] = ? And [SampleLogin] = ?", objParam.Oid, objParam.Samplelogin));
                                    if (objOldPTStudyTest != null)
                                    {
                                        os.Delete(objOldPTStudyTest);
                                    }
                                }
                                if (obj.Samplelogin.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                                {
                                    if (obj.Samplelogin.JobID.IsSampling)
                                    {
                                        //IList<SampleParameter> parameters = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", obj.Samplelogin.Oid), true);
                                        //if (parameters.Where(a => a.Oid != obj.Oid && a.Testparameter != null && a.Testparameter.TestMethod != null && a.Testparameter.TestMethod.IsFieldTest == true).Count() == 0)
                                        //{
                                        Frame.GetController<FlutterAppViewController>().deletesample(os, obj.Samplelogin);
                                        //}
                                    }
                                    Frame.GetController<AuditlogViewController>().insertauditdata(os, obj.Samplelogin.JobID.Oid, OperationType.Deleted, "Sample Registration", obj.Samplelogin.SampleID, "Test", obj.Testparameter.TestMethod.TestName + " | " + obj.Testparameter.Parameter.ParameterName, "", "");
                                }
                                os.Delete(os.GetObject<SampleParameter>(obj));
                                if (lstDeletedSampleParameters.FirstOrDefault(i => i.Item2 == obj.Samplelogin.Oid && i.Item3 == obj.Testparameter.TestMethod.Oid) == null)
                                {
                                    Tuple<string, Guid, Guid> tupDeletedSampleTest = new Tuple<string, Guid, Guid>(obj.Samplelogin.SampleID, obj.Samplelogin.Oid, obj.Testparameter.TestMethod.Oid);
                                    lstDeletedSampleParameters.Add(tupDeletedSampleTest);
                                }
                                IsDeleted = true;
                            }
                        }
                    }
                    IList<SampleParameter> distinctSample = ((ListView)View).SelectedObjects.Cast<SampleParameter>().ToList().GroupBy(p => new { p.Testparameter.TestMethod, p.Samplelogin }).Select(g => g.First()).ToList();
                    foreach (SampleParameter objs in distinctSample)
                    {
                        SampleBottleAllocation objAllocation = os.FindObject<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.Oid]=? and [TestMethod.Oid]=?", objs.Samplelogin.Oid, objs.Testparameter.TestMethod.Oid));
                        if (objAllocation != null)
                        {
                            os.Delete(objAllocation);
                            IsDeleted = true;
                        }

                    }
                    if (IsDeleted == true)
                    {
                        os.CommitChanges();

                        //foreach (Tuple<string, Guid, Guid> tupDeletedSampleTest in lstDeletedSampleParameters)
                        //{
                        //    IList<SampleParameter> lstSamples = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ? And [Testparameter.TestMethod.Oid] = ?", tupDeletedSampleTest.Item2, tupDeletedSampleTest.Item3));
                        //    if (lstSamples != null && lstSamples.Count == 0)
                        //    {
                        //        ////IList<BottleSetup> lstBottles = os.GetObjects<BottleSetup>(CriteriaOperator.Parse("Contains([SampleContainer], ?) and [Test][[Oid] = ?]", tupDeletedSampleTest.Item1, tupDeletedSampleTest.Item3));
                        //        ////if (lstBottles != null && lstBottles.Count > 0)
                        //        ////{
                        //        ////    foreach (BottleSetup objBottle in lstBottles.ToList())
                        //        ////    {
                        //        ////        List<string> lstContainers = objBottle.SampleContainer.Split(',').Where(i => i.Trim().StartsWith(tupDeletedSampleTest.Item1)).ToList();
                        //        ////        if (lstContainers != null && lstContainers.Count > 0)
                        //        ////        {
                        //        ////            List<string> lstSampleID = objBottle.SampleContainer.Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries).Select(i => i.Split('(')[0]).Distinct().ToList();
                        //        ////            if (lstSampleID != null && lstSampleID.Count > 0)
                        //        ////            {
                        //        ////                foreach (string strSampleID in lstSampleID)
                        //        ////                {
                        //        ////                    bool CanRemoveContainer = true;
                        //        ////                    foreach (TestMethod objTest in objBottle.Test.ToList())
                        //        ////                    {
                        //        ////                        //SampleParameter objSample = os.FirstOrDefault<SampleParameter>(i => i.Samplelogin.SampleID == strSampleID && i.Testparameter.TestMethod.Oid == objTest.Oid);
                        //        ////                        SampleParameter objSample = os.FindObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.SampleID] = ? and [Testparameter.TestMethod.Oid] = ? and [Samplelogin.GCRecord] is null", strSampleID, objTest.Oid));
                        //        ////                        if (objSample != null)
                        //        ////                        {
                        //        ////                            CanRemoveContainer = false;
                        //        ////                            //break;
                        //        ////                        }
                        //        ////                        SampleParameter objSampleParam = os.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid] = ? and [Bottle.Oid] = ?", objTest.Oid, objBottle.Oid));
                        //        ////                        if (objSampleParam == null)
                        //        ////                        {
                        //        ////                            objBottle.Test.Remove(objTest);
                        //        ////                            if (objBottle.TestGroup.Contains(objTest.TestName + ","))
                        //        ////                            {
                        //        ////                                objBottle.TestGroup = objBottle.TestGroup.Replace(objTest.TestName + ",", string.Empty);
                        //        ////                            }
                        //        ////                            else
                        //        ////                            if (objBottle.TestGroup.Contains("," + objTest.TestName))
                        //        ////                            {
                        //        ////                                objBottle.TestGroup = objBottle.TestGroup.Replace("," + objTest.TestName, string.Empty);
                        //        ////                            }
                        //        ////                            else
                        //        ////                            {
                        //        ////                                objBottle.TestGroup = objBottle.TestGroup.Replace(objTest.TestName, string.Empty);
                        //        ////                            }
                        //        ////                            if (objBottle.TestGroup.Contains(",,"))
                        //        ////                            {
                        //        ////                                objBottle.TestGroup = objBottle.TestGroup.Replace(",,", ",");
                        //        ////                            }
                        //        ////                        }
                        //        ////                    }
                        //        ////                    if (CanRemoveContainer)
                        //        ////                    {
                        //        ////                        foreach (string strContainer in lstContainers.Where(i => i.StartsWith(strSampleID)))
                        //        ////                        {
                        //        ////                            objBottle.SampleContainer = objBottle.SampleContainer.Replace(strContainer, string.Empty);
                        //        ////                        }
                        //        ////                    }
                        //        ////                }
                        //        ////            }

                        //        ////            if (objBottle.SampleContainer.StartsWith(", "))
                        //        ////            {
                        //        ////                objBottle.SampleContainer = objBottle.SampleContainer.Substring(2);
                        //        ////            }
                        //        ////            else
                        //        ////            if (objBottle.SampleContainer.StartsWith(","))
                        //        ////            {
                        //        ////                objBottle.SampleContainer = objBottle.SampleContainer.Substring(1);
                        //        ////            }
                        //        ////            if (objBottle.SampleContainer.EndsWith(","))
                        //        ////            {
                        //        ////                objBottle.SampleContainer = objBottle.SampleContainer.Substring(0, objBottle.SampleContainer.Length - 1);
                        //        ////            }
                        //        ////        }
                        //        ////        if (string.IsNullOrEmpty(objBottle.SampleContainer) || objBottle.Test.Count > 0)
                        //        ////        {
                        //        ////            os.Delete(objBottle);
                        //        ////        }
                        //        ////        os.CommitChanges();
                        //        ////    }
                        //        ////}
                        //    }
                        //}
                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\SuccessfulMessage", "Deletesuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);

                        if (Frame is NestedFrame)
                        {
                            NestedFrame nestedFrame = (NestedFrame)Frame;
                            if (nestedFrame != null)
                            {
                                CompositeView view = nestedFrame.ViewItem.View;
                                foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                                {
                                    if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
                                    {
                                        //frameContainer.Frame.View.ObjectSpace.Refresh();

                                        if (frameContainer.Frame.View is DetailView)
                                        {
                                            frameContainer.Frame.View.ObjectSpace.ReloadObject(frameContainer.Frame.View.CurrentObject);
                                        }
                                        else
                                        {
                                            (frameContainer.Frame.View as DevExpress.ExpressApp.ListView).CollectionSource.Reload();
                                        }
                                        frameContainer.Frame.View.Refresh();
                                    }
                                }
                            }
                        }

                    }
                    View.Refresh();
                    View.RefreshDataSource();
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnSampleTest_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "SampleBottleAllocation_DetailView_SampleTransfer")
                {
                    SampleBottleAllocation objsmplcheckin = (SampleBottleAllocation)View.CurrentObject;
                    if (objsmplcheckin != null)
                    {
                        SRInfo.strJobID = objsmplcheckin.SampleRegistration.JobID.JobID;
                        CollectionSource cs = new CollectionSource(View.ObjectSpace, typeof(SampleParameter));
                        cs.Criteria["filter"] = CriteriaOperator.Parse("[Samplelogin.JobID.JobID] = ? AND [Samplelogin.JobID.GCRecord] is NULL", SRInfo.strJobID);
                        ListView dvbottleAllocation = Application.CreateListView("SampleParameter_ListView_Copy_SampleRegistration", cs, false);
                        ShowViewParameters showViewParameters = new ShowViewParameters(dvbottleAllocation);
                        showViewParameters.CreatedView = dvbottleAllocation;
                        showViewParameters.Context = TemplateContext.PopupWindow;
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.AcceptAction.Active["OkayBtn"] = false;
                        dc.CancelAction.Active["CancelBtn"] = false;
                        dc.CloseOnCurrentObjectProcessing = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }
                }
                else
                {
                    if (ObjectSpace.IsModified)
                    {
                        ObjectSpace.CommitChanges();
                    }
                    Save();
                    if (!SRInfo.isNoOfSampleDisable)
                    {
                        InsertSamplesInSampleLogin();
                    }
                    Samplecheckin objsmplcheckin = (Samplecheckin)View.CurrentObject;
                    if (objsmplcheckin != null)
                    {
                        SRInfo.strJobID = objsmplcheckin.JobID;
                        string[] strvmarr = objsmplcheckin.SampleMatries.Split(';');
                        SRInfo.lstSRvisualmat = new List<VisualMatrix>();
                        foreach (string strvmoid in strvmarr.ToList())
                        {
                            VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
                            if (lstvmatobj != null)
                            {
                                SRInfo.lstSRvisualmat.Add(lstvmatobj);
                            }
                        }
                        CollectionSource cs = new CollectionSource(View.ObjectSpace, typeof(SampleParameter));
                        cs.Criteria["filter"] = CriteriaOperator.Parse("[Samplelogin.JobID.JobID] = ? AND [Samplelogin.JobID.GCRecord] is NULL", SRInfo.strJobID);
                        ListView dvbottleAllocation = Application.CreateListView("SampleParameter_ListView_Copy_SampleRegistration", cs, false);
                        ShowViewParameters showViewParameters = new ShowViewParameters(dvbottleAllocation);
                        showViewParameters.CreatedView = dvbottleAllocation;
                        showViewParameters.Context = TemplateContext.PopupWindow;
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.AcceptAction.Active["OkayBtn"] = false;
                        dc.CancelAction.Active["CancelBtn"] = false;
                        dc.CloseOnCurrentObjectProcessing = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        //SampleParameter_ListView_Copy_SampleRegistration

        private void Sample_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "SampleBottleAllocation_DetailView_SampleTransfer")
                {
                    SampleBottleAllocation objsamplecheckin = (SampleBottleAllocation)e.CurrentObject;
                    SRInfo.CurrentJob = objsamplecheckin.SampleRegistration.JobID;
                    SRInfo.strJobID = objsamplecheckin.SampleRegistration.JobID.JobID;
                    objSLInfo.focusedJobID = objsamplecheckin.SampleRegistration.JobID.JobID;
                    DashboardView lstsmpllogin = Application.CreateDashboardView(Application.CreateObjectSpace(), "SampleRegistration_SampleLogin", false);
                    ShowViewParameters showViewParameters = new ShowViewParameters(lstsmpllogin);
                    showViewParameters.CreatedView = lstsmpllogin;
                    showViewParameters.Context = TemplateContext.PopupWindow;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.CloseOnCurrentObjectProcessing = false;
                    dc.AcceptAction.Active["OkayBtn"] = false;
                    dc.CancelAction.Active["CancelBtn"] = false;
                    showViewParameters.Controllers.Add(dc);
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                }
                else
                {
                    SRInfo.IsSamplePopupClose = false;
                    if (ObjectSpace.IsModified)
                    {
                        ObjectSpace.CommitChanges();
                    }

                    Save();
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)e.CurrentObject;
                    if (!SRInfo.isNoOfSampleDisable)
                    {
                        InsertSamplesInSampleLogin();
                    }
                    SRInfo.strJobID = null;
                    if (SRInfo.strJobID == null || SRInfo.strJobID != objsamplecheckin.JobID || Application.MainWindow.View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"
                        || Application.MainWindow.View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History")
                    {

                        SRInfo.strJobID = objsamplecheckin.JobID;
                        objSLInfo.focusedJobID = objsamplecheckin.JobID;
                        IObjectSpace os = Application.CreateObjectSpace();
                        CollectionSource cs = new CollectionSource(View.ObjectSpace, typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn));
                        cs.Criteria["Filter"] = CriteriaOperator.Parse("[JobID.JobID] = ? AND [JobID.GCRecord] is NULL", SRInfo.strJobID);
                        //ListView lstsmpllogin = Application.CreateListView("SampleLogIn_ListView_Copy_SampleRegistration", cs,false);
                        DashboardView lstsmpllogin = Application.CreateDashboardView(os, "SampleRegistration_SampleLogin", false);
                        ShowViewParameters showViewParameters = new ShowViewParameters(lstsmpllogin);
                        showViewParameters.CreatedView = lstsmpllogin;
                        showViewParameters.Context = TemplateContext.PopupWindow;
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.CloseOnCurrentObjectProcessing = false;
                        dc.AcceptAction.Active["OkayBtn"] = false;
                        dc.CancelAction.Active["CancelBtn"] = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }

                    ////if (View.ObjectSpace.ModifiedObjects.Count > 0)
                    ////{
                    ////    ObjectSpace.CommitChanges();
                    ////    Save();
                    ////}
                    //Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)e.CurrentObject;
                    //uint NoOfSamples = objsamplecheckin.NoOfSamples;
                    //if (objsamplecheckin.JobID != null)
                    //{
                    //    SRInfo.CurrentJob = objsamplecheckin;
                    //    Session currentsession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                    //    SelectedData sproc = currentsession.ExecuteSproc("GetSampleID", new OperandValue(objsamplecheckin.JobID));
                    //    if (sproc.ResultSet[1].Rows[0].Values[0].ToString() != null && (int)sproc.ResultSet[1].Rows[0].Values[0] == 1)
                    //    {
                    //        IsNewJobID = true;
                    //        int sampleno = (int)sproc.ResultSet[1].Rows[0].Values[0];
                    //        IObjectSpace os = Application.CreateObjectSpace();
                    //        Session currentSession = ((XPObjectSpace)os).Session;
                    //        UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    //        //Modules.BusinessObjects.SampleManagement.SampleLogIn objNewSample = os.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                    //        Modules.BusinessObjects.SampleManagement.SampleLogIn objNewSample = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                    //        objNewSample.SampleNo = sampleno;
                    //        //objNewSample.ClientSampleID = "";
                    //        Modules.BusinessObjects.SampleManagement.Samplecheckin obj = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(objsamplecheckin.Oid);
                    //        if (string.IsNullOrEmpty(obj.SampleMatries) == false)
                    //        {
                    //            string[] strSamplematrix = obj.SampleMatries.Split(';');
                    //            if (strSamplematrix.Count() == 1)
                    //            {
                    //                objNewSample.VisualMatrix = uow.GetObjectByKey<Modules.BusinessObjects.Setting.VisualMatrix>(new Guid(strSamplematrix[0].Trim()));
                    //            }
                    //        }
                    //        objNewSample.BatchID = objsamplecheckin.BatchID;
                    //        objNewSample.JobID = obj;
                    //        objNewSample.PackageNumber = objsamplecheckin.PackageNo;
                    //        if (obj.DateCollected!=null && obj.DateCollected!=DateTime.MinValue)
                    //        {
                    //            objNewSample.CollectDate =(DateTime)obj.DateCollected; 
                    //        }
                    //        if (obj.Collector != null)
                    //        {
                    //            objNewSample.Collector = uow.GetObjectByKey<Collector>(obj.Collector.Oid);
                    //        }
                    //        objNewSample.Save();
                    //        uow.CommitChanges();
                    //        SRInfo.SampleOid = objNewSample.Oid;
                    //        if (!string.IsNullOrEmpty(objsamplecheckin.NPTest) && objNewSample.VisualMatrix != null)
                    //        {
                    //            List<CustomDueDate> lstcustomrequest = uow.Query<CustomDueDate>().Where(i => i.SampleCheckin.Oid == objsamplecheckin.Oid).ToList();
                    //            VisualMatrix objVisualMatrix = uow.GetObjectByKey<VisualMatrix>(objNewSample.VisualMatrix.Oid);
                    //            List<string> lstTestNames = objsamplecheckin.NPTest.Split(';').ToList();

                    //            foreach (string objTest in lstTestNames.ToList())
                    //            {
                    //                List<string> lstTestMethodCompo = objTest.Split('_').ToList();
                    //                if (lstTestMethodCompo.Count == 2)
                    //                {
                    //                    CustomDueDate custom = lstcustomrequest.Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MethodName != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.TestName == lstTestMethodCompo[0] && i.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1]).FirstOrDefault();
                    //                    List<Testparameter> lstTestParam = uow.Query<Testparameter>().Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MethodName != null && i.Component != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.TestName == lstTestMethodCompo[0] && i.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1] && i.Component.Components == "Default" && i.QCType != null && i.QCType.QCTypeName == "Sample").ToList();
                    //                    if (lstTestParam.Count > 0 && custom != null)
                    //                    {
                    //                        if (custom.Parameter == null || custom.Parameter == "AllParam")
                    //                        {
                    //                            foreach (Testparameter objTestParam in lstTestParam.ToList())
                    //                            {
                    //                                SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objNewSample.Oid));
                    //                                if (objsp == null)
                    //                                {
                    //                                    SampleParameter newsample = new SampleParameter(uow);
                    //                                    newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objNewSample.Oid);
                    //                                    newsample.Testparameter = objTestParam;
                    //                                    newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                    //                                    objNewSample.Test = true;
                    //                                    //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                    //{
                    //                                    //    newsample.SubOut = true;
                    //                                    //}
                    //                                    newsample.Save();
                    //                                }
                    //                                else
                    //                                {
                    //                                    //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                    //{
                    //                                    //    objsp.SubOut = true;
                    //                                    //}
                    //                                    //else
                    //                                    //{
                    //                                    //    if (objsp.SuboutSample == null)
                    //                                    //    {
                    //                                    //        objsp.SubOut = false;
                    //                                    //    }
                    //                                    //}
                    //                                    objsp.Save();
                    //                                }
                    //                            }
                    //                        }
                    //                        else
                    //                        {
                    //                            string[] param = custom.ParameterDetails.Split(',');
                    //                            foreach (Testparameter objTestParam in lstTestParam.ToList())
                    //                            {
                    //                                if (param.Contains(objTestParam.Oid.ToString()))
                    //                                {
                    //                                    SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objNewSample.Oid));
                    //                                    if (objsp == null)
                    //                                    {
                    //                                        SampleParameter newsample = new SampleParameter(uow);
                    //                                        newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objNewSample.Oid);
                    //                                        newsample.Testparameter = objTestParam;
                    //                                        newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                    //                                        objNewSample.Test = true;
                    //                                        //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                        //{
                    //                                        //    newsample.SubOut = true;
                    //                                        //}
                    //                                        newsample.Save();
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                        //{
                    //                                        //    objsp.SubOut = true;
                    //                                        //}
                    //                                        //else
                    //                                        //{
                    //                                        //    if (objsp.SuboutSample == null)
                    //                                        //    {
                    //                                        //        objsp.SubOut = false;
                    //                                        //    }
                    //                                        //}
                    //                                        objsp.Save();
                    //                                    }

                    //                                }
                    //                            }
                    //                        }
                    //                    }
                    //                }
                    //                else if (lstTestMethodCompo.Count == 1)
                    //                {
                    //                    TestMethod objTm = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup]=true And [MethodName.GCRecord] Is Null", lstTestMethodCompo[0]));
                    //                    if (objTm != null)
                    //                    {
                    //                        IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", objTm.Oid));
                    //                        foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                    //                        {
                    //                            CustomDueDate custom = lstcustomrequest.Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.Oid == objgtm.TestMethod.Oid).FirstOrDefault();
                    //                            IList<Testparameter> lsttestpara = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objgtm.TestParameter.TestMethod.Oid));
                    //                            if (custom!=null &&custom.Parameter == null || custom !=null && custom.Parameter == "AllParam")
                    //                            {
                    //                                foreach (Testparameter param1 in lsttestpara.ToList())
                    //                                {
                    //                                    SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, objNewSample.Oid));
                    //                                    if (objsp == null)
                    //                                    {
                    //                                        SampleParameter newsample = new SampleParameter(uow);
                    //                                        newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objNewSample.Oid);
                    //                                        newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                    //                                        newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                    //                                        newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                    //                                        newsample.IsGroup = true;
                    //                                        //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                    //                                        //{
                    //                                        //    newsample.SubOut = true;
                    //                                        //}
                    //                                        newsample.Save();
                    //                                        uow.CommitChanges();
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        SampleParameter sample = uow.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid]=? And [Samplelogin.Oid]=? And [Testparameter.Parameter.Oid] = ?", param1.TestMethod.Oid, objNewSample.Oid, param1.Parameter.Oid));
                    //                                        if (sample != null)
                    //                                        {
                    //                                            //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                    //                                            //{
                    //                                            //    sample.SubOut = true;
                    //                                            //}
                    //                                            //else
                    //                                            //{
                    //                                            //    if (sample.SuboutSample == null)
                    //                                            //    {
                    //                                            //        sample.SubOut = false;
                    //                                            //    }
                    //                                            //}
                    //                                            sample.Save();
                    //                                        }
                    //                                    }
                    //                                }
                    //                            }
                    //                            else
                    //                            {
                    //                                if (custom!=null && custom.ParameterDetails!=null)
                    //                                {
                    //                                    string[] param = custom.ParameterDetails.Split(',');
                    //                                    foreach (Testparameter param1 in lsttestpara.ToList())
                    //                                    {
                    //                                        if (param.Contains(param1.Oid.ToString()))
                    //                                        {
                    //                                            SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, objNewSample.Oid));
                    //                                            if (objsp == null)
                    //                                            {
                    //                                                SampleParameter newsample = new SampleParameter(uow);
                    //                                                newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objNewSample.Oid);
                    //                                                newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                    //                                                newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                    //                                                newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                    //                                                newsample.IsGroup = true;
                    //                                                //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                    //                                                //{
                    //                                                //    newsample.SubOut = true;
                    //                                                //}
                    //                                                newsample.Save();
                    //                                                uow.CommitChanges();
                    //                                            }
                    //                                            else
                    //                                            {
                    //                                                SampleParameter sample = uow.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid]=? And [Samplelogin.Oid]=? And [Testparameter.Parameter.Oid] = ?", param1.TestMethod.Oid, objNewSample.Oid, param1.Parameter.Oid));
                    //                                                if (sample != null)
                    //                                                {
                    //                                                    //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                    //                                                    //{
                    //                                                    //    sample.SubOut = true;
                    //                                                    //}
                    //                                                    //else
                    //                                                    //{
                    //                                                    //    if (sample.SuboutSample == null)
                    //                                                    //    {
                    //                                                    //        sample.SubOut = false;
                    //                                                    //    }
                    //                                                    //}
                    //                                                    sample.Save();
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    } 
                    //                                }
                    //                            }
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //            uow.CommitChanges();
                    //            if (NoOfSamples>1)
                    //            {
                    //                bool DBAccess = false;
                    //                int SampleNo = 0;
                    //                for (int i = 1; i <= NoOfSamples-1; i++)
                    //                {
                    //                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSLNew = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                    //                    objSLNew.JobID = uow.GetObjectByKey<Samplecheckin>(obj.Oid);
                    //                    if (objNewSample.VisualMatrix != null)
                    //                    {
                    //                        objSLNew.VisualMatrix = uow.GetObjectByKey<VisualMatrix>(objNewSample.VisualMatrix.Oid);
                    //                    }
                    //                    objSLNew.BatchID = objsamplecheckin.BatchID;
                    //                    objSLNew.JobID = obj;
                    //                    objSLNew.PackageNumber = objsamplecheckin.PackageNo;
                    //                    if (obj.DateCollected != null && obj.DateCollected != DateTime.MinValue)
                    //                    {
                    //                        objSLNew.CollectDate = (DateTime)obj.DateCollected;
                    //                    }
                    //                    if (objsamplecheckin.Collector!=null)
                    //                    {
                    //                        objSLNew.Collector = uow.GetObjectByKey<Collector>(objsamplecheckin.Collector.Oid);
                    //                    }
                    //                    if (DBAccess == false)
                    //                    {
                    //                        SelectedData sprocs = currentSession.ExecuteSproc("GetSampleID", new OperandValue(objSLNew.JobID.ToString()));
                    //                        if (sprocs.ResultSet[1].Rows[0].Values[0] != null)
                    //                        {
                    //                            objSLInfo.SampleID = sprocs.ResultSet[1].Rows[0].Values[0].ToString();
                    //                            SampleNo = Convert.ToInt32(objSLInfo.SampleID);
                    //                            DBAccess = true;
                    //                        }
                    //                        else
                    //                        {
                    //                            return;
                    //                        }
                    //                    }
                    //                    objSLNew.SampleNo = SampleNo;
                    //                    List<Testparameter> lsttp = uow.Query<Testparameter>().Where(j => j.QCType.QCTypeName == "Sample" && j.SampleLogIns.Where(a => a.Oid == objNewSample.Oid).Count() > 0).ToList();
                    //                    foreach (var objLineA in lsttp)
                    //                    {
                    //                        objSLNew.Testparameters.Add(uow.GetObjectByKey<Testparameter>(objLineA.Oid));
                    //                    }
                    //                    foreach (var objSampleparameter in objNewSample.SampleParameter.Where(a => a.IsGroup == true && a.GroupTest != null).ToList())
                    //                    {
                    //                        SampleParameter sample = objSLNew.SampleParameter.FirstOrDefault<SampleParameter>(objs => objs.Testparameter.Oid == objSampleparameter.Testparameter.Oid);
                    //                        if (objSampleparameter.GroupTest != null && sample != null)
                    //                        {
                    //                            sample.IsGroup = true;
                    //                            sample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objSampleparameter.GroupTest.Oid);
                    //                        }
                    //                    }
                    //                    objSLNew.Save();
                    //                    SampleNo++;
                    //                    uow.CommitChanges();
                    //                    AssignBottleAllocationToSamples(uow, objSLNew.Oid);
                    //                } 
                    //            }
                    //            uow.CommitChanges();
                    //            AssignBottleAllocationToSamples(uow, SRInfo.SampleOid);
                    //            //BottleIDUpdate(uow);
                    //        }
                    //        //uow.Dispose();
                    //        //Frame.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();
                    //    }
                    //    else
                    //    {
                    //        IObjectSpace os = Application.CreateObjectSpace();
                    //        IList<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSamples = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID]=?", objsamplecheckin.Oid));
                    //        if (lstSamples.Count == 1)
                    //        {
                    //            Session currentSession = ((XPObjectSpace)os).Session;
                    //            UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    //            foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSample in lstSamples.ToList())
                    //            {
                    //                //if (objSample.Testparameters.Count == 0)
                    //                {
                    //                    Modules.BusinessObjects.SampleManagement.Samplecheckin obj = os.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(objsamplecheckin.Oid);
                    //                    if (string.IsNullOrEmpty(obj.SampleMatries) == false)
                    //                    {
                    //                        string[] strSamplematrix = obj.SampleMatries.Split(';');
                    //                        if (strSamplematrix.Count() == 1)
                    //                        {
                    //                            objSample.VisualMatrix = os.GetObjectByKey<VisualMatrix>(new Guid(strSamplematrix[0]));
                    //                            SRInfo.SampleOid = objSample.Oid;
                    //                            if (!string.IsNullOrEmpty(objsamplecheckin.NPTest) && objSample.VisualMatrix != null)
                    //                            {
                    //                                List<CustomDueDate> lstcustomrequest = uow.Query<CustomDueDate>().Where(i => i.SampleCheckin.Oid == objsamplecheckin.Oid).ToList();
                    //                                VisualMatrix objVisualMatrix = uow.GetObjectByKey<VisualMatrix>(objSample.VisualMatrix.Oid);
                    //                                List<string> lstTestNames = objsamplecheckin.NPTest.Split(';').ToList();
                    //                                foreach (string objTest in lstTestNames.ToList())
                    //                                {
                    //                                    List<string> lstTestMethodCompo = objTest.Split('_').ToList();
                    //                                    if (lstTestMethodCompo.Count == 2)
                    //                                    {
                    //                                        CustomDueDate custom = lstcustomrequest.Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MethodName != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.TestName == lstTestMethodCompo[0] && i.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1]).FirstOrDefault();
                    //                                        List<Testparameter> lstTestParam = uow.Query<Testparameter>().Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MethodName != null && i.Component != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.TestName == lstTestMethodCompo[0] && i.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1] && i.Component.Components == "Default" && i.QCType != null && i.QCType.QCTypeName == "Sample").ToList();
                    //                                        if (lstTestParam.Count > 0 && custom != null)
                    //                                        {
                    //                                            if (custom.Parameter == null || custom.Parameter == "AllParam")
                    //                                            {
                    //                                                foreach (Testparameter objTestParam in lstTestParam.ToList())
                    //                                                {
                    //                                                    SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objSample.Oid));
                    //                                                    if (objsp == null)
                    //                                                    {
                    //                                                        SampleParameter newsample = new SampleParameter(uow);
                    //                                                        newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSample.Oid);
                    //                                                        newsample.Testparameter = objTestParam;
                    //                                                        newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                    //                                                        objSample.Test = true;
                    //                                                        //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                                        //{
                    //                                                        //    newsample.SubOut = true;
                    //                                                        //}
                    //                                                        newsample.Save();
                    //                                                    }
                    //                                                    else
                    //                                                    {
                    //                                                        //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                                        //{
                    //                                                        //    objsp.SubOut = true;
                    //                                                        //}
                    //                                                        //else
                    //                                                        //{
                    //                                                        //    if (objsp.SuboutSample == null)
                    //                                                        //    {
                    //                                                        //        objsp.SubOut = false;
                    //                                                        //    }
                    //                                                        //}
                    //                                                        objsp.Save();
                    //                                                    }

                    //                                                }
                    //                                            }
                    //                                            else
                    //                                            {
                    //                                                string[] param = custom.ParameterDetails.Split(',');
                    //                                                foreach (Testparameter objTestParam in lstTestParam.ToList())
                    //                                                {
                    //                                                    if (param.Contains(objTestParam.Oid.ToString()))
                    //                                                    {
                    //                                                        SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objSample.Oid));
                    //                                                        if (objsp == null)
                    //                                                        {
                    //                                                            SampleParameter newsample = new SampleParameter(uow);
                    //                                                            newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSample.Oid);
                    //                                                            newsample.Testparameter = objTestParam;
                    //                                                            newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                    //                                                            objSample.Test = true;
                    //                                                            //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                                            //{
                    //                                                            //    newsample.SubOut = true;
                    //                                                            //}
                    //                                                            newsample.Save();
                    //                                                        }
                    //                                                        else
                    //                                                        {
                    //                                                            //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                    //                                                            //{
                    //                                                            //    objsp.SubOut = true;
                    //                                                            //}
                    //                                                            //else
                    //                                                            //{
                    //                                                            //    if (objsp.SuboutSample == null)
                    //                                                            //    {
                    //                                                            //        objsp.SubOut = false;
                    //                                                            //    }
                    //                                                            //}
                    //                                                            objsp.Save();
                    //                                                        }
                    //                                                    }
                    //                                                }
                    //                                            }
                    //                                        }
                    //                                    }
                    //                                }
                    //                                uow.CommitChanges();
                    //                                AssignBottleAllocationToSamples(uow, SRInfo.SampleOid);
                    //                                //BottleIDUpdate(uow);
                    //                            }

                    //                        }
                    //                    }
                    //                }
                    //            }
                    //            if (NoOfSamples > 1)
                    //            {
                    //                Modules.BusinessObjects.SampleManagement.SampleLogIn objNewSample = lstSamples.FirstOrDefault();
                    //                Modules.BusinessObjects.SampleManagement.Samplecheckin obj = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(objsamplecheckin.Oid);
                    //                bool DBAccess = false;
                    //                int SampleNo = 0;
                    //                for (int i = 1; i <= NoOfSamples - 1; i++)
                    //                {
                    //                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSLNew = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                    //                    objSLNew.JobID = uow.GetObjectByKey<Samplecheckin>(obj.Oid);
                    //                    if (objNewSample.VisualMatrix != null)
                    //                    {
                    //                        objSLNew.VisualMatrix = uow.GetObjectByKey<VisualMatrix>(objNewSample.VisualMatrix.Oid);
                    //                    }
                    //                    objSLNew.BatchID = objsamplecheckin.BatchID;
                    //                    objSLNew.JobID = obj;
                    //                    objSLNew.PackageNumber = objsamplecheckin.PackageNo;
                    //                    if (obj.DateCollected != null && obj.DateCollected != DateTime.MinValue)
                    //                    {
                    //                        objSLNew.CollectDate = (DateTime)obj.DateCollected;
                    //                    }
                    //                    if (objsamplecheckin.Collector != null)
                    //                    {
                    //                        objSLNew.Collector = uow.GetObjectByKey<Collector>(objsamplecheckin.Collector.Oid);
                    //                    }
                    //                    if (DBAccess == false)
                    //                    {
                    //                        SelectedData sprocs = currentSession.ExecuteSproc("GetSampleID", new OperandValue(objSLNew.JobID.ToString()));
                    //                        if (sprocs.ResultSet[1].Rows[0].Values[0] != null)
                    //                        {
                    //                            objSLInfo.SampleID = sprocs.ResultSet[1].Rows[0].Values[0].ToString();
                    //                            SampleNo = Convert.ToInt32(objSLInfo.SampleID);
                    //                            DBAccess = true;
                    //                        }
                    //                        else
                    //                        {
                    //                            return;
                    //                        }
                    //                    }
                    //                    objSLNew.SampleNo = SampleNo;
                    //                    List<Testparameter> lsttp = uow.Query<Testparameter>().Where(j => j.QCType.QCTypeName == "Sample" && j.SampleLogIns.Where(a => a.Oid == objNewSample.Oid).Count() > 0).ToList();
                    //                    foreach (var objLineA in lsttp)
                    //                    {
                    //                        objSLNew.Testparameters.Add(uow.GetObjectByKey<Testparameter>(objLineA.Oid));
                    //                    }
                    //                    foreach (var objSampleparameter in objNewSample.SampleParameter.Where(a => a.IsGroup == true && a.GroupTest != null).ToList())
                    //                    {
                    //                        SampleParameter sample = objSLNew.SampleParameter.FirstOrDefault<SampleParameter>(objs => objs.Testparameter.Oid == objSampleparameter.Testparameter.Oid);
                    //                        if (objSampleparameter.GroupTest != null && sample != null)
                    //                        {
                    //                            sample.IsGroup = true;
                    //                            sample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objSampleparameter.GroupTest.Oid);
                    //                        }
                    //                    }
                    //                    objSLNew.Save();
                    //                    SampleNo++;
                    //                    uow.CommitChanges();
                    //                    AssignBottleAllocationToSamples(uow, objSLNew.Oid);
                    //                }
                    //            }
                    //        }
                    //    }
                    //    if(IsNewJobID)
                    //    {
                    //        //UnitOfWork uow = new UnitOfWork(currentsession.DataLayer);
                    //        //Modules.BusinessObjects.SampleManagement.SampleLogIn objNewSample = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                    //        //Modules.BusinessObjects.SampleManagement.Samplecheckin obj = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(objsamplecheckin.Oid);
                    //        //if (string.IsNullOrEmpty(obj.SampleMatries) == false)
                    //        //{
                    //        //    string[] strSamplematrix = obj.SampleMatries.Split(';');
                    //        //    if (strSamplematrix.Count() == 1)
                    //        //    {
                    //        //        objNewSample.VisualMatrix = uow.GetObjectByKey<Modules.BusinessObjects.Setting.VisualMatrix>(new Guid(strSamplematrix[0].Trim()));
                    //        //    }
                    //        //}
                    //        //objNewSample.BatchID = objsamplecheckin.BatchID;
                    //        //objNewSample.JobID = obj;
                    //        //objNewSample.PackageNumber = objsamplecheckin.PackageNo;
                    //        //if (obj.DateCollected != null && obj.DateCollected != DateTime.MinValue)
                    //        //{
                    //        //    objNewSample.CollectDate = (DateTime)obj.DateCollected;
                    //        //}
                    //        //if (obj.Collector != null)
                    //        //{
                    //        //    objNewSample.Collector = uow.GetObjectByKey<Collector>(obj.Collector.Oid);
                    //        //}
                    //        //objNewSample.Save();
                    //    }
                    //    SRInfo.strJobID = null;
                    //    if (SRInfo.strJobID == null || SRInfo.strJobID != objsamplecheckin.JobID || Application.MainWindow.View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"
                    //        || Application.MainWindow.View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History")
                    //    {

                    //        SRInfo.strJobID = objsamplecheckin.JobID;
                    //        objSLInfo.focusedJobID = objsamplecheckin.JobID;
                    //        //IObjectSpace os = Application.CreateObjectSpace();
                    //        //Session currentSession = ((XPObjectSpace)os).Session;
                    //        //UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    //        //AssignBottlesToSamples(uow, SRInfo.strJobID, SRInfo.SampleOid);
                    //        //Frame.SetView(Application.CreateDashboardView(Application.CreateObjectSpace(), "SampleRegistration", false));
                    //        IObjectSpace os = Application.CreateObjectSpace();
                    //        CollectionSource cs = new CollectionSource(View.ObjectSpace, typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn));
                    //        cs.Criteria["Filter"] = CriteriaOperator.Parse("[JobID.JobID] = ? AND [JobID.GCRecord] is NULL", SRInfo.strJobID);
                    //        //ListView lstsmpllogin = Application.CreateListView("SampleLogIn_ListView_Copy_SampleRegistration", cs,false);
                    //        DashboardView lstsmpllogin = Application.CreateDashboardView(os, "SampleRegistration_SampleLogin", false);
                    //        ShowViewParameters showViewParameters = new ShowViewParameters(lstsmpllogin);
                    //        showViewParameters.CreatedView = lstsmpllogin;
                    //        showViewParameters.Context = TemplateContext.PopupWindow;
                    //        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    //        DialogController dc = Application.CreateController<DialogController>();
                    //        dc.SaveOnAccept = false;
                    //        dc.CloseOnCurrentObjectProcessing = false;
                    //        dc.AcceptAction.Active["OkayBtn"] = false;
                    //        dc.CancelAction.Active["CancelBtn"] = false;
                    //        showViewParameters.Controllers.Add(dc);
                    //        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    //    }
                    //    //View.Refresh();
                    //    ////string[] strvmarr = objsamplecheckin.SampleMatries.Split(';');
                    //    ////if (strvmarr != null && strvmarr.Length > 0)
                    //    ////{
                    //    ////    DashboardView dv = (DashboardView)Application.MainWindow.View;
                    //    ////    DashboardViewItem SampleloginListView = (DashboardViewItem)dv.FindItem("SampleLogin");
                    //    ////    if (SampleloginListView != null && SampleloginListView.InnerView != null)
                    //    ////    {
                    //    ////        tempviewinfo.strtempviewid = SampleloginListView.InnerView.Id.ToString();
                    //    ////        SRInfo.lstSRvisualmat = new List<VisualMatrix>();
                    //    ////        foreach (string strvmoid in strvmarr.ToList())
                    //    ////        {
                    //    ////            VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
                    //    ////            if (lstvmatobj != null)
                    //    ////            {
                    //    ////                SRInfo.lstSRvisualmat.Add(lstvmatobj);
                    //    ////            }
                    //    ////        }
                    //    ////    }
                    //    ////}
                    //}
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnBottleAllocation_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (Application.MainWindow.View.Id == "SampleBottleAllocation_DetailView_SampleTransfer")
                {
                    SampleBottleAllocation objsmplcheckin = (SampleBottleAllocation)View.CurrentObject;
                    if (objsmplcheckin != null)
                    {
                        SRInfo.strJobID = objsmplcheckin.SampleRegistration.JobID.JobID;
                        SampleBottleAllocation newsmplbtlalloc = View.ObjectSpace.FindObject<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.JobID.JobID] = ?", SRInfo.strJobID));
                        DetailView dvbottleAllocation = Application.CreateDetailView(View.ObjectSpace, "SampleBottleAllocation_DetailView_SampleRegistration", false, newsmplbtlalloc);
                        dvbottleAllocation.ViewEditMode = ViewEditMode.View;
                        ShowViewParameters showViewParameters = new ShowViewParameters(dvbottleAllocation);
                        showViewParameters.CreatedView = dvbottleAllocation;
                        showViewParameters.Context = TemplateContext.PopupWindow;
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.AcceptAction.Active["OkayBtn"] = false;
                        dc.CancelAction.Active["CancelBtn"] = false;
                        dc.CloseOnCurrentObjectProcessing = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }
                }
                else
                {
                    ObjectSpace.CommitChanges();
                    Save();
                    if (!SRInfo.isNoOfSampleDisable)
                    {
                        InsertSamplesInSampleLogin();
                    }
                    Samplecheckin objsmplcheckin = (Samplecheckin)View.CurrentObject;
                    if (objsmplcheckin != null)
                    {
                        SRInfo.strJobID = objsmplcheckin.JobID;
                        string[] strvmarr = objsmplcheckin.SampleMatries.Split(';');
                        SRInfo.lstSRvisualmat = new List<VisualMatrix>();
                        foreach (string strvmoid in strvmarr.ToList())
                        {
                            VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
                            if (lstvmatobj != null)
                            {
                                SRInfo.lstSRvisualmat.Add(lstvmatobj);
                            }
                        }
                        //IObjectSpace os = Application.CreateObjectSpace();
                        //SampleBottleAllocation newsmplbtlalloc = View.ObjectSpace.CreateObject<SampleBottleAllocation>();
                        SampleBottleAllocation newsmplbtlalloc = View.ObjectSpace.FindObject<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.JobID.JobID] = ?", SRInfo.strJobID));
                        newsmplbtlalloc.Qty = 1;
                        DetailView dvbottleAllocation = Application.CreateDetailView(View.ObjectSpace, "SampleBottleAllocation_DetailView_SampleRegistration", false, newsmplbtlalloc);
                        dvbottleAllocation.ViewEditMode = ViewEditMode.Edit;
                        //DashboardView lstsmplBtlAlloc = Application.CreateDashboardView(os, "SampleRegistration_SampleBottleAllocation", false);
                        ShowViewParameters showViewParameters = new ShowViewParameters(dvbottleAllocation);
                        showViewParameters.CreatedView = dvbottleAllocation;
                        showViewParameters.Context = TemplateContext.PopupWindow;
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.AcceptAction.Active["OkayBtn"] = false;
                        dc.CancelAction.Active["CancelBtn"] = false;
                        dc.CloseOnCurrentObjectProcessing = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void btnAddContact_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "Contact_LookupListView_Samplereceipt_EmailList")
                {
                    IObjectSpace os = Application.CreateObjectSpace();
                    Contact crtcontact = os.CreateObject<Contact>();
                    DetailView dvcontact = Application.CreateDetailView(os, "Contact_DetailView_popup", false, crtcontact);
                    ShowViewParameters showViewParameters = new ShowViewParameters(dvcontact);
                    showViewParameters.CreatedView = dvcontact;
                    showViewParameters.Context = TemplateContext.PopupWindow;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.CloseOnCurrentObjectProcessing = false;
                    dc.Accepting += Dc_Acceptingcontactdvpopup;
                    showViewParameters.Controllers.Add(dc);
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Dc_Acceptingcontactdvpopup(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                IObjectSpace os = Application.CreateObjectSpace();
                if (sender != null)
                {
                    DialogController dc = (DialogController)sender;
                    if (dc != null)
                    {
                        if (dc.Window.View != null && dc.Window.View.CurrentObject != null)
                        {
                            Contact objcont = (Contact)dc.Window.View.CurrentObject;
                            if (objcont != null)
                            {
                                if (!string.IsNullOrEmpty(objcont.FirstName) && !string.IsNullOrEmpty(objcont.Email) && objcont.Customer != null)
                                {
                                    if (objcont != null && !string.IsNullOrEmpty(objcont.Email))
                                    {
                                        dc.Window.View.ObjectSpace.CommitChanges();
                                        if (View.Id == "Contact_LookupListView_Samplereceipt_EmailList")
                                        {
                                            Samplecheckin objsmplchkin = os.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", new Guid(HttpContext.Current.Session["rowid"].ToString())));
                                            if (objsmplchkin != null)
                                            {
                                                CollectionSource cs = new CollectionSource(os, typeof(Contact));
                                                cs.Criteria["filter"] = CriteriaOperator.Parse("[Customer.Oid] = ?", objsmplchkin.ClientName.Oid);
                                                ((ListView)View).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Customer.Oid] = ?", objsmplchkin.ClientName.Oid);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    e.Cancel = true;
                                    string strmsg = string.Empty;
                                    if (string.IsNullOrEmpty(objcont.FirstName))
                                    {
                                        strmsg = "Enter the firstname";
                                    }
                                    if (string.IsNullOrEmpty(objcont.Email))
                                    {
                                        if (!string.IsNullOrEmpty(strmsg))
                                        {
                                            strmsg = strmsg + " and email";
                                        }
                                        else
                                        {
                                            strmsg = "Enter the email";
                                        }
                                    }
                                    if (objcont.Customer == null)
                                    {
                                        if (!string.IsNullOrEmpty(strmsg))
                                        {
                                            strmsg = strmsg + " and client";
                                        }
                                        else
                                        {
                                            strmsg = "Enter the client";
                                        }
                                    }
                                    strmsg = strmsg + ".";
                                    Application.ShowViewStrategy.ShowMessage(strmsg, InformationType.Warning, 3000, InformationPosition.Top);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SRSubmit_Execute(object sender, SimpleActionExecuteEventArgs e)
        {

            try
            {
                DefaultSetting objNavigationView = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));
                DefaultSetting objSamplePreparation = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("[NavigationItemNameID]='SamplePreparationRootNode'"));
                DefaultSetting objSampleEntry = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("[NavigationItemNameID]='DataEntry'"));
                if (View is DashboardView || View is DetailView)
                {
                    bool isSubmit = true;
                    if (View is DashboardView)
                    {
                        if (boolsaveaction == true)
                        {
                            DashboardViewItem DVsamlog = ((DashboardView)View).FindItem("SampleCheckin") as DashboardViewItem;
                            Samplecheckin objSamplecheckin;
                            if (DVsamlog != null && DVsamlog.InnerView != null)
                            {
                                //DashboardViewItem SCDetailView = ((DashboardView)View).FindItem("SampleCheckin") as DashboardViewItem;
                                objSamplecheckin = DVsamlog.InnerView.CurrentObject as Samplecheckin;
                            }
                            else
                            {
                                DVsamlog.CreateControl();
                                objSamplecheckin = DVsamlog.InnerView.CurrentObject as Samplecheckin;
                            }
                            if (objSamplecheckin.NoOfSamples > 0)
                            {
                                IObjectSpace os = Application.CreateObjectSpace();
                                Modules.BusinessObjects.SampleManagement.SampleLogIn sample = (Modules.BusinessObjects.SampleManagement.SampleLogIn)View.CurrentObject;
                                int objtestcount = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objSamplecheckin.Oid)).ToList().Where(i => i.Testparameters == null || i.Testparameters.Count == 0).Count();
                                if (objtestcount == 0)
                                {
                                    List<SampleParameter> lstParameters = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] =?", objSamplecheckin.Oid)).ToList();
                                    if (lstParameters.FirstOrDefault(i => i.Samplelogin != null && i.Samplelogin.JobID != null && i.Samplelogin.JobID.IsSampling == true && i.Samplelogin.StationLocation == null) == null)
                                    {
                                        if (objNavigationView != null && objNavigationView.Select)
                                        {
                                            objSamplecheckin.Status = SampleRegistrationSignoffStatus.PendingSigningOff;
                                        }
                                        else
                                        {
                                            lstParameters.ToList().ForEach(i => { i.SignOff = true; });
                                            objSamplecheckin.Status = SampleRegistrationSignoffStatus.Submitted;
                                            lstParameters.ToList().ForEach(i => { i.OSSync = true; });
                                            InsertPTStudyLogDetails(objSamplecheckin.Oid);
                                        }
                                        if (objSamplecheckin.IsSampling)
                                        {
                                            StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 29"));
                                            if (objStatus != null)
                                            {
                                                objSamplecheckin.Index = objStatus;
                                            }
                                        }
                                        else
                                        {
                                            StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 10"));
                                            if (objStatus != null)
                                            {
                                                objSamplecheckin.Index = objStatus;
                                            }
                                        }

                                        foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn samples in DVsamlog.InnerView.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objSamplecheckin.Oid)).ToList())
                                        {
                                            if (samples.JobID.IsSampling)
                                            {
                                                //IList<SampleParameter> parameters = DVsamlog.InnerView.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", samples.Oid)).ToList();
                                                //if (parameters.Where(a => a.Testparameter != null && a.Testparameter.TestMethod != null && a.Testparameter.TestMethod.IsFieldTest == true).Count() > 0)
                                                //{
                                                Frame.GetController<FlutterAppViewController>().insertsample(DVsamlog.InnerView.ObjectSpace, samples);
                                                //}
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        if (objSamplecheckin.ContactName!=null && objSamplecheckin.ContactName.Email!=null&&objSamplecheckin.ContactName.SampleReceiptNotification)
                                        {
                                            objSamplecheckin.Email= objSamplecheckin.ContactName.Email;
                                            Sendmail(objSamplecheckin); 
                                        }
                                        DVsamlog.InnerView.ObjectSpace.CommitChanges();
                                        boolsaveaction = false;
                                        //Frame.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();
                                        Application.ShowViewStrategy.ShowMessage("Submitted successfully.", InformationType.Success, timer.Seconds, InformationPosition.Top);
                                        SRSubmit.Active["ShowActive"] = false;
                                    }
                                    else
                                    {
                                        os.Dispose();
                                        isSubmit = false;
                                        Application.ShowViewStrategy.ShowMessage("Please assign samples to station location", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        return;
                                    }

                                }
                                else
                                {
                                    isSubmit = false;
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assigntesttosample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    return;
                                }
                            }
                            else
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assignsample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                            }
                        }
                        else
                        {
                            Application.ShowViewStrategy.ShowMessage("Please save the details before you submit.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                        }
                    }
                    else if (View is DetailView)
                    {
                        Samplecheckin objSamplecheckin = View.CurrentObject as Samplecheckin;
                        IObjectSpace os = Application.CreateObjectSpace();
                        if (objSamplecheckin.NoOfSamples > 0)
                        {
                            int sampleno = os.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", objSamplecheckin.Oid));

                            if (sampleno > 0)
                            {
                                int objtestcount = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objSamplecheckin.Oid)).ToList().Where(i => i.Testparameters == null || i.Testparameters.Count == 0).Count();
                                if (objtestcount == 0)
                                {
                                    List<SampleParameter> lstParameters = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] =?", objSamplecheckin.Oid)).ToList();
                                    if (lstParameters.FirstOrDefault(i => i.Samplelogin != null && i.Samplelogin.JobID != null && i.Samplelogin.JobID.IsSampling == true && i.Samplelogin.StationLocation == null) == null)
                                    {
                                        os.Dispose();
                                        if (objNavigationView != null && objNavigationView.Select)
                                        {
                                            objSamplecheckin.Status = SampleRegistrationSignoffStatus.PendingSigningOff;
                                            objSamplecheckin.Isinvoicesummary = true;
                                        }
                                        else
                                        {
                                            lstParameters.ToList().ForEach(i => { i.SignOff = true; });
                                            lstParameters.ToList().ForEach(i => { i.OSSync = true; });
                                            objSamplecheckin.Status = SampleRegistrationSignoffStatus.Submitted;
                                            objSamplecheckin.Isinvoicesummary = true;
                                            InsertPTStudyLogDetails(objSamplecheckin.Oid);
                                        }
                                        if (objSamplecheckin.IsSampling)
                                        {
                                            StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 29"));
                                            if (objStatus != null)
                                            {
                                                objSamplecheckin.Index = objStatus;
                                            }
                                        }
                                        else
                                        {
                                            StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 10"));
                                            if (objStatus != null)
                                            {
                                                objSamplecheckin.Index = objStatus;
                                            }
                                        }
                                        //if (objSamplePreparation != null && objSamplePreparation.Select)
                                        //{
                                        //    lstParameters.ToList().ForEach(i => { i.SignOff = true; });

                                        //    StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 10"));
                                        //    if (objStatus != null)
                                        //    {
                                        //        objSamplecheckin.Index = objStatus;
                                        //        objSamplecheckin.Status = SampleRegistrationSignoffStatus.Signedoff;
                                        //    }

                                        //}
                                        //else if(objSampleEntry!= null && objSampleEntry.Select)
                                        //{
                                        //    lstParameters.ToList().ForEach(i => { i.SignOff = true; });
                                        //    StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 10"));
                                        //    if (objStatus != null)
                                        //    {
                                        //        objSamplecheckin.Index = objStatus;
                                        //        objSamplecheckin.Status = SampleRegistrationSignoffStatus.Signedoff;
                                        //    }

                                        //}

                                        foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn samples in View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objSamplecheckin.Oid)).ToList())
                                        {
                                            if (samples.JobID.IsSampling)
                                            {
                                                //IList<SampleParameter> parameters = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", samples.Oid)).ToList();
                                                //if (parameters.Where(a => a.Testparameter != null && a.Testparameter.TestMethod != null && a.Testparameter.TestMethod.IsFieldTest == true).Count() > 0)
                                                //{
                                                Frame.GetController<FlutterAppViewController>().insertsample(View.ObjectSpace, samples);
                                                //}
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                        if (objSamplecheckin.ContactName != null && objSamplecheckin.ContactName.Email != null && objSamplecheckin.ContactName.SampleReceiptNotification)
                                        {
                                            objSamplecheckin.Email = objSamplecheckin.ContactName.Email;
                                            Sendmail(objSamplecheckin);
                                        }
                                        View.ObjectSpace.CommitChanges();
                                        if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                                        {
                                            ViewItem JobID = ((DetailView)View).FindItem("JobID");
                                            if (JobID != null)
                                            {
                                                ASPxStringPropertyEditor editor = (ASPxStringPropertyEditor)JobID;
                                                if (editor != null)
                                                {
                                                    editor.AllowEdit.SetItemValue("enb", false);
                                                    if (editor.Editor != null)
                                                    {
                                                        editor.Editor.BackColor = Color.White;
                                                    }
                                                }
                                            }
                                        }
                                        //Frame.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();
                                        Application.ShowViewStrategy.ShowMessage("Submitted successfully.", InformationType.Success, timer.Seconds, InformationPosition.Top);
                                        btnCOCImport.Active["COCImport"] = false;
                                    }
                                    else
                                    {
                                        os.Dispose();
                                        isSubmit = false;
                                        Application.ShowViewStrategy.ShowMessage("Please assign samples to station location.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        return;
                                    }
                                }
                                else
                                {
                                    os.Dispose();
                                    isSubmit = false;
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assigntesttosample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    return;
                                }
                            }
                            else
                            {
                                os.Dispose();
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assignsample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                return;
                            }
                        }
                        else
                        {
                            os.Dispose();
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assignsample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                        }

                    }

                }
                else if (View is ListView)
                {
                    bool isSubmit = true;
                    IObjectSpace os = Application.CreateObjectSpace();
                    foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin objSamplecheckin in View.SelectedObjects)
                    {
                        int sampleno = os.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", objSamplecheckin.Oid));
                        if (sampleno > 0)
                        {
                            int objtestcount = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objSamplecheckin.Oid)).ToList().Where(i => i.Testparameters == null || i.Testparameters.Count == 0).Count();
                            if (objtestcount == 0)
                            {
                                List<SampleParameter> lstParameters = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] =?", objSamplecheckin.Oid)).ToList();
                                if (lstParameters.FirstOrDefault(i => i.Samplelogin != null && i.Samplelogin.JobID != null && i.Samplelogin.JobID.IsSampling == true && i.Samplelogin.StationLocation == null) == null)
                                {
                                    //List<SampleParameter> sampleParameter = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[SampleLogin.JobId.Oid]", objSamplecheckin.Oid)).ToList();
                                    List<SampleParameter> sampleParameter = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] =?", objSamplecheckin.Oid)).ToList();

                                    if (objNavigationView != null && objNavigationView.Select)
                                    {
                                        objSamplecheckin.Status = SampleRegistrationSignoffStatus.PendingSigningOff;
                                    }
                                    else
                                    {
                                        lstParameters.ToList().ForEach(i => { i.SignOff = true; });
                                        lstParameters.ToList().ForEach(i => { i.OSSync = true; });
                                        objSamplecheckin.Status = SampleRegistrationSignoffStatus.Submitted;
                                    }
                                    //if (objSamplePreparation != null && objSamplePreparation.Select)
                                    //{
                                    //    objSamplecheckin.Status = SampleRegistrationSignoffStatus.Signedoff;
                                    //} 
                                }
                                else
                                {
                                    isSubmit = false;
                                    Application.ShowViewStrategy.ShowMessage("Please assign samples to station location.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    return;
                                }
                            }
                            else
                            {
                                isSubmit = false;
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assigntesttosample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                return;
                            }
                        }
                        else
                        {
                            os.Dispose();
                            isSubmit = false;
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assignsample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                            return;
                        }
                    }
                    os.Dispose();
                    if (isSubmit)
                    {
                        foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin objSamplecheckin in View.SelectedObjects)
                        {
                            InsertPTStudyLogDetails(objSamplecheckin.Oid);
                        }
                        foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin objSamplecheckin in View.SelectedObjects)
                        {
                            if (objSamplecheckin.IsSampling)
                            {
                                StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 29"));
                                if (objStatus != null)
                                {
                                    objSamplecheckin.Index = objStatus;
                                }
                            }
                            else
                            {
                                StatusDefinition objStatus = View.ObjectSpace.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 10"));
                                if (objStatus != null)
                                {
                                    objSamplecheckin.Index = objStatus;
                                }
                            }
                        }

                        foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin objSamplecheckin in View.SelectedObjects)
                        {
                            if (objSamplecheckin.IsSampling)
                            {
                                foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn samples in View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objSamplecheckin.Oid)).ToList())
                                {
                                    //IList<SampleParameter> parameters = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", samples.Oid)).ToList();
                                    //if (parameters.Where(a => a.Testparameter != null && a.Testparameter.TestMethod != null && a.Testparameter.TestMethod.IsFieldTest == true).Count() > 0)
                                    //{
                                    Frame.GetController<FlutterAppViewController>().insertsample(View.ObjectSpace, samples);
                                    //}
                                }
                            }
                            if (objSamplecheckin.ContactName != null && objSamplecheckin.ContactName.Email != null && objSamplecheckin.ContactName.SampleReceiptNotification)
                            {
                                objSamplecheckin.Email = objSamplecheckin.ContactName.Email;
                                Sendmail(objSamplecheckin);
                            }
                        }

                        View.ObjectSpace.CommitChanges();
                        View.ObjectSpace.Refresh();
                        //Frame.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();
                        Application.ShowViewStrategy.ShowMessage("Submitted successfully", InformationType.Success, timer.Seconds, InformationPosition.Top);
                    }
                }
                //ResetNavigationCount();
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SRRecalculate_Execute(object sender, SimpleActionExecuteEventArgs e)
        {

            try
            {
                if (View.CurrentObject != null)
                {
                    SRInfo.CurrentJob = View.CurrentObject as Samplecheckin;
                    var os = Application.CreateObjectSpace();
                    Session currentSession = ((XPObjectSpace)(os)).Session;
                    SelectedData sproclang = currentSession.ExecuteSproc("UpdateInvoiceSummaryByJobID_sp", SRInfo.CurrentJob.JobID);
                    Application.ShowViewStrategy.ShowMessage("Invoice recalculated successfully", InformationType.Success, timer.Seconds, InformationPosition.Top);
                }
                else
                {

                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        protected override void OnActivated()
        {
            try
            {
                base.OnActivated();
                if (View.Id == "Contact_DetailView")
                {
                    if (((DetailView)Application.MainWindow.View).Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                    {
                        Samplecheckin lsamplecheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                        Contact objContact = (Contact)View.CurrentObject;
                        if (lsamplecheckin != null && objContact != null)
                        {
                            objContact.Customer = View.ObjectSpace.GetObject(lsamplecheckin.ClientName);
                        }
                    }
                }
                else if (View.Id == "Contact_ListView_Invoice" || View.Id == "Contact_ListView_Report")
                {
                    //Frame.GetController<NewObjectViewController>().NewObjectAction.Executing += NewObjectAction_Executing;
                    Frame.GetController<NewObjectViewController>().NewObjectAction.Executed += NewObjectAction_Executed;
                }

                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                {
                    Samplecheckin obj = (Samplecheckin)View.CurrentObject;
                    if (View.ObjectSpace.IsNewObject(obj))
                    {
                        if (obj.TAT != null && !obj.IsSampling)
                        {
                            int tatHour = obj.TAT.Count;
                            int Day = 0;
                            if (tatHour >= 24)
                            {
                                Day = tatHour / 24;
                                obj.DueDate = AddWorkingDays(obj.RecievedDate, Day);
                            }
                            else
                            {
                                obj.DueDate = AddWorkingHours(obj.RecievedDate, tatHour);
                            }
                        }
                    }
                    else
                    {
                        if (obj.ProjectID != null)
                            obj.ProjectLocation = obj.ProjectID.ProjectLocation;
                    }
                    objAuditInfo.currentViewOid = obj.Oid;
                    DevExpress.Persistent.Validation.RuleSet.CustomNeedToValidateRule += RuleSet_CustomNeedToValidateRule;
                    Frame.GetController<NewObjectViewController>().NewObjectAction.Executing += NewObjectAction_Executing;
                    ViewItem JobID = ((DetailView)View).FindItem("JobID");
                    JobIDFormat objformat = View.ObjectSpace.FindObject<JobIDFormat>(CriteriaOperator.Parse(""));
                    if (obj.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                    {
                        SRInfo.IsAttchedSubout = true;
                    }
                    else
                    {
                        SRInfo.IsAttchedSubout = false;
                    }
                    if (objformat != null && JobID != null)
                    {
                        ASPxStringPropertyEditor editor = (ASPxStringPropertyEditor)JobID;
                        if (editor != null)
                        {
                            if (objformat.Dynamic == false && obj.Status == SampleRegistrationSignoffStatus.PendingSubmit)
                            {
                                editor.AllowEdit.SetItemValue("enb", true);
                            }
                            else
                            {
                                editor.AllowEdit.SetItemValue("enb", false);
                                editor.NullText = "Autogenerate";
                            }
                        }
                    }
                    collector = ((DetailView)View).FindItem("Collector") as ASPxLookupPropertyEditor;
                    if (collector != null)
                    {
                        collector.ValueRead += Collector_ValueRead;
                    }
                    if (!View.ObjectSpace.IsNewObject(obj))
                    {
                        List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSamples = View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("JobID.Oid=?", obj.Oid)).ToList();
                        if (lstSamples.Count == 0)
                        {
                            obj.NoOfSamples = 1;
                        }
                    }
                    if (obj.IsSampling)
                    {
                        View.Caption = "Scheduled Sample Registration";
                        BtnCoolerId.Active.SetItemValue("CoolerId", true);
                    }
                    else
                    {
                        BtnCoolerId.Active.SetItemValue("CoolerId", false);
                    }

                }

                btnImportSamples.Active.SetItemValue("COCImport", false);
                btnImportBasicInformationAction.Active.SetItemValue("Import", false);
                // Perform various tasks depending on the target View.
                if (View != null && Application.MainWindow != null && Application.MainWindow.View != null && Application.MainWindow.View is DetailView)
                {
                    if (((DetailView)Application.MainWindow.View).ViewEditMode == ViewEditMode.View)
                    {
                        btnDeleteSamplesandTest.Active.SetItemValue("btndelete", false);
                        Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active.SetItemValue("Deletebtn", false);
                    }
                }
                if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                {
                    SRInfo.CanRefresh = true;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executed += DeleteAction_Executed;
                    Frame.GetController<NewObjectViewController>().NewObjectAction.Executing += NewObjectAction_Executing;
                }
                if (View.Id == "eNotificationContentTemplate_DetailView")
                {
                    Frame.GetController<ModificationsController>().SaveAction.Executing += SaveAction_Executing;
                    Frame.GetController<ModificationsController>().SaveAndCloseAction.Executing += SaveAction_Executing;
                    Frame.GetController<ModificationsController>().SaveAndNewAction.Executing += SaveAction_Executing;
                }
                if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration" && !objSLInfo.IsColumnsCustomized && !string.IsNullOrEmpty(SRInfo.strJobID))
                {

                    ((XPObjectSpace)View.ObjectSpace).Session.TrackPropertiesModifications = true;
                    // XpoDefault.TrackPropertiesModifications = true;
                    if (SRInfo.EditColumnName != null && SRInfo.EditColumnName.Count > 0)
                    {
                        SRInfo.EditColumnName.Clear();
                    }
                    SRInfo.canGridRefresh = true;
                    objSLInfo.IsColumnsCustomized = true;
                    objPermissionInfo.SampleRegIsWrite = false;
                    WebWindow.CurrentRequestWindow.PagePreRender += CurrentRequestWindow_PagePreRender;
                    Modules.BusinessObjects.Hr.Employee user = (Modules.BusinessObjects.Hr.Employee)SecuritySystem.CurrentUser;
                    if (user.Roles != null && user.Roles.Count > 0)
                    {
                        if (user.Roles.FirstOrDefault(i => i.IsAdministrative == true) != null && Application.MainWindow.View.ObjectTypeInfo.Type == typeof(Samplecheckin) && ((DetailView)Application.MainWindow.View).ViewEditMode == ViewEditMode.Edit)
                        {
                            objPermissionInfo.SampleRegIsWrite = true;
                        }
                        else
                        {
                            foreach (RoleNavigationPermission role in user.RolePermissions)
                            {
                                if (role.RoleNavigationPermissionDetails.FirstOrDefault(i => i.NavigationItem.NavigationView == View.Id && i.Write == true) != null)
                                {
                                    if (Application.MainWindow.View.ObjectTypeInfo.Type == typeof(Samplecheckin) && ((DetailView)Application.MainWindow.View).ViewEditMode == ViewEditMode.Edit)
                                    {
                                        objPermissionInfo.SampleRegIsWrite = true;
                                    }
                                }
                                if (role.RoleNavigationPermissionDetails.FirstOrDefault(i => i.NavigationItem.NavigationModelClass == View.ObjectTypeInfo.FullName && i.Delete == true) != null)
                                {
                                    if (Application.MainWindow.View.ObjectTypeInfo.Type == typeof(Samplecheckin) && ((DetailView)Application.MainWindow.View).ViewEditMode == ViewEditMode.Edit)
                                    {
                                        objPermissionInfo.SampleRegIsWrite = true;
                                    }
                                }
                            }
                        }
                    }
                    if (objPermissionInfo.SampleRegIsWrite == false)
                    {
                        btn_TestEdit.Active["btnTestEdit"] = false;
                    }
                    else
                    {
                        btn_TestEdit.Active["btnTestEdit"] = true;
                    }
                }
                if (View.Id == "DataSource_ListView")
                {
                    ListViewProcessCurrentObjectController grid = Frame.GetController<ListViewProcessCurrentObjectController>();
                    grid.CustomProcessSelectedItem += Grid_CustomProcessSelectedItem;

                }
                SRInfo.UseSelchanged = true;
                ((WebApplication)Application).PopupWindowManager.PopupShowing += PopupWindowManager_PopupShowing;
                if (Frame is DevExpress.ExpressApp.Web.PopupWindow)
                {
                    //((DevExpress.ExpressApp.Web.PopupWindow)Frame).View.Closing += View_Closing;
                    DevExpress.ExpressApp.Web.PopupWindow popupWindow = Frame as DevExpress.ExpressApp.Web.PopupWindow;
                    if (popupWindow != null)
                    {
                        popupWindow.RefreshParentWindowOnCloseButtonClick = true;// This is for the cross (X) button of ASPxPopupControl.  
                        DialogController dc = popupWindow.GetController<DialogController>();
                        //if (dc != null)
                        //{
                        //    dc.ViewClosing += Dc_ViewClosing;
                        //}
                    }
                }
                TestDescription.Active.SetItemValue("TestDescription", false);
                TestGroup.Active.SetItemValue("TestGroup", false);
                btnTask_RegistrationReport.Active["ShowTaskRegistration"] = false;
                btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = false;
                btnQuoteImportSamples.Active["QuoteImport"] = false;
                //btnCOCImportSamples.Active["COCImport"] = false;
                btnCOCImport.Active["COCImport"] = false;
                //SRInfo.lstAddedClause = new List<ClauseInspectionSettings>();

                //if (ConfigurationManager.AppSettings["ClientName"] == "JSDX")
                //{
                //    TestGroup.Active.SetItemValue("TestGroup", false);
                //}
                //else
                //{
                //    TestGroup.Active.SetItemValue("TestGroup", true);
                //}
                SRInfo.lstObjectsToShow = new List<Guid>();
                if (View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History")
                {
                    objPermissionInfo.SampleRegistrationViewEditMode = ViewEditMode.View;
                }
                else if (View != null && View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_ListView_Copy_Registration_History" || View.Id == "Samplecheckin_ListView_SampleReceiptNotification" || View.Id == "Samplecheckin_ListView_SampleReceiptNotification_History")
                {
                    if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                    {
                        objPermissionInfo.SampleRegIsWrite = false;
                        objPermissionInfo.SampleRegIsDelete = false;
                        Modules.BusinessObjects.Hr.Employee user = (Modules.BusinessObjects.Hr.Employee)SecuritySystem.CurrentUser;
                        if (user.Roles != null && user.Roles.Count > 0)
                        {
                            if (user.Roles.FirstOrDefault(i => i.IsAdministrative == true) != null)
                            {
                                objPermissionInfo.SampleRegIsWrite = true;
                            }
                            else
                            {
                                foreach (RoleNavigationPermission role in user.RolePermissions)
                                {
                                    if (role.RoleNavigationPermissionDetails.FirstOrDefault(i =>i.NavigationItem!=null && i.NavigationItem.NavigationModelClass == Application.MainWindow.View.ObjectTypeInfo.FullName && i.Write == true) != null)
                                    {
                                        objPermissionInfo.SampleRegIsWrite = true;
                                    }
                                    if (role.RoleNavigationPermissionDetails.FirstOrDefault(i =>i.NavigationItem!=null && i.NavigationItem.NavigationModelClass == Application.MainWindow.View.ObjectTypeInfo.FullName && i.Delete == true) != null)
                                    {
                                        objPermissionInfo.SampleRegIsDelete = true;
                                    }
                                }
                            }
                        }
                        if (objPermissionInfo.SampleRegIsWrite)
                        {
                            MailContent.Active["showMailContent"] = true;
                            SentMail.Active["showSentMail"] = true;
                            COCAttach.Active["showCOC"] = false;
                        }
                        else
                        {
                            MailContent.Active["showMailContent"] = false;
                            SentMail.Active["showSentMail"] = false;
                            COCAttach.Active["showCOC"] = false;
                        }
                    }
                    SRInfo.bolNewJobID = false;
                    if (sampleRegistrationDateFilterAction != null && sampleRegistrationDateFilterAction.SelectedItem == null)
                    {
                        DateTime srDateFilter = DateTime.MinValue;
                        DefaultSetting setting = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("Oid is not null"));
                        if (sampleRegistrationDateFilterAction.SelectedItem == null)
                        {
                            if (setting.SampleTracking == EnumDateFilter.OneMonth)
                            {
                                sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[0];
                                srDateFilter = DateTime.Today.AddMonths(-1);
                            }
                            else if (setting.SampleTracking == EnumDateFilter.ThreeMonth)
                            {
                                sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[1];
                                srDateFilter = DateTime.Today.AddMonths(-3);
                            }
                            else if (setting.SampleTracking == EnumDateFilter.SixMonth)
                            {
                                sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[2];
                                srDateFilter = DateTime.Today.AddMonths(-6);
                            }
                            else if (setting.SampleTracking == EnumDateFilter.OneYear)
                            {
                                sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[3];
                                srDateFilter = DateTime.Today.AddYears(-1);
                            }
                            else if (setting.SampleTracking == EnumDateFilter.TwoYear)
                            {
                                sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[4];
                                srDateFilter = DateTime.Today.AddYears(-2);
                            }
                            else if (setting.SampleTracking == EnumDateFilter.FiveYear)
                            {
                                sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[5];
                                srDateFilter = DateTime.Today.AddYears(-5);
                            }
                            else if (setting.SampleTracking == EnumDateFilter.All)
                            {
                                sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[6];
                                ((ListView)View).CollectionSource.Criteria.Remove("Filter");
                            }
                        }
                        if (srDateFilter != DateTime.MinValue)
                        {

                            ((ListView)View).CollectionSource.Criteria["Filter"] = CriteriaOperator.Parse("CreatedDate>=?", srDateFilter);
                        }
                        else
                        {
                            ((ListView)View).CollectionSource.Criteria.Remove("Filter");
                        }
                        //sampleRegistrationDateFilterAction.SelectedItem = sampleRegistrationDateFilterAction.Items[0];
                        //DateTime srDateFilter = DateTime.Today.AddMonths(-3);
                        //((ListView)View).CollectionSource.Criteria["Filter"] = CriteriaOperator.Parse("[RecievedDate] >= ? and [RecievedDate] < ?", srDateFilter, DateTime.Now);//CriteriaOperator.Parse("GETDATE([RecievedDate]) BETWEEN('" + srDateFilter + "', '" + DateTime.Now + "')");
                        sampleRegistrationDateFilterAction.SelectedItemChanged += SampleRegistrationDateFilterAction_SelectedItemChanged;
                    }
                }
                else if (Application != null && Application.MainWindow != null && Application.MainWindow.View != null && Application.MainWindow.View.Id != "SampleRegistration")
                {
                    objPermissionInfo.SampleRegistrationViewEditMode = ViewEditMode.Edit;
                }
                if (View != null && (View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"))
                {
                    objPermissionInfo.SampleRegIsWrite = false;
                    objPermissionInfo.SampleRegIsDelete = false;
                    Modules.BusinessObjects.Hr.Employee user = (Modules.BusinessObjects.Hr.Employee)SecuritySystem.CurrentUser;
                    if (user.Roles != null && user.Roles.Count > 0)
                    {
                        if (user.Roles.FirstOrDefault(i => i.IsAdministrative == true) != null)
                        {
                            objPermissionInfo.SampleRegIsWrite = true;
                            objPermissionInfo.SampleRegIsDelete = true;
                            objPermissionInfo.SampleRegIsCreate = true;
                            Frame.GetController<NewObjectViewController>().Active["showNew"] = true;
                        }
                        else
                        {
                            foreach (RoleNavigationPermission role in user.RolePermissions)
                            {
                                if (role.RoleNavigationPermissionDetails.FirstOrDefault(i => i.NavigationItem.NavigationModelClass == View.ObjectTypeInfo.FullName && i.NavigationItem.IsDeleted == false && i.Create == true) != null)
                                {
                                    objPermissionInfo.SampleRegIsCreate = true;
                                    //return;
                                    //break;
                                }
                                if (role.RoleNavigationPermissionDetails.FirstOrDefault(i => i.NavigationItem.NavigationModelClass == View.ObjectTypeInfo.FullName && i.NavigationItem.IsDeleted == false && i.Write == true) != null)
                                {
                                    objPermissionInfo.SampleRegIsWrite = true;
                                    //return;
                                    //break;
                                }
                                if (role.RoleNavigationPermissionDetails.FirstOrDefault(i => i.NavigationItem.NavigationModelClass == View.ObjectTypeInfo.FullName && i.NavigationItem.IsDeleted == false && i.Delete == true) != null)
                                {
                                    objPermissionInfo.SampleRegIsDelete = true;
                                    //return;
                                    //break;
                                }
                            }
                            if (objPermissionInfo.SampleRegIsCreate)
                            {
                                Frame.GetController<NewObjectViewController>().Active["showNew"] = true;
                            }
                            else
                            {
                                Frame.GetController<NewObjectViewController>().Active["showNew"] = false;
                            }
                            if (objPermissionInfo.SampleRegIsDelete)
                            {
                                Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active["ShowDelete"] = true;
                            }
                            else
                            {
                                Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active["ShowDelete"] = false;
                            }
                        }
                    }
                    PreInvoice.Active.SetItemValue("PreInvoice", objPermissionInfo.SampleRegIsWrite);
                    //SRInfo.strJobID = string.Empty;
                    if (View.CurrentObject != null)
                    {
                        Samplecheckin checkin = Application.MainWindow.View.CurrentObject as Samplecheckin;
                        if (checkin != null)
                        {
                            CNInfo.SCJobId = checkin.JobID;
                            if (!string.IsNullOrEmpty(checkin.SampleMatries))
                            {
                                StringBuilder sb = new StringBuilder();
                                foreach (string strMatrix in checkin.SampleMatries.Split(';'))
                                {
                                    VisualMatrix objSM = ObjectSpace.GetObjectByKey<VisualMatrix>(new Guid(strMatrix));
                                    if (sb.Length > 0)
                                    {
                                        sb.Append(";"); // Add semicolon before appending the next name
                                    }
                                    sb.Append(objSM.VisualMatrixName);
                                }
                                CNInfo.SCSampleMatries = sb.ToString();
                            }

                        }
                        SRInfo.CurrentJob = View.CurrentObject as Samplecheckin;
                        SRInfo.NewClient = null;
                        SRInfo.NewProject = null;
                        ModificationsController modificationController = Frame.GetController<ModificationsController>();
                        if (modificationController != null)
                        {
                            modificationController.SaveAction.Execute += SaveAction_Execute;
                            modificationController.SaveAndCloseAction.Executing += SaveAndCloseAction_Executing;
                            modificationController.SaveAndNewAction.Executing += SaveAndNewAction_Executing;
                        }
                        if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                        {
                            DefaultSetting objSampleTracking = View.ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("[ModuleName] = ? AND [IsModule]= False AND [Select] = False AND NavigationItemName=?", "Settings", "COC Settings"));
                            if (objSampleTracking != null)
                            {
                                btnImportSamples.Active["hideCoCbutton"] = false;
                            }
                            else if (objSampleTracking == null)
                            {
                                btnImportSamples.Active.RemoveItem("hideCoCbutton");
                            }
                        }

                    }
                    ObjectSpace.Committing += ObjectSpace_Committing;
                    ObjectSpace.Committed += ObjectSpace_Committed;
                    btnImportSamples.Executed += BtnImportSamples_Executed;
                    //CurrentLanguage currentLanguage = ObjectSpace.FindObject<CurrentLanguage>(CriteriaOperator.Parse(""));
                    if (objLanguage.strcurlanguage != "En")
                    {
                        //Sample.Caption = "样品(0)";
                        Sample.Caption = "样液样品(0)";
                    }
                    else
                    {
                        Sample.Caption = "Samples(0)";
                    }
                    if (objPermissionInfo.SampleRegIsWrite)
                    {
                        SRSubmit.Active["showsubmit"] = true;
                        btnDeleteSamplesandTest.Active["delete"] = true;
                    }
                    else
                    {
                        SRSubmit.Active["showsubmit"] = false;
                        btnDeleteSamplesandTest.Active["delete"] = false;
                    }
                }
                else if (View.Id == "Reporting_ListView_Delivery")
                {
                    Employee currentUser = SecuritySystem.CurrentUser as Employee;
                    if (currentUser != null && View != null && View.Id != null)
                    {
                        if (currentUser.Roles != null && currentUser.Roles.Count > 0)
                        {
                            objPermissionInfo.ReportDeliveryIsWrite = false;
                            if (currentUser.Roles.FirstOrDefault(i => i.IsAdministrative == true) != null)
                            {
                                objPermissionInfo.ReportDeliveryIsWrite = true;
                            }
                            else
                            {
                                foreach (RoleNavigationPermission role in currentUser.RolePermissions)
                                {
                                    if (role.RoleNavigationPermissionDetails.FirstOrDefault(i => i.NavigationItem != null && i.NavigationItem.NavigationId == "ReportDelivery" && i.Write == true) != null)
                                    {
                                        objPermissionInfo.ReportDeliveryIsWrite = true;
                                    }
                                }
                            }
                        }
                        if (objPermissionInfo.ReportDeliveryIsWrite)
                        {
                            MailContent.Active["showMailContent"] = true;
                        }
                        else
                        {
                            MailContent.Active["showMailContent"] = false;
                        }
                    }
                }

                else if (View != null && View.Id == "ClauseInspectionSettings_LookupListView")
                {
                    //((ListView)View).SelectionChanged += SampleRegistrationViewController_SelectionChanged;
                }
                else if (View.Id == "SampleRegistrationFileImport_DetailView")
                {
                    FilePropertyEditor = ((DetailView)View).FindItem("InputFile") as FileDataPropertyEditor;
                    if (FilePropertyEditor != null)
                        FilePropertyEditor.ControlCreated += FilePropertyEditor_ControlCreated;
                }
                else if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    ObjectSpace.Committing += ObjectSpace_Committing;
                    //ObjectSpace.Committed += ObjectSpace_Committed;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executing += DeleteAction_Executing;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executed += DeleteAction_Executed;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Category = "PopupActions";

                    //Frame.GetController<ASPxGridListEditorConfirmUnsavedChangesController>().Active["DisableUnsavedChangesController"] = false;
                }
                else if (View.Id == "SampleConditionCheck_DetailView_Copy")
                {
                    SampleConditionCheck obj = (SampleConditionCheck)View.CurrentObject;
                    if (obj != null && View.ObjectSpace.IsNewObject(obj) == true)
                    {
                        if (Application.MainWindow != null && Application.MainWindow.View != null && Application.MainWindow.View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                        {
                            Samplecheckin objCheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                            if (objCheckin != null)
                            {
                                obj.JobID = objCheckin.JobID;
                                obj.VisualMatrix = objCheckin.SampleMatries;
                                obj.ClientName = View.ObjectSpace.GetObject<Customer>(objCheckin.ClientName);
                            }
                        }
                        else if (Application.MainWindow != null && Application.MainWindow.View != null && Application.MainWindow.View.Id == "SampleRegistration")
                        {
                            DashboardViewItem dvsamplecheckin = ((DashboardView)Application.MainWindow.View).FindItem("SampleCheckin") as DashboardViewItem;
                            if (dvsamplecheckin != null && dvsamplecheckin.InnerView != null)
                            {
                                Samplecheckin objCheckin = (Samplecheckin)dvsamplecheckin.InnerView.CurrentObject;
                                if (objCheckin != null)
                                {
                                    obj.JobID = objCheckin.JobID;
                                    obj.VisualMatrix = objCheckin.SampleMatries;
                                    obj.ClientName = View.ObjectSpace.GetObject<Customer>(objCheckin.ClientName);
                                }
                            }
                        }
                        else if (Application.MainWindow != null && Application.MainWindow.View != null && Application.MainWindow.View.Id == "SampleBottleAllocation_DetailView_SampleTransfer")
                        {
                            Samplecheckin objCheckin = ((SampleBottleAllocation)Application.MainWindow.View.CurrentObject).SampleRegistration.JobID;
                            if (objCheckin != null)
                            {
                                obj.JobID = objCheckin.JobID;
                                obj.VisualMatrix = objCheckin.SampleMatries;
                                obj.ClientName = View.ObjectSpace.GetObject<Customer>(objCheckin.ClientName);
                            }
                        }
                    }
                }
                else if (View.Id == "Test")
                {
                    staticText = (StaticText)((DashboardView)this.View).FindItem("SampleMatrix");
                    objNavigationViewSingOff = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));

                }
                else if (View.Id == "Samplecheckin_ListView_Copy_Registration_History")
                {
                    strviewid.strtempviewid = View.Id.ToString();
                }
                else if (View.Id == "SampleRegistration_SampleLogin")
                {
                    View.Closing += View_Closing;
                    View.Closed += View_Closed;
                }
                else if (View.Id == "InvoicingAnalysisCharge_ListView_PreInvoiceDetails" || View.Id == "Invoicing_ItemCharges_ListView_PreinvoiceDetails")
                {
                    View.ControlsCreated += View_ControlsCreated;
                    if (View.Id == "InvoicingAnalysisCharge_ListView_PreInvoiceDetails")
                    {
                        ((ListView)View).CollectionSource.Criteria["Filter"] = CriteriaOperator.Parse("Oid is null");
                    }
                }

                if (View is DashboardView)
                {
                    DashboardViewItem SCDetailView = ((DashboardView)View).FindItem("SampleCheckIn_DetailView") as DashboardViewItem;
                    DashboardViewItem SLDetailView = ((DashboardView)View).FindItem("SampleLogIn_DetailView") as DashboardViewItem;
                    DashboardViewItem SampleLoginDetailView = ((DashboardView)View).FindItem("Test_Edit_Form") as DashboardViewItem;
                    DashboardViewItem TestEditSampleLoginDetailView = ((DashboardView)View).FindItem("TestEdit_SampleLogin_Form") as DashboardViewItem;
                    DashboardViewItem SLListView = ((DashboardView)View).FindItem("SampleLogIn_ListView") as DashboardViewItem;
                    if (SCDetailView != null)
                    {
                        SCDetailView.ControlCreated += SCDetailView_ControlCreated;
                    }
                    if (SLDetailView != null)
                    {
                        SLDetailView.ControlCreated += SLDetailView_ControlCreated;
                    }
                    if (SLListView != null)
                    {
                        SLListView.ControlCreated += SLListView_ControlCreated;
                    }
                    if (SampleLoginDetailView != null)
                    {
                        SampleLoginDetailView.ControlCreated += TestEditDetailView_ControlCreated;
                    }
                    if (TestEditSampleLoginDetailView != null)
                    {
                        TestEditSampleLoginDetailView.ControlCreated += TestEditSampleLoginDetailView_ControlCreated;
                    }
                }
                //if (View is DashboardView)
                //{
                //    DashboardViewItem SCRegDetailView = ((DashboardView)View).FindItem("SampleCheckin") as DashboardViewItem;
                //    DashboardViewItem SLRegListView = ((DashboardView)View).FindItem("SampleLogin") as DashboardViewItem;
                //    DashboardViewItem SLTestRegListView = ((DashboardView)View).FindItem("Tests") as DashboardViewItem;
                //    if (SCRegDetailView != null)
                //    {
                //        SCRegDetailView.ControlCreated += SCRegDetailView_ControlCreated;
                //    }
                //    if (SLRegListView != null)
                //    {
                //        SLRegListView.ControlCreated += SLRegListView_ControlCreated;
                //    }
                //    //if (SLTestRegListView != null)
                //    //{
                //    //    SLTestRegListView.ControlCreated += SLTestRegListView_ControlCreated;
                //    //}
                //}
                //if(Frame is NestedFrame)
                //{
                //    NestedFrame nestedFrame = (NestedFrame)Frame;
                //    if (nestedFrame != null && nestedFrame.ViewItem != null)
                //    {
                //        CompositeView cv = nestedFrame.ViewItem.View;
                //        if (cv != null && cv.Id == "SampleRegistration_SampleLogin")
                //        {
                //            DashboardViewItem SLRegListView = ((DashboardView)cv).FindItem("SampleLogin") as DashboardViewItem;
                //            DashboardViewItem SLTestRegListView = ((DashboardView)cv).FindItem("Tests") as DashboardViewItem;
                //            if (SLRegListView != null)
                //            {
                //                SLRegListView.ControlCreated += SLRegListView_ControlCreated;
                //            }
                //            //if (SLTestRegListView != null)
                //            //{
                //            //    SLTestRegListView.ControlCreated += SLTestRegListView_ControlCreated;
                //            //}
                //        }
                //    }
                //}
                ObjectSpace.ObjectChanged += ObjectSpace_ObjectChanged;
                if (View.Id == "SampleLogIn_ListView_SampleRegistration_Bottle")
                {
                    samplingfirstdefault = true;
                }
                if (View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                {
                    if (objPermissionInfo.SampleRegIsDelete)
                    {
                        Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executing += DeleteAction_Executing;
                    }
                }
                if (View.Id == "eNotificationContentTemplate_DetailView")
                {
                    View.ControlsCreated += NotificationContentTemplateView_ControlsCreated;
                }

                if (View.Id == "TestEdit_DashboardView" || View.Id == "Samplecheckin_DetailView_TestEdit" || View.Id == "SampleParameter_ListView_TestEdit" || View.Id == "SampleLogIn_DetailView_EditTest" ||
                    View.Id == "SampleLogIn_LookupListView_EditTest")
                {
                    Frame.GetController<RefreshController>().RefreshAction.Active.SetItemValue("DisableRefresh", false);
                    Frame.GetController<WebExportController>().ExportAction.Active.SetItemValue("DisableExport", false);
                    if (View.Id == "SampleParameter_ListView_TestEdit")
                    {
                        ((ListView)View).CollectionSource.Criteria["TestEditFilter"] = CriteriaOperator.Parse("1=2");
                    }
                    if (View.Id == "SampleLogIn_LookupListView_EditTest")
                    {
                        ((ListView)View).CollectionSource.Criteria["filter1"] = CriteriaOperator.Parse("[JobID.JobID]='" + SRInfo.strJobID + "' and Oid <> ?", new Guid(objSLInfo.SLOid));
                    }
                    if (View is ListView)
                    {
                        Frame.GetController<ASPxGridListEditorConfirmUnsavedChangesController>().Active["DisableUnsavedChangesListView"] = false;
                    }
                    if (View is DetailView)
                    {
                        Frame.GetController<WebConfirmUnsavedChangesDetailViewController>().Active["DisableUnsavedChangesDetailView"] = false;
                    }
                }
                if (Application.MainWindow.View.Id == "SampleBottleAllocation_DetailView_SampleTransfer")
                {
                    SRSubmit.Active["showsubmit"] = false;
                    btnDeleteSamplesandTest.Active["delete"] = false;
                    objPermissionInfo.SampleRegIsDelete = false;
                    objPermissionInfo.SampleRegIsCreate = false;
                    objPermissionInfo.SampleRegIsWrite = false;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active["ShowDelete"] = false;
                    WebWindow.CurrentRequestWindow.PagePreRender -= CurrentRequestWindow_PagePreRender;
                    objPermissionInfo.SampleRegistrationViewEditMode = ViewEditMode.View;
                }
                //if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy")
                //{
                //    //if (SRInfo.lstdupfilterSuboutstr != null && SRInfo.lstdupfilterSuboutstr.Count > 0 && SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Count > 0)
                //    if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Count > 0)
                //    {
                //        //foreach (string test in SRInfo.lstdupfilterSuboutstr)
                //        foreach (Guid test in SRInfo.lstSubOutTest)
                //        {
                //            //var testsplit = test.Split('|');
                //            //IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MethodName.MethodNumber] ='" + testsplit[1] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[2] + "')"));
                //            IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.oid] =?", test));
                //            foreach (Testparameter obj in ((ListView)View).CollectionSource.List.Cast<Testparameter>().ToList())
                //            {
                //                if (testparameters.Contains(obj))
                //                {
                //                    obj.SubOut = true;
                //                }
                //            }
                //        }
                //    }
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }

        }

        private void NewObjectAction_Executing(object sender, CancelEventArgs e)
        {
            try
            {

                SampleSourceSetup objSampleSource = ObjectSpace.FindObject<SampleSourceSetup>(CriteriaOperator.Parse(""));
                if (objSampleSource != null && objSampleSource.NeedToActivateSampleSourceMode == SampleSourceMode.Yes)
                {
                    e.Cancel = true;
                    NonPersistentObjectSpace nos = (NonPersistentObjectSpace)Application.CreateObjectSpace(typeof(NpSampleSourceSetup));
                    NpSampleSourceSetup objToShow = nos.CreateObject<NpSampleSourceSetup>();
                    objToShow.SampleSource = objSampleSource.SampleSource;
                    DetailView createDetailView = Application.CreateDetailView(nos, "NpSampleSourceSetup_DetailView", true, objToShow);
                    createDetailView.ViewEditMode = ViewEditMode.Edit;
                    ShowViewParameters showViewParameters = new ShowViewParameters(createDetailView);
                    showViewParameters.CreatedView = createDetailView;
                    showViewParameters.Context = TemplateContext.PopupWindow;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.CancelAction.Active.SetItemValue("Cancel", false);
                    dc.Accepting += Dc_Accepting_SampleSource; ;
                    dc.CloseOnCurrentObjectProcessing = false;
                    showViewParameters.Controllers.Add(dc);
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                }


            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Dc_Accepting_SampleSource(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                NpSampleSourceSetup objNp = (NpSampleSourceSetup)e.AcceptActionArgs.CurrentObject;
                if (objNp != null)
                {
                    if (objNp.SampleSource == SampleSource.Sampling)
                    {
                        SRInfo.IsSampling = true;
                    }
                    else
                    {
                        SRInfo.IsSampling = false;
                    }
                    IObjectSpace os = Application.CreateObjectSpace(typeof(Samplecheckin));
                    Samplecheckin objNewSampleCheckin = os.CreateObject<Samplecheckin>();
                    if (objNp.SampleSource == SampleSource.DropOff)
                    {
                        objNewSampleCheckin.IsSampling = false;
                    }
                    else
                    {
                        objNewSampleCheckin.IsSampling = true;
                        objNewSampleCheckin.JobIDFormat = -1;
                    }
                    DetailView dv = Application.CreateDetailView(os, "Samplecheckin_DetailView_Copy_SampleRegistration", true, objNewSampleCheckin);
                    dv.ViewEditMode = ViewEditMode.Edit;
                    Frame.SetView(dv);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestEditSampleLoginDetailView_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                DetailView detailView = (DetailView)((DashboardViewItem)sender).Frame.View;
                if (detailView.CurrentObject == null)
                {
                    ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = false;
                    detailView.ViewEditMode = ViewEditMode.Edit;
                    detailView.CurrentObject = detailView.ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("SampleID = ?", SRInfo.strSampleID));
                    ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = true;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestEditDetailView_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                DetailView detailView = (DetailView)((DashboardViewItem)sender).Frame.View;
                if (detailView.CurrentObject == null)
                {
                    ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = false;
                    detailView.ViewEditMode = ViewEditMode.Edit;
                    detailView.CurrentObject = detailView.ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("JobID = ?", SRInfo.strJobID));
                    ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = true;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void View_ControlsCreated(object sender, EventArgs e)
        {
            try
            {
                if (View.Id == "InvoicingAnalysisCharge_ListView_PreInvoiceDetails")
                {
                    Session currentSession = ((XPObjectSpace)this.ObjectSpace).Session;
                    UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    Samplecheckin objSampleCheckIn = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                    NestedFrame nestedFrame = (NestedFrame)Frame;
                    CompositeView cv = nestedFrame.ViewItem.View;
                    Invoicing objInVoice = (Invoicing)cv.CurrentObject;
                    DashboardViewItem liInvoicingAnalysisCharges = ((DetailView)cv).FindItem("AnalysisCharge") as DashboardViewItem;
                    ListPropertyEditor liInvoicingItemCharges = ((DetailView)cv).FindItem("ItemCharges") as ListPropertyEditor;
                    if (((ListView)View).CollectionSource.GetCount() == 0 && !string.IsNullOrEmpty(objSampleCheckIn.JobID) && objInVoice != null)
                    {
                        IObjectSpace os = liInvoicingAnalysisCharges.InnerView.ObjectSpace;
                        List<SampleParameter> lstSampleParams = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid]=? And [Samplelogin.ExcludeInvoice] = False", objSampleCheckIn.Oid)).ToList();
                        if (lstSampleParams.Count > 0)
                        {
                            if (lstSampleParams.FirstOrDefault(i => i.IsGroup == false) != null)
                            {
                                List<Guid> lstTestParamOids = lstSampleParams.Where(i => i.IsGroup == false).GroupBy(p => new { p.Testparameter.TestMethod.MatrixName.MatrixName, p.Testparameter.TestMethod.MethodName.MethodNumber, p.Testparameter.TestMethod.TestName, p.Testparameter.Component.Components }).Select(g => g.FirstOrDefault().Testparameter.Oid).ToList();
                                if (lstTestParamOids != null && lstTestParamOids.Count > 0)
                                {
                                    foreach (Guid oid in lstTestParamOids)
                                    {
                                        Testparameter param = os.GetObjectByKey<Testparameter>(oid);
                                        InvoicingAnalysisCharge newObj = os.CreateObject<InvoicingAnalysisCharge>();
                                        newObj.Test = param.TestMethod;
                                        newObj.Method = param.TestMethod.MethodName;
                                        newObj.Matrix = param.TestMethod.MatrixName;
                                        newObj.Component = param.Component;
                                        newObj.Testparameter = os.GetObjectByKey<Testparameter>(oid);
                                        newObj.JobID = objSampleCheckIn.JobID;
                                        newObj.IsGroup = false;
                                        if (objSampleCheckIn.TAT != null)
                                        {
                                            TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And Contains([TAT], ?)", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components, objSampleCheckIn.TAT.TAT));
                                            if (testPriceSurcharges != null)
                                            {
                                                newObj.Priority = testPriceSurcharges.Priority;
                                                if (objSampleCheckIn.TAT != null)
                                                {
                                                    newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSampleCheckIn.TAT.Oid);
                                                }
                                                newObj.PriceCode = testPriceSurcharges.PriceCode;
                                                if (testPriceSurcharges.Priority != null)
                                                {
                                                    objInVoice.Priority = cv.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.Setting.Priority>(testPriceSurcharges.Priority.Oid);
                                                }
                                            }
                                            else
                                            {
                                                if (objSampleCheckIn.TAT != null)
                                                {
                                                    newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSampleCheckIn.TAT.Oid);
                                                }
                                            }
                                        }
                                        bool isQuotes = false;
                                        bool isConstutientPrice = false;
                                        if (objSampleCheckIn != null && objSampleCheckIn.QuoteID != null)
                                        {
                                            AnalysisPricing objAnaprice = os.FindObject<AnalysisPricing>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodNumber] = ? And [Test.TestName] = ? And [Component.Components] = ? And [CRMQuotes]=? And [TAT] = ?", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components, objSampleCheckIn.QuoteID.Oid, objSampleCheckIn.TAT.Oid));
                                            if (objAnaprice != null)
                                            {
                                                newObj.UnitPrice = objAnaprice.TotalTierPrice;
                                                newObj.TierPrice = objAnaprice.TotalTierPrice;
                                                newObj.ChargeType = objAnaprice.ChargeType;
                                                newObj.Prep1Price = objAnaprice.Prep1Charge;
                                                newObj.Prep2Price = objAnaprice.Prep2Charge;
                                                newObj.Parameter = objAnaprice.Parameter;
                                                newObj.Discount = Convert.ToDecimal(objAnaprice.Discount);
                                                newObj.TierNo = objAnaprice.TierNo;
                                                newObj.From = objAnaprice.From;
                                                newObj.To = objAnaprice.To;
                                                newObj.Description = objAnaprice.TestDescription;
                                                isQuotes = true;
                                            }
                                        }
                                        if (isQuotes == false && isConstutientPrice == false)
                                        {
                                            TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And Contains([TAT], ?)", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components, objSampleCheckIn.TAT.TAT));
                                            if (testPriceSurcharges != null)
                                            {
                                                if (testPriceSurcharges.SurchargePrice != null)
                                                {
                                                    TestPriceSurcharge testPriceIsRegular = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And [Priority.IsRegular] = True", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components));
                                                    if (testPriceIsRegular != null && testPriceIsRegular.SurchargePrice != null)
                                                    {
                                                        newObj.UnitPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                    }
                                                    newObj.TierPrice = (decimal)testPriceSurcharges.SurchargePrice;
                                                }
                                                newObj.Parameter = "Allparam";
                                            }
                                            else
                                            {
                                                TestPriceSurcharge DefaulttestPrice = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And [Priority.IsRegular]= True", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components));
                                                if (DefaulttestPrice != null)
                                                {
                                                    List<string> lstTAT = DefaulttestPrice.TAT.Split(';').ToList();
                                                    int MaxTAT = os.GetObjects<TurnAroundTime>(new InOperator("TAT", lstTAT)).ToList().Select(i => i.Count).Max();
                                                    if (objSampleCheckIn.TAT.Count > MaxTAT)
                                                    {
                                                        if (DefaulttestPrice != null && DefaulttestPrice.SurchargePrice != null)
                                                        {
                                                            newObj.UnitPrice = (decimal)DefaulttestPrice.SurchargePrice;
                                                        }
                                                        newObj.TierPrice = (decimal)DefaulttestPrice.SurchargePrice;
                                                        newObj.Parameter = "Allparam";
                                                    }
                                                }
                                            }
                                        }
                                        ((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.Add(newObj);


                                    }
                                }
                            }
                            if (lstSampleParams.FirstOrDefault(i => i.IsGroup == true) != null)
                            {
                                List<SampleParameter> lstExistSampleParam = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid]=?", objSampleCheckIn.Oid)).ToList();
                                int Samplecount = lstSampleParams.Where(i => i.IsGroup == true && i.Status == Samplestatus.Reported).Count();
                                if (lstExistSampleParam.Count == Samplecount)
                                {
                                    IList<GroupTestMethod> lstGroupTest = os.GetObjects<GroupTestMethod>(new InOperator("Oid", lstExistSampleParam.Where(i => i.GroupTest != null && i.IsGroup == true).Select(i => i.GroupTest.Oid).Distinct().ToList()));

                                    List<Guid> lstTestParamOids = lstGroupTest.Where(i => i.TestMethod != null).GroupBy(p => new { p.TestMethod.MatrixName.MatrixName, p.TestMethod.TestName }).Select(g => g.FirstOrDefault().TestMethod.Oid).ToList();
                                    if (lstTestParamOids != null && lstTestParamOids.Count > 0)
                                    {
                                        foreach (Guid oid in lstTestParamOids)
                                        {
                                            TestMethod objTest = os.GetObjectByKey<TestMethod>(oid);
                                            InvoicingAnalysisCharge newObj = os.CreateObject<InvoicingAnalysisCharge>();
                                            newObj.Test = objTest;
                                            newObj.Matrix = objTest.MatrixName;
                                            newObj.JobID = strJobID;
                                            newObj.IsGroup = true;
                                            bool isQuotes = false;
                                            if (objSampleCheckIn.TAT != null)
                                            {
                                                TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[IsGroup] = True And  [Matrix.MatrixName] = ?  And [Test.TestName] = ? And Contains([TAT], ?)", objTest.MatrixName.MatrixName, objTest.TestName, objSampleCheckIn.TAT.TAT));
                                                if (testPriceSurcharges != null)
                                                {
                                                    newObj.Priority = testPriceSurcharges.Priority;
                                                    newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSampleCheckIn.TAT.Oid);
                                                    newObj.PriceCode = testPriceSurcharges.PriceCode;
                                                    if (testPriceSurcharges.Priority != null)
                                                    {
                                                        objInVoice.Priority = cv.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.Setting.Priority>(testPriceSurcharges.Priority.Oid);
                                                    }
                                                }
                                                else
                                                {
                                                    newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSampleCheckIn.TAT.Oid);
                                                }
                                            }
                                            if (objSampleCheckIn != null && objSampleCheckIn.QuoteID != null)
                                            {
                                                AnalysisPricing objAnaprice = os.FindObject<AnalysisPricing>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Test.TestName] = ?  And [CRMQuotes]=?", objTest.MatrixName.MatrixName, objTest.TestName, objSampleCheckIn.QuoteID));
                                                if (objAnaprice != null)
                                                {
                                                    newObj.UnitPrice = objAnaprice.TotalTierPrice;
                                                    newObj.TierPrice = objAnaprice.TotalTierPrice;
                                                    newObj.ChargeType = objAnaprice.ChargeType;
                                                    newObj.Prep1Price = objAnaprice.Prep1Charge;
                                                    newObj.Prep2Price = objAnaprice.Prep2Charge;
                                                    newObj.Parameter = objAnaprice.Parameter;
                                                    newObj.Discount = Convert.ToInt32(objAnaprice.Discount);
                                                    newObj.TierNo = objAnaprice.TierNo;
                                                    newObj.From = objAnaprice.From;
                                                    newObj.To = objAnaprice.To;
                                                    newObj.Description = objAnaprice.TestDescription;
                                                    isQuotes = true;
                                                }
                                            }
                                            if (isQuotes == false)
                                            {
                                                TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[IsGroup] = True And  [Matrix.MatrixName] = ?  And [Test.TestName] = ? And Contains([TAT], ?)", objTest.MatrixName.MatrixName, objTest.TestName, objSampleCheckIn.TAT.TAT));
                                                if (testPriceSurcharges != null)
                                                {
                                                    if (testPriceSurcharges.SurchargePrice != null)
                                                    {
                                                        TestPriceSurcharge testPriceIsRegular = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And  [Test.TestName] = ? And [Priority.IsRegular] = True", objTest.MatrixName.MatrixName, objTest.TestName));
                                                        if (testPriceIsRegular != null && testPriceIsRegular.SurchargePrice != null)
                                                        {
                                                            newObj.UnitPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                        }
                                                        newObj.TierPrice = (decimal)testPriceSurcharges.SurchargePrice;
                                                    }
                                                    newObj.Parameter = "Allparam";
                                                }
                                                else
                                                {
                                                    TestPriceSurcharge testPriceIsRegular = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And  [Test.TestName] = ? And [Priority.IsRegular] = True", objTest.MatrixName.MatrixName, objTest.TestName));
                                                    if (testPriceIsRegular != null)
                                                    {
                                                        List<string> lstTAT = testPriceIsRegular.TAT.Split(';').ToList();
                                                        int MaxTAT = os.GetObjects<TurnAroundTime>(new InOperator("TAT", lstTAT)).ToList().Select(i => i.Count).Max();
                                                        if (objSampleCheckIn.TAT.Count > MaxTAT)
                                                        {
                                                            if (testPriceIsRegular != null && testPriceIsRegular.SurchargePrice != null)
                                                            {
                                                                newObj.UnitPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                            }
                                                            newObj.TierPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                            newObj.Parameter = "Allparam";
                                                        }
                                                    }
                                                }
                                            }
                                            ((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.Add(newObj);


                                        }
                                    }
                                }
                            }
                            foreach (InvoicingAnalysisCharge objAnalysisCahrge in (((ListView)View).CollectionSource.List.Cast<InvoicingAnalysisCharge>().ToList()))
                            {
                                if (objAnalysisCahrge.Discount > 0)
                                {
                                    decimal discutamt = objAnalysisCahrge.TierPrice * (Convert.ToDecimal(objAnalysisCahrge.Discount) / 100);
                                    objAnalysisCahrge.Amount = objAnalysisCahrge.fQty * (objAnalysisCahrge.TierPrice - discutamt);
                                }
                                else if (objAnalysisCahrge.Discount < 0)
                                {
                                    decimal discoamt = objAnalysisCahrge.TierPrice * (Convert.ToDecimal(objAnalysisCahrge.Discount) / 100);
                                    objAnalysisCahrge.Amount = ((objAnalysisCahrge.TierPrice) - (discoamt)) * objAnalysisCahrge.fQty;
                                }
                                else
                                {
                                    objAnalysisCahrge.Amount = objAnalysisCahrge.fQty * objAnalysisCahrge.TierPrice;
                                }
                            }
                        }

                        if (liInvoicingItemCharges != null)
                        {
                            if (liInvoicingItemCharges.ListView == null)
                            {
                                liInvoicingItemCharges.CreateControl();
                                foreach (SampleCheckinItemChargePricing objAnalysisCahrge in objSampleCheckIn.SCItemCharges.ToList())
                                {
                                    InvoicingItemCharge objnew = cv.ObjectSpace.CreateObject<InvoicingItemCharge>();
                                    objnew.Invoicing = objInVoice;
                                    objnew.Qty = objAnalysisCahrge.Qty;
                                    objnew.FinalAmount = objAnalysisCahrge.FinalAmount;
                                    objnew.UnitPrice = objAnalysisCahrge.NpUnitPrice;
                                    objnew.Discount = objAnalysisCahrge.Discount;
                                    objnew.ItemPrice = cv.ObjectSpace.GetObjectByKey<ItemChargePricing>(objAnalysisCahrge.ItemPrice.Oid);
                                    objnew.Amount = objAnalysisCahrge.FinalAmount;
                                    objInVoice.ItemCharges.Add(objnew);
                                    objnew.Remark = objAnalysisCahrge.Remark;
                                    objnew.Description = objAnalysisCahrge.Description;
                                    objnew.NpUnitPrice = objAnalysisCahrge.NpUnitPrice;
                                    ((ListView)liInvoicingItemCharges.ListView).CollectionSource.Add(objnew);

                                }
                                  ((ListView)liInvoicingItemCharges.ListView).Refresh();
                            }
                        }
                       ((ListView)liInvoicingAnalysisCharges.InnerView).Refresh();
                        decimal AnalysisChargeFinalAmount = Convert.ToDecimal(((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.List.Cast<InvoicingAnalysisCharge>().ToList().Sum(i => i.Amount));
                        decimal AnalysisChargedetailAmount = Convert.ToDecimal(((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.List.Cast<InvoicingAnalysisCharge>().ToList().Sum(i => i.TierPrice * i.fQty));
                        decimal itemCahargeFinalAmount = 0;
                        decimal itemCahargeDetailAmount = 0;
                        if (liInvoicingItemCharges != null && liInvoicingItemCharges.ListView != null)
                        {
                            itemCahargeFinalAmount = Convert.ToDecimal(((ListView)liInvoicingItemCharges.ListView).CollectionSource.List.Cast<InvoicingItemCharge>().ToList().Sum(i => i.FinalAmount));
                            itemCahargeDetailAmount = Convert.ToDecimal(((ListView)liInvoicingItemCharges.ListView).CollectionSource.List.Cast<InvoicingItemCharge>().ToList().Sum(i => i.Qty * i.NpUnitPrice));
                        }
                        decimal FinalAmount = AnalysisChargeFinalAmount + itemCahargeFinalAmount;
                        decimal detailAmount = AnalysisChargedetailAmount + itemCahargeDetailAmount;
                        objInVoice.DetailedAmount = detailAmount;
                        objInVoice.Amount = FinalAmount;
                        if (detailAmount > FinalAmount)
                        {
                            objInVoice.DiscountAmount = (detailAmount) - (FinalAmount);
                            objInVoice.Discount = Convert.ToInt32(100 * ((detailAmount - FinalAmount) / detailAmount));
                        }
                        else if (detailAmount < FinalAmount)
                        {
                            decimal disamt = FinalAmount - detailAmount;
                            if (disamt != 0)
                            {
                                objInVoice.DiscountAmount = disamt;
                                objInVoice.Discount = Convert.ToInt32(((disamt) / detailAmount) * 100);
                            }
                        }
                        else if (detailAmount == FinalAmount)
                        {
                            objInVoice.DiscountAmount = 0;
                            objInVoice.Discount = 0;
                        }
                        ((DetailView)cv).Refresh();
                        ((DetailView)cv).RefreshDataSource();
                    }
                }
                else if (View.Id == "Invoicing_ItemCharges_ListView_PreinvoiceDetails")
                {
                    NestedFrame nestedFrame = (NestedFrame)Frame;
                    CompositeView cv = nestedFrame.ViewItem.View;
                    Invoicing objInVoice = (Invoicing)cv.CurrentObject;
                    Samplecheckin objSamplechin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                    ListPropertyEditor liInvoicingItemCharges = ((DetailView)cv).FindItem("ItemCharges") as ListPropertyEditor;
                    DashboardViewItem liInvoicingAnalysisCharges = ((DetailView)cv).FindItem("AnalysisCharge") as DashboardViewItem;
                    if (liInvoicingItemCharges != null && ((ListView)liInvoicingItemCharges.ListView).CollectionSource.GetCount() == 0 && objSamplechin.SCItemCharges.Count > 0)
                    {
                        foreach (SampleCheckinItemChargePricing objAnalysisCahrge in objSamplechin.SCItemCharges.ToList())
                        {
                            InvoicingItemCharge objnew = cv.ObjectSpace.CreateObject<InvoicingItemCharge>();
                            objnew.Invoicing = objInVoice;
                            objnew.Qty = objAnalysisCahrge.Qty;
                            objnew.FinalAmount = objAnalysisCahrge.FinalAmount;
                            objnew.UnitPrice = objAnalysisCahrge.NpUnitPrice;
                            objnew.Discount = objAnalysisCahrge.Discount;
                            objnew.ItemPrice = cv.ObjectSpace.GetObjectByKey<ItemChargePricing>(objAnalysisCahrge.ItemPrice.Oid);
                            objnew.Amount = objAnalysisCahrge.Amount;
                            objInVoice.ItemCharges.Add(objnew);
                            objnew.Remark = objAnalysisCahrge.Remark;
                            objnew.Description = objAnalysisCahrge.Description;
                            objnew.NpUnitPrice = objAnalysisCahrge.NpUnitPrice;
                            ((ListView)liInvoicingItemCharges.ListView).CollectionSource.Add(objnew);

                        }
                         ((ListView)liInvoicingItemCharges.ListView).Refresh();
                    }
                    if (liInvoicingAnalysisCharges != null)
                    {
                        if (liInvoicingAnalysisCharges.InnerView == null)
                        {
                            liInvoicingAnalysisCharges.CreateControl();
                            if (((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.GetCount() == 0 && !string.IsNullOrEmpty(objSamplechin.JobID) && objInVoice != null)
                            {
                                IObjectSpace os = liInvoicingAnalysisCharges.InnerView.ObjectSpace;
                                List<SampleParameter> lstSampleParams = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid]=?", objSamplechin.Oid)).ToList();
                                if (lstSampleParams.Count > 0)
                                {
                                    if (lstSampleParams.FirstOrDefault(i => i.IsGroup == false) != null)
                                    {
                                        List<Guid> lstTestParamOids = lstSampleParams.Where(i => i.IsGroup == false).GroupBy(p => new { p.Testparameter.TestMethod.MatrixName.MatrixName, p.Testparameter.TestMethod.MethodName.MethodNumber, p.Testparameter.TestMethod.TestName, p.Testparameter.Component.Components }).Select(g => g.FirstOrDefault().Testparameter.Oid).ToList();
                                        if (lstTestParamOids != null && lstTestParamOids.Count > 0)
                                        {
                                            foreach (Guid oid in lstTestParamOids)
                                            {
                                                Testparameter param = os.GetObjectByKey<Testparameter>(oid);
                                                InvoicingAnalysisCharge newObj = os.CreateObject<InvoicingAnalysisCharge>();
                                                newObj.Test = param.TestMethod;
                                                newObj.Method = param.TestMethod.MethodName;
                                                newObj.Matrix = param.TestMethod.MatrixName;
                                                newObj.Component = param.Component;
                                                newObj.Testparameter = os.GetObjectByKey<Testparameter>(oid);
                                                newObj.JobID = objSamplechin.JobID;
                                                newObj.IsGroup = false;
                                                if (objSamplechin.TAT != null)
                                                {
                                                    TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And Contains([TAT], ?)", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components, objSamplechin.TAT.TAT));
                                                    if (testPriceSurcharges != null)
                                                    {
                                                        newObj.Priority = testPriceSurcharges.Priority;
                                                        newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSamplechin.TAT.Oid);
                                                        newObj.PriceCode = testPriceSurcharges.PriceCode;
                                                        if (testPriceSurcharges.Priority != null)
                                                        {
                                                            objInVoice.Priority = cv.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.Setting.Priority>(testPriceSurcharges.Priority.Oid);
                                                        }
                                                    }
                                                    else
                                                    {
                                                        newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSamplechin.TAT.Oid);
                                                    }
                                                }
                                                bool isQuotes = false;
                                                bool isConstutientPrice = false;
                                                if (objSamplechin != null && objSamplechin.QuoteID != null)
                                                {
                                                    AnalysisPricing objAnaprice = os.FindObject<AnalysisPricing>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodNumber] = ? And [Test.TestName] = ? And [Component.Components] = ? And [CRMQuotes]=? And [TAT] = ?", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components, objSamplechin.QuoteID.Oid, objSamplechin.TAT.Oid));
                                                    if (objAnaprice != null)
                                                    {
                                                        newObj.UnitPrice = objAnaprice.TotalTierPrice;
                                                        newObj.TierPrice = objAnaprice.TotalTierPrice;
                                                        newObj.ChargeType = objAnaprice.ChargeType;
                                                        newObj.Prep1Price = objAnaprice.Prep1Charge;
                                                        newObj.Prep2Price = objAnaprice.Prep2Charge;
                                                        newObj.Parameter = objAnaprice.Parameter;
                                                        newObj.Discount = Convert.ToInt32(objAnaprice.Discount);
                                                        newObj.TierNo = objAnaprice.TierNo;
                                                        newObj.From = objAnaprice.From;
                                                        newObj.To = objAnaprice.To;
                                                        newObj.Description = objAnaprice.TestDescription;
                                                        isQuotes = true;
                                                    }
                                                }
                                                if (isQuotes == false && isConstutientPrice == false)
                                                {
                                                    TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And Contains([TAT], ?)", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components, objSamplechin.TAT.TAT));
                                                    if (testPriceSurcharges != null)
                                                    {
                                                        if (testPriceSurcharges.SurchargePrice != null)
                                                        {
                                                            TestPriceSurcharge testPriceIsRegular = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And [Priority.IsRegular] = True", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components));
                                                            if (testPriceIsRegular != null && testPriceIsRegular.SurchargePrice != null)
                                                            {
                                                                newObj.UnitPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                            }
                                                            newObj.TierPrice = (decimal)testPriceSurcharges.SurchargePrice;
                                                        }
                                                        newObj.Parameter = "Allparam";
                                                    }
                                                }
                                                else
                                                {
                                                    TestPriceSurcharge DefaulttestPrice = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Method.MethodName.MethodNumber] = ? And [Test.TestName] = ? And[Component.Components] = ? And [Priority.IsRegular]= True", param.TestMethod.MatrixName.MatrixName, param.TestMethod.MethodName.MethodNumber, param.TestMethod.TestName, param.Component.Components));
                                                    if (DefaulttestPrice != null)
                                                    {
                                                        List<string> lstTAT = DefaulttestPrice.TAT.Split(';').ToList();
                                                        int MaxTAT = os.GetObjects<TurnAroundTime>(new InOperator("TAT", lstTAT)).ToList().Select(i => i.Count).Max();
                                                        if (objSamplechin.TAT.Count > MaxTAT)
                                                        {
                                                            if (DefaulttestPrice != null && DefaulttestPrice.SurchargePrice != null)
                                                            {
                                                                newObj.UnitPrice = (decimal)DefaulttestPrice.SurchargePrice;
                                                            }
                                                            newObj.TierPrice = (decimal)DefaulttestPrice.SurchargePrice;
                                                            newObj.Parameter = "Allparam";
                                                        }
                                                    }
                                                }
                                                ((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.Add(newObj);


                                            }
                                        }
                                    }
                                    if (lstSampleParams.FirstOrDefault(i => i.IsGroup == true) != null)
                                    {
                                        List<SampleParameter> lstExistSampleParam = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid]=?", objSamplechin.Oid)).ToList();
                                        int Samplecount = lstSampleParams.Where(i => i.IsGroup == true && i.Status == Samplestatus.Reported).Count();
                                        if (lstExistSampleParam.Count == Samplecount)
                                        {
                                            IList<GroupTestMethod> lstGroupTest = os.GetObjects<GroupTestMethod>(new InOperator("Oid", lstExistSampleParam.Where(i => i.GroupTest != null && i.IsGroup == true).Select(i => i.GroupTest.Oid).Distinct().ToList()));

                                            List<Guid> lstTestParamOids = lstGroupTest.Where(i => i.TestMethod != null).GroupBy(p => new { p.TestMethod.MatrixName.MatrixName, p.TestMethod.TestName }).Select(g => g.FirstOrDefault().TestMethod.Oid).ToList();
                                            if (lstTestParamOids != null && lstTestParamOids.Count > 0)
                                            {
                                                foreach (Guid oid in lstTestParamOids)
                                                {
                                                    TestMethod objTest = os.GetObjectByKey<TestMethod>(oid);
                                                    InvoicingAnalysisCharge newObj = os.CreateObject<InvoicingAnalysisCharge>();
                                                    newObj.Test = objTest;
                                                    newObj.Matrix = objTest.MatrixName;
                                                    newObj.JobID = strJobID;
                                                    newObj.IsGroup = true;
                                                    bool isQuotes = false;
                                                    if (objSamplechin.TAT != null)
                                                    {
                                                        TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[IsGroup] = True And  [Matrix.MatrixName] = ?  And [Test.TestName] = ? And Contains([TAT], ?)", objTest.MatrixName.MatrixName, objTest.TestName, objSamplechin.TAT.TAT));
                                                        if (testPriceSurcharges != null)
                                                        {
                                                            newObj.Priority = testPriceSurcharges.Priority;
                                                            newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSamplechin.TAT.Oid);
                                                            newObj.PriceCode = testPriceSurcharges.PriceCode;
                                                            if (testPriceSurcharges.Priority != null)
                                                            {
                                                                objInVoice.Priority = cv.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.Setting.Priority>(testPriceSurcharges.Priority.Oid);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            newObj.TAT = os.GetObjectByKey<TurnAroundTime>(objSamplechin.TAT.Oid);
                                                        }
                                                    }
                                                    if (objSamplechin != null && objSamplechin.QuoteID != null)
                                                    {
                                                        AnalysisPricing objAnaprice = os.FindObject<AnalysisPricing>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And [Test.TestName] = ?  And [CRMQuotes]=?", objTest.MatrixName.MatrixName, objTest.TestName, objSamplechin.QuoteID));
                                                        if (objAnaprice != null)
                                                        {
                                                            newObj.UnitPrice = objAnaprice.TotalTierPrice;
                                                            newObj.TierPrice = objAnaprice.TotalTierPrice;
                                                            newObj.ChargeType = objAnaprice.ChargeType;
                                                            newObj.Prep1Price = objAnaprice.Prep1Charge;
                                                            newObj.Prep2Price = objAnaprice.Prep2Charge;
                                                            newObj.Parameter = objAnaprice.Parameter;
                                                            newObj.Discount = Convert.ToInt32(objAnaprice.Discount);
                                                            newObj.TierNo = objAnaprice.TierNo;
                                                            newObj.From = objAnaprice.From;
                                                            newObj.To = objAnaprice.To;
                                                            newObj.Description = objAnaprice.TestDescription;
                                                            isQuotes = true;
                                                        }
                                                    }
                                                    if (isQuotes == false)
                                                    {
                                                        TestPriceSurcharge testPriceSurcharges = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[IsGroup] = True And  [Matrix.MatrixName] = ?  And [Test.TestName] = ? And Contains([TAT], ?)", objTest.MatrixName.MatrixName, objTest.TestName, objSamplechin.TAT.TAT));
                                                        if (testPriceSurcharges != null)
                                                        {
                                                            if (testPriceSurcharges.SurchargePrice != null)
                                                            {
                                                                TestPriceSurcharge testPriceIsRegular = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And  [Test.TestName] = ? And [Priority.IsRegular] = True", objTest.MatrixName.MatrixName, objTest.TestName));
                                                                if (testPriceIsRegular != null && testPriceIsRegular.SurchargePrice != null)
                                                                {
                                                                    newObj.UnitPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                                }
                                                                newObj.TierPrice = (decimal)testPriceSurcharges.SurchargePrice;
                                                            }
                                                            newObj.Parameter = "Allparam";
                                                        }
                                                        else
                                                        {
                                                            TestPriceSurcharge testPriceIsRegular = os.FindObject<TestPriceSurcharge>(CriteriaOperator.Parse("[Matrix.MatrixName] = ? And  [Test.TestName] = ? And [Priority.IsRegular] = True", objTest.MatrixName.MatrixName, objTest.TestName));
                                                            if (testPriceIsRegular != null)
                                                            {
                                                                List<string> lstTAT = testPriceIsRegular.TAT.Split(';').ToList();
                                                                int MaxTAT = os.GetObjects<TurnAroundTime>(new InOperator("TAT", lstTAT)).ToList().Select(i => i.Count).Max();
                                                                if (objSamplechin.TAT.Count > MaxTAT)
                                                                {
                                                                    if (testPriceIsRegular != null && testPriceIsRegular.SurchargePrice != null)
                                                                    {
                                                                        newObj.UnitPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                                    }
                                                                    newObj.TierPrice = (decimal)testPriceIsRegular.SurchargePrice;
                                                                    newObj.Parameter = "Allparam";
                                                                }
                                                            }
                                                        }
                                                    }
                                                    ((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.Add(newObj);


                                                }
                                            }
                                        }
                                    }
                                    foreach (InvoicingAnalysisCharge objAnalysisCahrge in (((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.List.Cast<InvoicingAnalysisCharge>().ToList()))
                                    {
                                        if (objAnalysisCahrge.Discount > 0)
                                        {
                                            var discutamt = objAnalysisCahrge.TierPrice * (Convert.ToDecimal(objAnalysisCahrge.Discount) / 100);
                                            objAnalysisCahrge.Amount = objAnalysisCahrge.fQty * (objAnalysisCahrge.TierPrice - discutamt);
                                        }
                                        else if (objAnalysisCahrge.Discount < 0)
                                        {
                                            var discoamt = objAnalysisCahrge.TierPrice * (Convert.ToDecimal(objAnalysisCahrge.Discount) / 100);
                                            objAnalysisCahrge.Amount = ((objAnalysisCahrge.TierPrice) - (discoamt)) * objAnalysisCahrge.fQty;
                                        }
                                        else
                                        {
                                            objAnalysisCahrge.Amount = objAnalysisCahrge.fQty * objAnalysisCahrge.TierPrice;
                                        }
                                    }
                                }
                                ((ListView)liInvoicingAnalysisCharges.InnerView).Refresh();
                                decimal AnalysisChargeFinalAmount = Convert.ToDecimal(((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.List.Cast<InvoicingAnalysisCharge>().ToList().Sum(i => i.Amount));
                                decimal AnalysisChargedetailAmount = Convert.ToDecimal(((ListView)liInvoicingAnalysisCharges.InnerView).CollectionSource.List.Cast<InvoicingAnalysisCharge>().ToList().Sum(i => i.TierPrice * i.fQty));
                                decimal itemCahargeFinalAmount = 0;
                                decimal itemCahargeDetailAmount = 0;
                                if (liInvoicingItemCharges != null && liInvoicingItemCharges.ListView != null)
                                {
                                    itemCahargeFinalAmount = Convert.ToDecimal(((ListView)liInvoicingItemCharges.ListView).CollectionSource.List.Cast<InvoicingItemCharge>().ToList().Sum(i => i.FinalAmount));
                                    itemCahargeDetailAmount = Convert.ToDecimal(((ListView)liInvoicingItemCharges.ListView).CollectionSource.List.Cast<InvoicingItemCharge>().ToList().Sum(i => i.Qty * i.NpUnitPrice));
                                }
                                decimal FinalAmount = AnalysisChargeFinalAmount + itemCahargeFinalAmount;
                                decimal detailAmount = AnalysisChargedetailAmount + itemCahargeDetailAmount;
                                objInVoice.DetailedAmount = detailAmount;
                                objInVoice.Amount = FinalAmount;
                                if (detailAmount > FinalAmount)
                                {
                                    objInVoice.DiscountAmount = (detailAmount) - (FinalAmount);
                                    objInVoice.Discount = Convert.ToInt32(100 * ((detailAmount - FinalAmount) / detailAmount));
                                }
                                else if (detailAmount < FinalAmount)
                                {
                                    decimal disamt = FinalAmount - detailAmount;
                                    if (disamt != 0)
                                    {
                                        objInVoice.DiscountAmount = disamt;
                                        objInVoice.Discount = Convert.ToInt32(((disamt) / detailAmount) * 100);
                                    }
                                }
                                else if (detailAmount == FinalAmount)
                                {
                                    objInVoice.DiscountAmount = 0;
                                    objInVoice.Discount = 0;
                                }
                                ((DetailView)cv).Refresh();
                                ((DetailView)cv).RefreshDataSource();
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SetCalendarView(ASPxDateTimePropertyEditor propertyEditor)
        {
            ASPxDateEdit dateEdit = propertyEditor.Editor;
            dateEdit.PickerDisplayMode = DatePickerDisplayMode.ScrollPicker;
        }

        private void RuleSet_CustomNeedToValidateRule(object sender, DevExpress.Persistent.Validation.CustomNeedToValidateRuleEventArgs e)
        {
            if (e.Rule.Id == "JobID")
            {
                JobIDFormat objformat = View.ObjectSpace.FindObject<JobIDFormat>(CriteriaOperator.Parse(""));
                if (objformat != null && objformat.Dynamic == true)
                {
                    e.NeedToValidateRule = false;
                    e.Handled = !e.NeedToValidateRule;
                }
            }
        }

        private void View_Closed(object sender, EventArgs e)
        {
            try
            {
                if (Application != null && Application.MainWindow != null && Application.MainWindow.View != null && Application.MainWindow.View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                {
                    Samplecheckin samplecheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                    if (samplecheckin != null)
                    {
                        int sampleno = Application.MainWindow.View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", samplecheckin.Oid));
                        if (sampleno == 0)
                        {
                            samplecheckin.NoOfSamples = 1;
                        }
                        else
                        {
                            samplecheckin.NoOfSamples = Convert.ToUInt16(sampleno);
                        }
                        //Application.MainWindow.View.ObjectSpace.CommitChanges();
                        //Application.MainWindow.View.ObjectSpace.Refresh();
                    }
                    Application.MainWindow.View.RefreshDataSource();
                    Application.MainWindow.View.ObjectSpace.Refresh();
                    SRInfo.IsSamplePopupClose = true;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void CurrentRequestWindow_PagePreRender(object sender, EventArgs e)
        {
            ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
            if (gridListEditor != null)
            {
                gridListEditor.Grid.FillContextMenuItems += GridView_FillContextMenuItems;
                gridListEditor.Grid.SettingsContextMenu.Enabled = true;
                gridListEditor.Grid.SettingsContextMenu.EnableRowMenu = DevExpress.Utils.DefaultBoolean.True;
            }
        }

        private void SaveAndNewAction_Executing(object sender, CancelEventArgs e)
        {
            try
            {
                if (View.ObjectSpace.ModifiedObjects.Count > 0)
                {
                    View.ObjectSpace.CommitChanges();
                }
                Save();
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                {
                    Samplecheckin objSampleCheckIn = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                    if (!SRInfo.isNoOfSampleDisable)
                    {
                        InsertSamplesInSampleLogin();
                    }
                }
            }
            catch (Exception ex)
            {
                e.Cancel = true;
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Collector_ValueRead(object sender, EventArgs e)
        {
            try
            {
                Samplecheckin obj = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                if (obj != null && obj.ClientName != null)
                {
                    if (collector.Frame != null)
                    {
                        collector.Frame.GetController<NewObjectViewController>().NewObjectAction.Active["asd"] = true;
                    }
                }
                else
                {
                    if (collector.Frame != null)
                    {
                        collector.Frame.GetController<NewObjectViewController>().NewObjectAction.Active["asd"] = false;
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void View_Closing(object sender, EventArgs e)
        {
            try
            {
                if (View.Id == "SampleRegistration_SampleLogin")
                {
                    if (Application.MainWindow.View != null && Application.MainWindow.View.ObjectTypeInfo != null && Application.MainWindow.View.ObjectTypeInfo.Type == typeof(Samplecheckin))
                    {
                        //Samplecheckin objSamplecheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                        //if(objSamplecheckin!=null)
                        //{
                        //    int sampleno = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", objSamplecheckin.Oid));
                        //    if(sampleno==0)
                        //    {
                        //        objSamplecheckin.NoOfSamples = 1;
                        //    }
                        //}
                        //Application.MainWindow.View.Refresh();
                        //Application.MainWindow.View.ObjectSpace.Refresh();
                    }

                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void NewObjectAction_Executed(object sender, ActionBaseEventArgs e)
        {
            try
            {
                if (View.Id == "Contact_ListView_Invoice" && e.ShowViewParameters.CreatedView.CurrentObject != null)
                {
                    Contact newcon = (Contact)e.ShowViewParameters.CreatedView.CurrentObject;
                    newcon.IsReport = false;
                    newcon.IsInvoice = true;
                }
                else if (View.Id == "Contact_ListView_Report" && e.ShowViewParameters.CreatedView.CurrentObject != null)
                {
                    Contact newcon = (Contact)e.ShowViewParameters.CreatedView.CurrentObject;
                    newcon.IsReport = true;
                    newcon.IsInvoice = false;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void NotificationContentTemplateView_ControlsCreated(object sender, EventArgs e)
        {
            try
            {
                //if (View.Id == "eNotificationContentTemplate_DetailView")
                //{
                //    foreach (ViewItem item in ((DetailView)View).Items.Where(i => i.Id == "EMailPassword"))
                //    {
                //        if (item.GetType() == typeof(ASPxStringPropertyEditor))
                //        {
                //            ASPxStringPropertyEditor propertyEditor = item as ASPxStringPropertyEditor;
                //            if (propertyEditor != null && propertyEditor.Editor != null)
                //            {
                //                ((ASPxTextBox)propertyEditor.Editor).Password = true;
                //            }
                //        }
                //    }
                //    eNotificationContentTemplate crtobj = (eNotificationContentTemplate)View.CurrentObject;
                //    if(crtobj != null)
                //    {
                //        eNotificationContentTemplate chkobj = ObjectSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[Oid] = ?", crtobj.Oid));
                //        if(chkobj != null)
                //        {
                //            crtobj.EMailPassword = chkobj.EMailPassword;
                //        }
                //    }
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SaveAction_Executing(object sender, CancelEventArgs e)
        {
            try
            {
                //if (View != null && View.Id == "eNotificationContentTemplate_DetailView")
                //{
                //    eNotificationContentTemplate objENCT = (eNotificationContentTemplate)View.CurrentObject;
                //    if (objENCT.ContentType != TypeofContent.None)
                //    {
                //        IObjectSpace os = Application.CreateObjectSpace();
                //        CriteriaOperator cs = CriteriaOperator.Parse("([SampleCheckin] Is  Null AND [ContentType] = ?) OR ([Reporting] Is Null And [ContentType] = ?) OR ([Invoice] Is Null And [ContentType] = ?)", objENCT.ContentType);
                //        eNotificationContentTemplate objent = os.FindObject<eNotificationContentTemplate>(cs);
                //        if (objent != null && objent.ContentType == objENCT.ContentType)
                //        {
                //            e.Cancel = true;
                //            string str = objent.ContentType.ToString();
                //            Application.ShowViewStrategy.ShowMessage("Created content already exist" + " - " + str, InformationType.Error, timer.Seconds, InformationPosition.Top);
                //        }
                //    }
                //    else
                //    {
                //        e.Cancel = true;
                //        Application.ShowViewStrategy.ShowMessage("Content type should not be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                //    }
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Grid_CustomProcessSelectedItem(object sender, CustomProcessListViewSelectedItemEventArgs e)
        {

            try
            {
                e.Handled = true;
                if (View.Id == "DataSource_ListView")
                {
                    //foreach (DataSource objDS in e.InnerArgs.SelectedObjects)
                    //{
                    //    eNotificationContentTemplate objENCT = Application.MainWindow.View.CurrentObject as eNotificationContentTemplate;
                    //    objENCT.Body = objENCT.Body + objDS.DataSourceName;

                    //}
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }

        }

        private void DeleteAction_Executing(object sender, CancelEventArgs e)
        {
            try
            {
                if (View.SelectedObjects.Count > 0)
                {
                    bool IsSingoff = false;
                    bool IsPreMethod = false;
                    DefaultSetting objNavigationView = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));
                    DefaultSetting objSamplePreparation = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("[NavigationItemNameID]='SamplePreparationRootNode'"));
                    if (objNavigationView != null && objNavigationView.Select)
                    {
                        if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                        {
                            foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objsmpllogin in View.SelectedObjects)
                            {
                                IList<SampleParameter> objsmplpara = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ? And [SignOff] = True", objsmpllogin.Oid));
                                if (objsmplpara != null && objsmplpara.Count > 0)
                                {
                                    IsSingoff = true;
                                    break;
                                }
                            }
                            if (IsSingoff == true)
                            {
                                e.Cancel = true;
                                Application.ShowViewStrategy.ShowMessage("Selected sampleID signedoff could not delete", InformationType.Warning, timer.Seconds, InformationPosition.Top);
                            }
                        }
                        if (View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                        {
                            foreach (SampleParameter objsmppara in View.SelectedObjects)
                            {
                                if (objsmppara.SignOff == true)
                                {
                                    IsSingoff = true;
                                    break;
                                }
                            }
                            if (IsSingoff == true)
                            {
                                e.Cancel = true;
                                Application.ShowViewStrategy.ShowMessage("Selected sampleID signedoff could not delete", InformationType.Warning, timer.Seconds, InformationPosition.Top);
                            }
                        }
                    }
                    else if (objSamplePreparation != null && objSamplePreparation.Select)
                    {
                        if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                        {
                            foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objsmpllogin in View.SelectedObjects)
                            {
                                IList<SampleParameter> objSamples = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", objsmpllogin.Oid));
                                IList<SampleBottleAllocation> objSamplesTransfer = View.ObjectSpace.GetObjects<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.Oid] = ?", objsmpllogin.Oid));
                                if (objSamples.FirstOrDefault(i => i.PrepBatchID != null || i.PrepMethodCount > 0) != null)
                                {
                                    Application.ShowViewStrategy.ShowMessage("Already used in samplepreparation cannot be deleted.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    e.Cancel = true;
                                    return;
                                }
                                else if (objSamplesTransfer.FirstOrDefault(i => i.SampleTransferStatus == SamplingTransferStatus.Submitted) != null)
                                {
                                    Application.ShowViewStrategy.ShowMessage("Already used in sampletransfer cannot be deleted.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    e.Cancel = true;
                                    return;
                                }
                            }

                        }
                        if (View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                        {
                            foreach (SampleParameter objsmppara in View.SelectedObjects)
                            {
                                if (objsmppara.PrepBatchID != null || objsmppara.PrepMethodCount > 0)
                                {
                                    IsPreMethod = true;
                                    break;
                                }
                            }
                            if (IsPreMethod == true)
                            {
                                e.Cancel = true;
                                Application.ShowViewStrategy.ShowMessage("Already used in samplepreparation cannot be deleted.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                            }
                        }
                    }
                }
                else
                {
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void DeleteAction_Executed(object sender, ActionBaseEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                {
                    Frame.GetController<RefreshController>().RefreshAction.DoExecute(); 
                }
                else if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    int sampleno = 1;
                    foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSL in ((ListView)View).CollectionSource.List.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().OrderBy(i => i.SampleNo))
                    {
                        objSL.SampleNo = sampleno;
                        sampleno = sampleno + 1;
                    }

                }
                //if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                //{
                //    ShowNavigationController = Frame.GetController<ShowNavigationItemController>();
                //    foreach (ChoiceActionItem parent in ShowNavigationController.ShowNavigationItemAction.Items)
                //    {
                //        if (parent.Id == "SampleManagement")
                //        {
                //            foreach (ChoiceActionItem child in parent.Items)
                //            {
                //                if (child.Id == "SampleRegistration")
                //                {
                //                    //int intOrderValue = 0;
                //                    IObjectSpace objectSpace = Application.CreateObjectSpace();
                //                    var count = objectSpace.GetObjectsCount(typeof(Samplecheckin), CriteriaOperator.Parse("[Status] = 'PendingSigningOff' Or [Status] = 'PartiallySignedOff'"));
                //                    var cap = child.Caption.Split(new string[] { " (" }, StringSplitOptions.None);
                //                    if (count > 0)
                //                    {
                //                        child.Caption = cap[0] + " (" + count + ")";
                //                        break;
                //                    }
                //                    else
                //                    {
                //                        child.Caption = cap[0];
                //                    }
                //                }
                //            }
                //        }
                //    }
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SaveAndCloseAction_Executing(object sender, CancelEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff")
                {
                    if (View.ObjectSpace.ModifiedObjects.Count > 0)
                    {
                        View.ObjectSpace.CommitChanges();
                    }
                    Save();
                    if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                    {
                        Samplecheckin objSampleCheckIn = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                        if (!SRInfo.isNoOfSampleDisable)
                        {
                            InsertSamplesInSampleLogin();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                e.Cancel = true;
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SaveAction_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff")
                {
                    Save();
                    if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                    {
                        Samplecheckin objSampleCheckIn = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                        if (!SRInfo.isNoOfSampleDisable)
                        {
                            InsertSamplesInSampleLogin();
                            foreach (ViewItem item in ((DetailView)View).Items.Where(i => i.Id == "NoOfSamples"))
                            {
                                if (item.GetType() == typeof(ASPxIntPropertyEditor))
                                {
                                    ASPxIntPropertyEditor propertyEditor = item as ASPxIntPropertyEditor;
                                    if (propertyEditor != null && propertyEditor.Editor != null)
                                    {
                                        List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSamples = View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("JobID.Oid=?", objSampleCheckIn.Oid)).ToList();
                                        if (lstSamples.Count > 0)
                                        {
                                            propertyEditor.Editor.ForeColor = Color.Black;
                                            propertyEditor.Editor.BackColor = Color.White;
                                            propertyEditor.AllowEdit.SetItemValue("stat", false);
                                            SRInfo.isNoOfSampleDisable = true;
                                        }
                                    }
                                }
                            }
                        }
                        int sampleno = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", objSampleCheckIn.Oid));
                        Sample.Caption = "Samples" + "(" + sampleno + ")";
                        Application.MainWindow.View.ObjectSpace.Refresh();
                        Samplecheckin obj = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                        if (obj.ProjectID != null)
                            obj.ProjectLocation = obj.ProjectID.ProjectLocation;
                        ASPxGridLookupPropertyEditor PeProject = ((DetailView)View).FindItem("ProjectID") as ASPxGridLookupPropertyEditor;
                        if (PeProject != null && PeProject.CollectionSource != null)
                        {
                            if (obj != null && obj.ClientName != null)
                            {
                                PeProject.CollectionSource.Criteria["ProjectID"] = CriteriaOperator.Parse("[customername.Oid] = ? ", obj.ClientName.Oid);
                            }
                            else
                            {
                                PeProject.CollectionSource.Criteria["ProjectID"] = CriteriaOperator.Parse("1=2");
                            }
                        }
                    }
                }
                Samplecheckin objs = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                Notes notes = ObjectSpace.FindObject<Notes>(CriteriaOperator.Parse("[Samplecheckin] = ? AND [NoteSource] = 'Sample Registration'", objs.Oid));
                if (notes != null)
                {
                    notes.SourceID = objs.JobID;
                    notes.NameSource = objs.NPTest;
                    ObjectSpace.CommitChanges();
                }

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }

        }
        private void FilePropertyEditor_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                FileDataEdit FileControl = ((FileDataPropertyEditor)sender).Editor;
                if (FileControl != null)
                    FileControl.UploadControlCreated += control_UploadControlCreated;
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void control_UploadControlCreated(object sender, EventArgs e)
        {
            try
            {
                ASPxUploadControl FileUploadControl = ((FileDataEdit)sender).UploadControl;
                //FileUploadControl.ValidationSettings.AllowedFileExtensions = new String[] { ".doc", ".docx" };
                FileUploadControl.ValidationSettings.AllowedFileExtensions = new String[] { ".docx" };
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SampleRegistrationDateFilterAction_SelectedItemChanged(object sender, EventArgs e)
        {
            try
            {
                if (View != null && (View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_ListView_SampleReceiptNotification" || View.Id == "Samplecheckin_ListView_SampleReceiptNotification_History"))
                {
                    DateTime srDateFilter = DateTime.MinValue;
                    if (sampleRegistrationDateFilterAction != null && sampleRegistrationDateFilterAction.SelectedItem != null)
                    {
                        if (sampleRegistrationDateFilterAction.SelectedItem.Id == "1M")
                        {
                            srDateFilter = DateTime.Today.AddMonths(-1);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "3M")
                        {
                            srDateFilter = DateTime.Today.AddMonths(-3);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "6M")
                        {
                            srDateFilter = DateTime.Today.AddMonths(-6);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "1Y")
                        {
                            srDateFilter = DateTime.Today.AddYears(-1);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "2Y")
                        {
                            srDateFilter = DateTime.Today.AddYears(-2);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "5Y")
                        {
                            srDateFilter = DateTime.Today.AddYears(-5);
                        }
                    }
                    if (srDateFilter != DateTime.MinValue)
                    {

                        ((ListView)View).CollectionSource.Criteria["Filter"] = CriteriaOperator.Parse("CreatedDate>=?", srDateFilter);
                    }
                    else
                    {
                        ((ListView)View).CollectionSource.Criteria.Remove("Filter");
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void BtnImportSamples_Executed(object sender, ActionBaseEventArgs e)
        {
            try
            {
                //Application.ShowViewStrategy.ShowMessage(@"COCSettings has been imported successfully.", InformationType.Success, timer.Seconds, InformationPosition.Top);
                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "COCSettingsImportSuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void ObjectSpace_Committed(object sender, EventArgs e)
        {
            try
            {
                if (View != null && (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff") && View.CurrentObject != null)
                {
                    //Samplecheckin objSample = (Samplecheckin)View.CurrentObject;
                    //if (objSample != null && objSample.IndoorInspection == true)
                    //{
                    //    IObjectSpace os = Application.CreateObjectSpace();
                    //    IndoorInspection objIndoorInspection = os.FindObject<IndoorInspection>(CriteriaOperator.Parse("[JobID.JobID] = ?", objSample.JobID));

                    //    if (objIndoorInspection == null)
                    //    {
                    //        objIndoorInspection = os.CreateObject<IndoorInspection>();
                    //        objIndoorInspection.JobID = os.GetObject<Samplecheckin>(objSample);
                    //        objIndoorInspection.Status = Modules.BusinessObjects.SampleManagement.Enum.InspectionStatus.PendingEntry;
                    //        if (!string.IsNullOrEmpty(objSample.Manufacturer))
                    //        {
                    //            Modules.BusinessObjects.ICM.Manufacturer objManufacturer = os.FindObject<Modules.BusinessObjects.ICM.Manufacturer>(CriteriaOperator.Parse("[ManufacturerName] = ? And [ManufacturerAddress] = ?", objSample.Manufacturer, objSample.ManufacturerAddress));
                    //            if (objManufacturer == null)
                    //            {
                    //                IObjectSpace manufacturerObjectSpace = Application.CreateObjectSpace();
                    //                objManufacturer = manufacturerObjectSpace.CreateObject<Modules.BusinessObjects.ICM.Manufacturer>();
                    //                objManufacturer.ManufacturerName = objSample.Manufacturer;
                    //                objManufacturer.ManufacturerAddress = objSample.ManufacturerAddress;
                    //                manufacturerObjectSpace.CommitChanges();
                    //            }
                    //            if (objManufacturer != null)
                    //            {
                    //                objIndoorInspection.Manufacturer = os.GetObject<Modules.BusinessObjects.ICM.Manufacturer>(objManufacturer);
                    //            }
                    //        }
                    //        os.CommitChanges();

                    //        if (objSample.SampleQuantity > 0)
                    //        {
                    //            for (int i = 1; i <= objSample.SampleQuantity; i++)
                    //            {
                    //                string strPurifierID = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(IndoorInspectionSamples), CriteriaOperator.Parse("MAX(PurifierSampleID)"), CriteriaOperator.Parse("[JobID.Oid]=?", objIndoorInspection.Oid))) + 1).ToString();
                    //                if (strPurifierID.Length == 1)
                    //                {
                    //                    strPurifierID = "0" + strPurifierID;
                    //                }
                    //                IndoorInspectionSamples objInspectionSamples = os.FindObject<IndoorInspectionSamples>(CriteriaOperator.Parse("[JobID.Oid] = ? And PurifierSampleID = ?", objIndoorInspection.Oid, strPurifierID));
                    //                if (objInspectionSamples == null)
                    //                {
                    //                    objInspectionSamples = os.CreateObject<IndoorInspectionSamples>();
                    //                    objInspectionSamples.JobID = objIndoorInspection;
                    //                    objInspectionSamples.PurifierSampleID = strPurifierID;
                    //                    os.CommitChanges();
                    //                }
                    //            }
                    //        }

                    //        if (objSample != null && objSample.Clauses != null && objSample.Clauses.Count > 0)
                    //        {
                    //            int sortno = os.GetObjectsCount(typeof(ClauseInspection), CriteriaOperator.Parse("[IndoorInspection.Oid] = ?", objIndoorInspection.Oid)); ;
                    //            foreach (ClauseInspectionSettings clause in objSample.Clauses.OrderBy(i => i.sort))
                    //            {
                    //                sortno++;
                    //                ClauseInspection objClause = os.FindObject<ClauseInspection>(CriteriaOperator.Parse("[ClauseSettings.Oid] = ? And [IndoorInspection.Oid] = ?", clause.Oid, objIndoorInspection.Oid));
                    //                if (objClause == null)
                    //                {
                    //                    objClause = os.CreateObject<ClauseInspection>();
                    //                    objClause.ClauseSettings = os.GetObject<ClauseInspectionSettings>(clause);
                    //                    objClause.Clause = clause.Clause;
                    //                    objClause.IndoorInspection = objIndoorInspection;
                    //                    objClause.Conclusion = os.GetObject<ClauseOptions>(clause.Options.FirstOrDefault<ClauseOptions>(i => i.Default == true));
                    //                    objClause.sort = sortno;
                    //                    //if (clause.Options != null && clause.Options.Count > 0)
                    //                    //{
                    //                    //    foreach (ClauseOptions objOption in clause.Options.Where<ClauseOptions>(i => i.Default == true))
                    //                    //    {
                    //                    //        objClause.Options.Add(os.GetObject<ClauseOptions>((ClauseOptions)objOption));
                    //                    //    }
                    //                    //}
                    //                    os.CommitChanges();
                    //                }
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (objSample != null && objSample.Clauses != null && objSample.Clauses.Count > 0)
                    //        {
                    //            int sortno = os.GetObjectsCount(typeof(ClauseInspection), CriteriaOperator.Parse("[IndoorInspection.Oid] = ?", objIndoorInspection.Oid)); ;
                    //            foreach (ClauseInspectionSettings clause in objSample.Clauses.OrderBy(i => i.sort))
                    //            {
                    //                sortno++;
                    //                ClauseInspection objClause = os.FindObject<ClauseInspection>(CriteriaOperator.Parse("[ClauseSettings.Oid] = ? And [IndoorInspection.Oid] = ?", clause.Oid, objIndoorInspection.Oid));
                    //                if (objClause == null)
                    //                {
                    //                    objClause = os.CreateObject<ClauseInspection>();
                    //                    objClause.ClauseSettings = os.GetObject<ClauseInspectionSettings>(clause);
                    //                    objClause.Clause = clause.Clause;
                    //                    objClause.IndoorInspection = objIndoorInspection;
                    //                    objClause.sort = sortno;
                    //                    objClause.Conclusion = os.GetObject<ClauseOptions>(clause.Options.FirstOrDefault<ClauseOptions>(i => i.Default == true));
                    //                }
                    //            }
                    //            os.CommitChanges();
                    //        }
                    //    }
                    //}
                    //if (objSample != null && objSample.OutdoorInspection == true)
                    //{
                    //    IObjectSpace os = Application.CreateObjectSpace();
                    //    OutdoorInspection objOutdoorInspection = os.FindObject<OutdoorInspection>(CriteriaOperator.Parse("[JobID.JobID] = ?", objSample.JobID));

                    //    if (objOutdoorInspection == null)
                    //    {
                    //        objOutdoorInspection = os.CreateObject<OutdoorInspection>();
                    //        objOutdoorInspection.JobID = os.GetObject<Samplecheckin>(objSample);
                    //        os.CommitChanges();

                    //        if (objSample.SampleQuantity > 0)
                    //        {
                    //            for (int i = 1; i <= objSample.SampleQuantity; i++)
                    //            {
                    //                string strSampleNo = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(OutdoorInspectionSamples), CriteriaOperator.Parse("MAX(SampleNo)"), CriteriaOperator.Parse("[OutdoorInspection.Oid]=?", objOutdoorInspection.Oid))) + 1).ToString();
                    //                if (strSampleNo.Length == 1)
                    //                {
                    //                    strSampleNo = "0" + strSampleNo;
                    //                }
                    //                OutdoorInspectionSamples objInspectionSamples = os.FindObject<OutdoorInspectionSamples>(CriteriaOperator.Parse("[OutdoorInspection.Oid] = ? And [SampleNo] = ?", objOutdoorInspection.Oid, strSampleNo));
                    //                if (objInspectionSamples == null)
                    //                {
                    //                    objInspectionSamples = os.CreateObject<OutdoorInspectionSamples>();
                    //                    objInspectionSamples.OutdoorInspection = objOutdoorInspection;
                    //                    objInspectionSamples.SampleNo = strSampleNo;
                    //                    os.CommitChanges();
                    //                }
                    //            }
                    //        }

                    //        if (objSample != null && objSample.Clauses != null && objSample.Clauses.Count > 0)
                    //        {
                    //            foreach (ClauseInspectionSettings clause in objSample.Clauses)
                    //            {
                    //                ClauseInspection objClause = os.FindObject<ClauseInspection>(CriteriaOperator.Parse("[ClauseSettings.Oid] = ? And [OutdoorInspection.Oid] = ?", clause.Oid, objOutdoorInspection.Oid));
                    //                if (objClause == null)
                    //                {
                    //                    objClause = os.CreateObject<ClauseInspection>();
                    //                    objClause.ClauseSettings = os.GetObject<ClauseInspectionSettings>(clause);
                    //                    objClause.Clause = clause.Clause;
                    //                    objClause.OutdoorInspection = objOutdoorInspection;
                    //                    os.CommitChanges();
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                }

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void ObjectSpace_Committing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            try
            {
                var os = Application.CreateObjectSpace();
                Session currentSession = ((XPObjectSpace)(os)).Session;
                if (View.CurrentObject != null && (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"))
                {
                    JobIDFormat objJDformat = os.FindObject<JobIDFormat>(CriteriaOperator.Parse(""));
                    if (objJDformat != null)
                    {
                        Samplecheckin obj = (Samplecheckin)View.CurrentObject;
                        if ((SRInfo.bolNewJobID == true && View.ObjectSpace.IsNewObject(obj)) || string.IsNullOrEmpty(obj.JobID))
                        {
                            var curdateISampling = DateTime.Now.ToString("yyMM");
                            CriteriaOperator filternew = null;
                            if (obj.IsSampling)
                            {
                                filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1 And [IsSampling] = True And [JobID] like  ?+'%'", curdateISampling);
                            }
                            else
                            {
                                filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1 And [IsSampling] <> True");
                            }
                            SRInfo.bolNewJobID = false;
                            if (obj.IsSampling)
                            {
                                CriteriaOperator qcct = CriteriaOperator.Parse("Max(JobID)");
                                var val = ((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), qcct, null);
                                string tempqc = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), qcct, filternew)) + 1).ToString();
                                string strSampling = "32";
                                if (tempqc != "1")
                                {
                                    var predate = tempqc.Substring(0, 4);
                                    if (predate != curdateISampling)
                                    {
                                        tempqc = curdateISampling + strSampling + "01";
                                    }
                                }
                                else
                                {
                                    tempqc = curdateISampling + strSampling + "01";
                                }
                                obj.JobID = strJobID = tempqc;
                            }
                            else
                            {
                                if (objJDformat.Dynamic == true)
                                {
                                    //    SelectedData sproc = currentSession.ExecuteSproc("GetJobID", new OperandValue("Normal"));
                                    //    strJobID = sproc.ResultSet[1].Rows[0].Values[0].ToString();
                                    if (!string.IsNullOrEmpty(obj.JobID))
                                    {
                                        if (obj.JobID != strJobID)
                                        {
                                            var curdate = DateTime.Now;
                                            string strjobid = string.Empty;
                                            int formatlen = 0;

                                            if (objJDformat.Year == YesNoFilter.Yes)
                                            {
                                                strjobid += curdate.ToString(objJDformat.YearFormat.ToString());
                                                formatlen = objJDformat.YearFormat.ToString().Length;
                                            }
                                            if (objJDformat.Month == YesNoFilter.Yes)
                                            {
                                                strjobid += curdate.ToString(objJDformat.MonthFormat.ToUpper());
                                                formatlen = formatlen + objJDformat.MonthFormat.Length;
                                            }
                                            if (objJDformat.Day == YesNoFilter.Yes)
                                            {
                                                strjobid += curdate.ToString(objJDformat.DayFormat);
                                                formatlen = formatlen + objJDformat.DayFormat.Length;
                                            }
                                            CriteriaOperator sam = objJDformat.Prefix == YesNoFilter.Yes ? CriteriaOperator.Parse("Max(SUBSTRING(JobID, " + objJDformat.PrefixValue.ToString().Length + "))") : CriteriaOperator.Parse("Max(SUBSTRING(JobID, 0))");

                                            string tempid = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                                            //CriteriaOperator sam = objJDformat.PrefixValue != null ? CriteriaOperator.Parse("Max(SUBSTRING(JobID, " + objJDformat.PrefixValue.ToString().Length + "))") : CriteriaOperator.Parse("Max(SUBSTRING(JobID, 0))");
                                            //string tempid = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), sam, null)) + 1).ToString();
                                            if (tempid != "1")
                                            {
                                                var predate = tempid.Substring(0, formatlen);
                                                if (predate == strjobid)
                                                {
                                                    if (objJDformat.Prefix == YesNoFilter.Yes)
                                                    {
                                                        if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                        {
                                                            strjobid = objJDformat.PrefixValue + tempid;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        strjobid = tempid;
                                                    }
                                                }
                                                else
                                                {
                                                    if (objJDformat.Prefix == YesNoFilter.Yes)
                                                    {
                                                        if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                        {
                                                            strjobid = objJDformat.PrefixValue + strjobid;
                                                        }
                                                    }
                                                    if (objJDformat.SequentialNumber > 1)
                                                    {
                                                        if (objJDformat.NumberStart > 0)
                                                        {
                                                            strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                                        }
                                                        else
                                                        {
                                                            strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                                        {
                                                            strjobid = strjobid + objJDformat.NumberStart;
                                                        }
                                                        else
                                                        {
                                                            strjobid = strjobid + "1";
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (objJDformat.Prefix == YesNoFilter.Yes)
                                                {
                                                    if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                    {
                                                        strjobid = objJDformat.PrefixValue + strjobid;
                                                    }
                                                }
                                                if (objJDformat.SequentialNumber > 1)
                                                {
                                                    if (objJDformat.NumberStart > 0)
                                                    {
                                                        strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                                    }
                                                    else
                                                    {
                                                        strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                                    }
                                                }
                                                else
                                                {
                                                    if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                                    {
                                                        strjobid = strjobid + objJDformat.NumberStart;
                                                    }
                                                    else
                                                    {
                                                        strjobid = strjobid + "1";
                                                    }
                                                }
                                            }
                                            obj.JobID = strJobID = strjobid;
                                            Application.ShowViewStrategy.ShowMessage("This JobID has been used. The Newly Generated JobID =" + strJobID, InformationType.Success, timer.Seconds, InformationPosition.Top);
                                        }
                                    }
                                    else
                                    {
                                        var curdate = DateTime.Now;
                                        string strjobid = string.Empty;
                                        int formatlen = 0;

                                        if (objJDformat.Year == YesNoFilter.Yes)
                                        {
                                            strjobid += curdate.ToString(objJDformat.YearFormat.ToString());
                                            formatlen = objJDformat.YearFormat.ToString().Length;
                                        }
                                        if (objJDformat.Month == YesNoFilter.Yes)
                                        {
                                            strjobid += curdate.ToString(objJDformat.MonthFormat.ToUpper());
                                            formatlen = formatlen + objJDformat.MonthFormat.Length;
                                        }
                                        if (objJDformat.Day == YesNoFilter.Yes)
                                        {
                                            strjobid += curdate.ToString(objJDformat.DayFormat);
                                            formatlen = formatlen + objJDformat.DayFormat.Length;
                                        }
                                        CriteriaOperator sam = objJDformat.Prefix == YesNoFilter.Yes ? CriteriaOperator.Parse("Max(SUBSTRING(JobID, " + objJDformat.PrefixValue.ToString().Length + "))") : CriteriaOperator.Parse("Max(SUBSTRING(JobID, 0))");
                                        //filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1");
                                        string tempid = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                                        if (tempid != "1")
                                        {
                                            var predate = tempid.Substring(0, formatlen);
                                            if (predate == strjobid)
                                            {
                                                if (objJDformat.Prefix == YesNoFilter.Yes)
                                                {
                                                    if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                    {
                                                        strjobid = objJDformat.PrefixValue + tempid;
                                                    }
                                                }
                                                else
                                                {
                                                    strjobid = tempid;
                                                }
                                            }
                                            else
                                            {
                                                if (objJDformat.Prefix == YesNoFilter.Yes)
                                                {
                                                    if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                    {
                                                        strjobid = objJDformat.PrefixValue + strjobid;
                                                    }
                                                }
                                                if (objJDformat.SequentialNumber > 1)
                                                {
                                                    if (objJDformat.NumberStart > 0)
                                                    {
                                                        strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                                    }
                                                    else
                                                    {
                                                        strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                                    }
                                                }
                                                else
                                                {
                                                    if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                                    {
                                                        strjobid = strjobid + objJDformat.NumberStart;
                                                    }
                                                    else
                                                    {
                                                        strjobid = strjobid + "1";
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            if (objJDformat.Prefix == YesNoFilter.Yes)
                                            {
                                                if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                {
                                                    strjobid = objJDformat.PrefixValue + strjobid;
                                                }
                                            }
                                            if (objJDformat.SequentialNumber > 1)
                                            {
                                                if (objJDformat.NumberStart > 0)
                                                {
                                                    strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                                }
                                                else
                                                {
                                                    strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                                }
                                            }
                                            else
                                            {
                                                if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                                {
                                                    strjobid = strjobid + objJDformat.NumberStart;
                                                }
                                                else
                                                {
                                                    strjobid = strjobid + "1";
                                                }
                                            }
                                        }
                                        obj.JobID = strJobID = strjobid;
                                    }
                                }
                            }
                        }
                        if (obj != null && obj.CustomDueDates.Count > 0)
                        {
                            foreach (CustomDueDate objCDD in obj.CustomDueDates)
                            {
                                if (objCDD.TestMethod.IsGroup == false)
                                {
                                    if (objCDD.TestHold == true)
                                    {
                                        IList<SampleParameter> lstSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.JobID] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                        obj.JobID, objCDD.TestMethod.MatrixName.MatrixName, objCDD.TestMethod.MethodName.MethodNumber, objCDD.TestMethod.TestName));
                                        IList<SampleParameter> lstQCSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[QCBatchID.qcseqdetail.Jobid] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                        obj.JobID, objCDD.TestMethod.MatrixName.MatrixName, objCDD.TestMethod.MethodName.MethodNumber, objCDD.TestMethod.TestName));
                                        lstSP.ToList().ForEach(i => i.TestHold = true);
                                        lstQCSP.ToList().ForEach(i => i.TestHold = true);

                                    }
                                    else
                                    {
                                        if (View.ObjectSpace.ModifiedObjects.OfType<CustomDueDate>().Count(i => i == objCDD) == 1)
                                        {
                                            IObjectSpace objectSpace = Application.CreateObjectSpace();
                                            CustomDueDate check = objectSpace.GetObject<CustomDueDate>(objCDD);
                                            if (check != null && check.TestHold)
                                            {
                                                IList<SampleParameter> lstSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.JobID] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                                obj.JobID, objCDD.TestMethod.MatrixName.MatrixName, objCDD.TestMethod.MethodName.MethodNumber, objCDD.TestMethod.TestName));
                                                IList<SampleParameter> lstQCSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[QCBatchID.qcseqdetail.Jobid] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                                obj.JobID, objCDD.TestMethod.MatrixName.MatrixName, objCDD.TestMethod.MethodName.MethodNumber, objCDD.TestMethod.TestName));
                                                lstSP.ToList().ForEach(i => i.TestHold = false);
                                                lstQCSP.ToList().ForEach(i => i.TestHold = false);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    TestMethod objTm = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup]=true And [MethodName.GCRecord] Is Null", objCDD.TestMethod.TestName));
                                    if (objTm != null)
                                    {
                                        IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", objTm.Oid));
                                        foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                                        {
                                            if (objCDD.TestHold == true)
                                            {
                                                IList<SampleParameter> lstSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.JobID] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                                obj.JobID, objgtm.Tests.MatrixName.MatrixName, objgtm.Tests.MethodName.MethodNumber, objgtm.Tests.TestName));
                                                IList<SampleParameter> lstQCSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[QCBatchID.qcseqdetail.Jobid] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                                obj.JobID, objgtm.Tests.MatrixName.MatrixName, objgtm.Tests.MethodName.MethodNumber, objgtm.Tests.TestName));
                                                lstSP.ToList().ForEach(i => i.TestHold = true);
                                                lstQCSP.ToList().ForEach(i => i.TestHold = true);

                                            }
                                            else
                                            {
                                                if (View.ObjectSpace.ModifiedObjects.OfType<CustomDueDate>().Count(i => i == objCDD) == 1)
                                                {
                                                    IObjectSpace objectSpace = Application.CreateObjectSpace();
                                                    CustomDueDate check = objectSpace.GetObject<CustomDueDate>(objCDD);
                                                    if (check != null && check.TestHold)
                                                    {
                                                        IList<SampleParameter> lstSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.JobID] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                                        obj.JobID, objgtm.Tests.MatrixName.MatrixName, objgtm.Tests.MethodName.MethodNumber, objgtm.Tests.TestName));
                                                        IList<SampleParameter> lstQCSP = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[QCBatchID.qcseqdetail.Jobid] = ? And [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [Testparameter.TestMethod.MethodName.MethodNumber] = ? And [Testparameter.TestMethod.TestName] = ?",
                                                        obj.JobID, objgtm.Tests.MatrixName.MatrixName, objgtm.Tests.MethodName.MethodNumber, objgtm.Tests.TestName));
                                                        lstSP.ToList().ForEach(i => i.TestHold = false);
                                                        lstQCSP.ToList().ForEach(i => i.TestHold = false);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }


                        }
                        if (View != null && View.CurrentObject != null)
                        {
                            IObjectSpace osn = Application.CreateObjectSpace();
                            Samplecheckin objSample = (Samplecheckin)View.CurrentObject;
                            if (objSample != null && objSample.ProjectID != null && objSample.ProjectLocation != null && objSample.ProjectID.ProjectName != null)
                            {
                                Project objPro = osn.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.Oid] =? and ProjectLocation =? and ProjectName =?", objSample.ProjectID.ProjectId, objSample.ClientName.Oid, objSample.ProjectLocation, objSample.ProjectName));
                                if (objPro == null)
                                {
                                    Project objPronew = osn.CreateObject<Project>();
                                    objPronew.ProjectId = objSample.ProjectID.ProjectId;
                                    objPronew.ProjectName = objSample.ProjectID.ProjectName;
                                    objPronew.ProjectLocation = objSample.ProjectLocation;
                                    objPronew.DaysSampleKeeping = objSample.ProjectID.DaysSampleKeeping;
                                    objPronew.customername = osn.GetObjectByKey<Customer>(objSample.ProjectID.customername.Oid);
                                    osn.CommitChanges();
                                    //objSample.ProjectID = View.ObjectSpace.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.CustomerName] =? and ProjectLocation =? and ProjectName =?", objSample.ProjectID.ProjectId, objSample.ClientName.CustomerName, objSample.ProjectLocation, objSample.ProjectName));
                                    objSample.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objPronew.Oid);
                                }
                            }
                            else if (objSample != null && objSample.ProjectID != null && objSample.ProjectLocation != null)
                            {
                                Project objPro = osn.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.Oid] =? and ProjectLocation =?", objSample.ProjectID.ProjectId, objSample.ClientName.Oid, objSample.ProjectLocation));
                                if (objPro == null)
                                {
                                    Project objPronew = osn.CreateObject<Project>();
                                    objPronew.ProjectId = objSample.ProjectID.ProjectId;
                                    objPronew.ProjectName = objSample.ProjectID.ProjectName;
                                    objPronew.ProjectLocation = objSample.ProjectLocation;
                                    objPronew.DaysSampleKeeping = objSample.ProjectID.DaysSampleKeeping;
                                    objPronew.customername = osn.GetObjectByKey<Customer>(objSample.ProjectID.customername.Oid);
                                    osn.CommitChanges();
                                    objSample.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objPronew.Oid);
                                    //objSample.ProjectID = View.ObjectSpace.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.CustomerName] =? and ProjectLocation =?", objSample.ProjectID.ProjectId, objSample.ClientName.CustomerName, objSample.ProjectLocation));
                                }
                                else
                                {
                                    objSample.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objPro.Oid);
                                    //objSample.ProjectID = View.ObjectSpace.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.CustomerName] =? and ProjectLocation =?", objSample.ProjectID.ProjectId, objSample.ClientName.CustomerName, objSample.ProjectLocation));
                                }
                            }
                            else if (objSample != null && objSample.ProjectID != null && objSample.ProjectName != null && !string.IsNullOrEmpty(objSample.ProjectName))
                            {
                                Project objPro = osn.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.Oid] =? and ProjectName =? and ProjectLocation is null", objSample.ProjectID.ProjectId, objSample.ClientName.Oid, objSample.ProjectID.ProjectName));
                                if (objPro == null)
                                {
                                    Project objPronew = osn.CreateObject<Project>();
                                    objPronew.ProjectId = objSample.ProjectID.ProjectId;
                                    objPronew.ProjectName = objSample.ProjectID.ProjectName;
                                    objPronew.ProjectLocation = objSample.ProjectLocation;
                                    objPronew.DaysSampleKeeping = objSample.ProjectID.DaysSampleKeeping;
                                    objPronew.customername = osn.GetObjectByKey<Customer>(objSample.ProjectID.customername.Oid);
                                    osn.CommitChanges();
                                    objSample.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objPronew.Oid);
                                    //objSample.ProjectID = View.ObjectSpace.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.CustomerName] =? and ProjectName =? and ProjectLocation is null", objSample.ProjectID.ProjectId, objSample.ClientName.CustomerName, objSample.ProjectID.ProjectName));
                                }
                                else
                                {
                                    objSample.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objPro.Oid);
                                    // objSample.ProjectID = View.ObjectSpace.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.CustomerName] =? and ProjectName =? and ProjectLocation is null", objSample.ProjectID.ProjectId, objSample.ClientName.CustomerName, objSample.ProjectID.ProjectName));
                                }
                            }
                            else if (objSample != null && objSample.ProjectID != null)
                            {
                                Project objPro = osn.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.Oid] =? and ProjectName is null and ProjectLocation is null", objSample.ProjectID.ProjectId, objSample.ClientName.Oid));
                                if (objPro == null)
                                {
                                    Project objPronew = osn.CreateObject<Project>();
                                    objPronew.ProjectId = objSample.ProjectID.ProjectId;
                                    objPronew.ProjectName = objSample.ProjectID.ProjectName;
                                    objPronew.ProjectLocation = objSample.ProjectLocation;
                                    objPronew.DaysSampleKeeping = objSample.ProjectID.DaysSampleKeeping;
                                    objPronew.customername = osn.GetObjectByKey<Customer>(objSample.ProjectID.customername.Oid);
                                    osn.CommitChanges();
                                    objSample.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objPronew.Oid);
                                    // objSample.ProjectID = View.ObjectSpace.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.CustomerName] =? and ProjectName is null and ProjectLocation is null", objSample.ProjectID.ProjectId, objSample.ClientName.CustomerName, objSample.ProjectID.ProjectName));
                                }
                                else
                                {
                                    objSample.ProjectID = View.ObjectSpace.GetObjectByKey<Project>(objPro.Oid);
                                    // objSample.ProjectID = View.ObjectSpace.FindObject<Project>(CriteriaOperator.Parse("ProjectId = ? and [customername.CustomerName] =? and ProjectName is null and ProjectLocation is null", objSample.ProjectID.ProjectId, objSample.ClientName.CustomerName, objSample.ProjectID.ProjectName));
                                }
                            }
                            else if (objSample != null && objSample.ProjectID == null)
                            {
                                objSample.ProjectID = null;
                            }
                            osn.Dispose();
                        }
                    }
                }
                else if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    // ((XPObjectSpace)View.ObjectSpace).Session.TrackPropertiesModifications = true;
                    //XpoDefault.TrackPropertiesModifications = true;
                    if (View.ObjectSpace.ModifiedObjects.Count > 0)
                    {
                        ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                        bool isSave = true;
                        foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSampleLogIn in View.ObjectSpace.ModifiedObjects.OfType<Modules.BusinessObjects.SampleManagement.SampleLogIn>())
                        {

                            XPMemberInfo hold = objSampleLogIn.ClassInfo.GetMember("Hold");
                            XPMemberInfo sampleHold = objSampleLogIn.ClassInfo.GetMember("SampleStatus");
                            XPMemberInfo subOut = objSampleLogIn.ClassInfo.GetMember("SubOut");
                            XPMemberInfo QCCategory = objSampleLogIn.ClassInfo.GetMember("QCCategory");
                            bool obj2 = PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(hold);
                            bool obj3 = PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(sampleHold);
                            bool isSubOut = PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(subOut);
                            bool isIncludeInvoice = PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(QCCategory);
                            if (PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(hold) == true)
                            {
                                var a = PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyOldValue(sampleHold);
                                IList<SampleParameter> lstSamplles = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSampleLogIn));
                                if (lstSamplles.Count > 0)
                                {
                                    if (lstSamplles.FirstOrDefault(i => !string.IsNullOrEmpty(i.Result) || i.UQABID != null || i.PrepMethodCount > 0) != null)
                                    {
                                        Application.ShowViewStrategy.ShowMessage("Unable to hold the sample since it has been referenced already.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        e.Cancel = true;
                                        gridListEditor.Grid.CancelEdit();
                                        ((ListView)View).SelectedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList().ForEach(i => { i.SampleStatus = null; i.Hold = false; });
                                        //((ListView)View).SelectedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList().ForEach(i => { if (i.Hold != true) { i.SampleHold = null; i.Hold = false; } });

                                        View.Refresh();
                                        //objSampleLogIn.SampleHold = null;
                                        //objSampleLogIn.Hold = false;
                                        //isSave = false;
                                        return;
                                    }
                                    else
                                    {

                                        if (objSampleLogIn.Hold)
                                        {
                                            lstSamplles.ToList().ForEach(i => { i.TestHold = true; });
                                            objSampleLogIn.SampleStatus = null;
                                            objSampleLogIn.Hold = true;
                                        }
                                        else
                                        {
                                            lstSamplles.ToList().ForEach(i => { i.TestHold = false; });
                                            objSampleLogIn.SampleStatus = null;
                                            objSampleLogIn.Hold = false;
                                        }
                                    }
                                }
                            }
                            else if (PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(sampleHold) == true)
                            {

                                IList<SampleParameter> lstSamplles1 = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSampleLogIn));
                                SampleStatus objQC = View.ObjectSpace.FindObject<SampleStatus>(CriteriaOperator.Parse("[Oid]=?", objSampleLogIn.SampleStatus));
                                if (lstSamplles1.FirstOrDefault(i => i.Samplelogin.SampleStatus != null && i.Samplelogin.SampleStatus.Samplestatus == "Hold" && i.Samplelogin.SampleStatus.Hold == true) != null)
                                {

                                    if (lstSamplles1.FirstOrDefault(i => !string.IsNullOrEmpty(i.Result) || i.UQABID != null || i.PrepMethodCount > 0) != null)
                                    {
                                        Application.ShowViewStrategy.ShowMessage("Unable to hold the sample since it has been referenced already.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        e.Cancel = true;
                                        gridListEditor.Grid.CancelEdit();
                                        //objSampleLogIn.SampleHold = null;
                                        ((ListView)View).SelectedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList().ForEach(i => { i.SampleStatus = null; i.Hold = false; });
                                        //((ListView)View).SelectedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList().ForEach(i => { if (i.SampleHold.Samplestatus != "Hold") { i.SampleHold = null; i.Hold = false; } });

                                        View.Refresh();
                                        //objSampleLogIn.Hold = false;
                                        //objSampleLogIn.SampleHold= null;
                                        isSave = false;
                                        return;
                                    }
                                    else
                                    //if(lstSamplles1.FirstOrDefault(i => !string.IsNullOrEmpty(i.Result) || i.UQABID != null || i.PrepMethodCount > 0) == null)
                                    {


                                        lstSamplles1.ToList().ForEach(i => { i.TestHold = true; });
                                        //objSampleLogIn.SampleHold = null;
                                        objSampleLogIn.Hold = true;



                                    }
                                }
                                else if (lstSamplles1.Count == 0 && objSampleLogIn.SampleStatus != null && objSampleLogIn.SampleStatus.Hold == true)
                                {
                                    objSampleLogIn.Hold = true;
                                }
                                else
                                {
                                    lstSamplles1.ToList().ForEach(i => { i.TestHold = false; });
                                    objSampleLogIn.SampleStatus = objQC;
                                    objSampleLogIn.Hold = false;
                                }
                            }
                            if (PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(QCCategory) == true)
                            {
                                if (objSampleLogIn.QCCategory != null && (objSampleLogIn.QCCategory.QCCategoryName == "DOC" || objSampleLogIn.QCCategory.QCCategoryName == "MDL" || objSampleLogIn.QCCategory.QCCategoryName == "PT"))
                                {
                                    objSampleLogIn.ExcludeInvoice = true;
                                }
                                else
                                {
                                    objSampleLogIn.ExcludeInvoice = false;
                                }
                            }
                            if (PersistentBase.GetModificationsStore(objSampleLogIn).GetPropertyModified(subOut))
                            {
                                IList<SampleParameter> lstSubOut = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSampleLogIn));
                                if (lstSubOut.FirstOrDefault(i => !string.IsNullOrEmpty(i.Result) || i.UQABID != null || i.PrepMethodCount > 0) != null)
                                {
                                    Application.ShowViewStrategy.ShowMessage("Unable to hold the sample since it has been referenced already.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    e.Cancel = true;
                                    gridListEditor.Grid.CancelEdit();
                                    ((ListView)View).SelectedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList().ForEach(i => { i.SampleStatus = null; i.Hold = false; });
                                    View.Refresh();
                                    isSave = false;
                                    return;
                                }
                                else
                                {
                                    if (View.ObjectSpace.ModifiedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().FirstOrDefault(i => PersistentBase.GetModificationsStore(i).GetPropertyModified(subOut)) != null)
                                    {
                                        foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSample in View.ObjectSpace.ModifiedObjects.OfType<Modules.BusinessObjects.SampleManagement.SampleLogIn>().Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().Where(i => PersistentBase.GetModificationsStore(i).GetPropertyModified(subOut)))
                                        {
                                            IList<SampleParameter> lstParam = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSample.Oid));
                                            lstParam.ToList().ForEach(i => { i.SubOut = objSample.SubOut; });
                                        }
                                    }
                                }


                                // }


                                //}
                            }
                        }
                        //if (isSave)
                        //{
                        //    View.ObjectSpace.CommitChanges();
                        //}
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void ObjectSpace_ObjectChanged(object sender, ObjectChangedEventArgs e)
        {
            try
            {
                //if (View != null && View.Id == "SampleLogIn_ListView_Copy_SampleRegistration" && e.Object.GetType() == typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn))
                //{

                //    Modules.BusinessObjects.SampleManagement.SampleLogIn smpllogin = (Modules.BusinessObjects.SampleManagement.SampleLogIn)e.Object;
                //    if (smpllogin != null && e.PropertyName == "Qty")
                //    {
                //        if (smpllogin != null && smpllogin.Qty > 0)
                //        {
                //            if (smpllogin != null && smpllogin.Qty == 1)
                //            {
                //                List<SampleBottleAllocation> lstbtlallocation = View.ObjectSpace.GetObjects<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.Oid] = ?", smpllogin.Oid)).ToList();
                //                foreach (SampleBottleAllocation objsmplalloc in lstbtlallocation.Cast<SampleBottleAllocation>().Where(i => i.BottleSet > 1).ToList())
                //                {
                //                    ObjectSpace.Delete(objsmplalloc);
                //                }
                //                ObjectSpace.CommitChanges();
                //                ObjectSpace.Refresh();
                //            }
                //            //else
                //            {
                //                IObjectSpace os = Application.CreateObjectSpace();
                //                List<SampleBottleAllocation> lstsmplalloc = ObjectSpace.GetObjects<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.Oid] = ?", smpllogin.Oid)).ToList();

                //                foreach (SampleBottleAllocation objsmplalloc in lstsmplalloc.Cast<SampleBottleAllocation>().Where(i => i.BottleSet == 1).ToList())
                //                {
                //                    int oldval = Convert.ToInt32(e.OldValue.ToString());
                //                    int newval = Convert.ToInt32(e.NewValue.ToString());
                //                    int diffval = newval - oldval;
                //                    if (objsmplalloc != null && diffval > 0 && objsmplalloc.BottleSet == 1)
                //                    {
                //                        objsmplalloc.Qty = Convert.ToUInt16((objsmplalloc.Qty) + (diffval));
                //                        ObjectSpace.CommitChanges();
                //                        ObjectSpace.Refresh();
                //                    }
                //                    else if (objsmplalloc != null && diffval < 0 && objsmplalloc.BottleSet == 1)
                //                    {
                //                        objsmplalloc.Qty = Convert.ToUInt16((objsmplalloc.Qty) + (diffval));
                //                        ObjectSpace.CommitChanges();
                //                        ObjectSpace.Refresh();
                //                    }
                //                }
                //                if (smpllogin != null && smpllogin.JobID != null && !string.IsNullOrEmpty(smpllogin.JobID.JobID))
                //                {
                //                    IObjectSpace objspac = Application.CreateObjectSpace();
                //                    List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstsmpllogin = ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.JobID] = ?", SRInfo.strJobID)).ToList();
                //                    foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objsmpllogin in lstsmpllogin.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().OrderBy(i => i.SampleID).ToList())
                //                    {
                //                        List<string> lstbtlid = new List<string>();
                //                        List<string> lstbotleid = new List<string>();
                //                        if (objsmpllogin != null)
                //                        {
                //                            List<SampleBottleAllocation> lstbltalloca = ObjectSpace.GetObjects<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.Oid] = ?", objsmpllogin.Oid)).ToList();
                //                            foreach (SampleBottleAllocation objsmpl in lstbltalloca.Cast<SampleBottleAllocation>().OrderBy(i => i.BottleSet).ToList())
                //                            {
                //                                if (objsmpl != null)
                //                                {
                //                                    uint strbottleqty = objsmpl.Qty;
                //                                    string strbtlID = string.Empty;
                //                                    const string letterseql = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                //                                    string valueeql = "";
                //                                    for (int i = 0; i <= strbottleqty - 1; i++)
                //                                    {
                //                                        valueeql = "";
                //                                        if (i >= letterseql.Length)
                //                                            valueeql += letterseql[i / letterseql.Length - 1];

                //                                        valueeql += letterseql[i % letterseql.Length];
                //                                        if (!lstbtlid.Contains(valueeql))
                //                                        {
                //                                            if (String.IsNullOrEmpty(strbtlID))
                //                                            {
                //                                                strbtlID = valueeql;
                //                                            }
                //                                            else
                //                                            {
                //                                                strbtlID = strbtlID + ", " + valueeql;
                //                                            }
                //                                            lstbtlid.Add(valueeql);
                //                                        }
                //                                        else
                //                                        {
                //                                            strbottleqty = strbottleqty + 1;
                //                                            continue;
                //                                        }
                //                                    }
                //                                    objsmpl.BottleID = strbtlID;
                //                                    lstbotleid.Add(strbtlID);
                //                                }
                //                            }
                //                            ObjectSpace.CommitChanges();
                //                            ObjectSpace.Refresh();
                //                        }
                //                    }
                //                }
                //            }
                //        }
                //    }
                //}

                if (base.View != null && e.NewValue != e.OldValue && View.Id != null && View.Id == "Samplecheckin_CustomDueDates_ListView")
                {
                    Samplecheckin objJobID = Application.MainWindow.View.CurrentObject as Samplecheckin;
                    //Samplecheckin objJobID = ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[JobID] = ? AND [GCRecord] is NULL", SRInfo.strJobID));
                    CustomDueDate param = e.Object as CustomDueDate;
                    if (param != null && param.TestHold == true && objJobID != null)
                    {
                        SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ? And [Testparameter.TestMethod.Oid] = ?", objJobID.Oid, param.TestMethod.Oid));
                        if (objsp != null && (objsp.Status > 0 || !string.IsNullOrEmpty(objsp.PrepBatchID)))
                        {

                            Application.ShowViewStrategy.ShowMessage("This test wasn't set on hold", InformationType.Error, timer.Seconds, InformationPosition.Top);
                            param.TestHold = false;
                            return;

                        }
                        else
                        {
                            param.TestHold = true;

                        }
                    }

                }

                if (e.NewValue != e.OldValue && View != null && View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy")
                {
                    //DashboardViewItem TestViewSub = ((NestedFrame)Frame).ViewItem.View.FindItem("TestViewSub") as DashboardViewItem;
                    //ASPxGridListEditor gridListEditor = ((ListView)TestViewSub.InnerView).Editor as ASPxGridListEditor;
                    Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLog = ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(SRInfo.SampleOid);
                    //foreach (Guid objtestparameter in SRInfo.lstTestParameter)
                    //{

                    Testparameter param = e.Object as Testparameter;
                    //Testparameter param = ObjectSpace.GetObjectByKey<Testparameter>(objtestparameter);
                    if (param != null && param.Hold == true)
                    {
                        SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param.Oid, sampleLog.Oid));
                        if (objsp != null && (objsp.Status > 0 || !string.IsNullOrEmpty(objsp.PrepBatchID) || objsp.QCBatchID != null))
                        {
                            //if(objsp.Status > 0 || !string.IsNullOrEmpty(objsp.PrepBatchID))
                            // {
                            Application.ShowViewStrategy.ShowMessage("This test wasn't set on hold", InformationType.Error, timer.Seconds, InformationPosition.Top);
                            param.Hold = false;
                            //gridListEditor.Grid.Selection.UnselectRowByKey(param.Oid);
                            return;
                            //}

                        }
                        else
                        {
                            param.Hold = true;

                        }
                    }
                    //}
                }

                if (base.View != null && e.NewValue != e.OldValue && (base.View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || base.View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"))
                {
                    if (View != null && View.CurrentObject == e.Object)
                    {
                        Samplecheckin objsamplecheckin = (Samplecheckin)e.Object;
                        SRInfo.CurrentJob = objsamplecheckin;
                        if (e.PropertyName != "NoOfSamples")
                        {
                            SRInfo.IsSamplePopupClose = false;
                        }
                        if (e.PropertyName == "ClientName")
                        {
                            if (e.NewValue != null && objsamplecheckin.ClientName != null)
                            {
                                objInfo.ClientName = objsamplecheckin.ClientName.CustomerName;
                                if (objsamplecheckin.Collector != null && objsamplecheckin.Collector.CustomerName != null && objsamplecheckin.Collector.CustomerName.Oid != objsamplecheckin.ClientName.Oid)
                                {
                                    objsamplecheckin.Collector = null;
                                }
                                else if (objsamplecheckin.Collector != null && objsamplecheckin.Collector.CustomerName == null)
                                {
                                    objsamplecheckin.Collector = null;
                                }
                            }
                            else
                            {
                                objInfo.ClientName = null;
                                objsamplecheckin.Collector = null;
                            }
                            objsamplecheckin.ContactName = null;
                            objsamplecheckin.ProjectID = null;
                            ASPxGridLookupPropertyEditor propertyEditor = ((DetailView)View).FindItem("ProjectID") as ASPxGridLookupPropertyEditor;
                            if (objsamplecheckin.ClientName != null)
                            {
                                propertyEditor.CollectionSource.Criteria["ProjectID"] = CriteriaOperator.Parse("[customername.Oid] = ? ", objsamplecheckin.ClientName.Oid);
                            }
                            else
                            {
                                propertyEditor.CollectionSource.Criteria["ProjectID"] = CriteriaOperator.Parse("1=2");
                            }
                            propertyEditor.Refresh();
                            propertyEditor.RefreshDataSource();

                            //objsamplecheckin.Collector = null;
                            //ASPxGridLookupPropertyEditor propertyEditor2 = ((DetailView)View).FindItem("Collector") as ASPxGridLookupPropertyEditor;
                            //if (objsamplecheckin.ClientName != null)
                            //{
                            //    propertyEditor2.CollectionSource.Criteria["Collector"] = CriteriaOperator.Parse("[CustomerName.Oid] = ? ", objsamplecheckin.ClientName.Oid);
                            //}
                            //else
                            //{
                            //    propertyEditor2.CollectionSource.Criteria["Collector"] = CriteriaOperator.Parse("1=2");
                            //}
                            //propertyEditor2.Refresh();
                            //propertyEditor2.RefreshDataSource();

                            //View.Refresh();

                            //Quote ID
                            ASPxGridLookupPropertyEditor peQuoteID = ((DetailView)View).FindItem("QuoteID") as ASPxGridLookupPropertyEditor;
                            if (peQuoteID != null && peQuoteID.GridListEditor.Grid != null && peQuoteID.CollectionSource != null)
                            {
                                peQuoteID.GridListEditor.Grid.KeyFieldName = "Oid";
                                if (objsamplecheckin != null && objsamplecheckin.ClientName != null)
                                {
                                    peQuoteID.CollectionSource.Criteria["QuoteID"] = CriteriaOperator.Parse("[Client.Oid] = ?  and Status =2 and [ExpirationDate] >= ? ", objsamplecheckin.ClientName.Oid, DateTime.Today);
                                }
                                else
                                {
                                    peQuoteID.CollectionSource.Criteria["QuoteID"] = CriteriaOperator.Parse("1=2");
                                }
                                peQuoteID.Refresh();
                                peQuoteID.RefreshDataSource();
                            }
                            //End
                        }
                        else if (e.PropertyName == "ProjectID")
                        {
                            Samplecheckin objCheck = (Samplecheckin)e.Object;
                            if (objCheck.ProjectID != null)
                            {
                                objCheck.ProjectLocation = objCheck.ProjectID.ProjectLocation;
                            }
                            else
                                objCheck.ProjectLocation = String.Empty;
                            ASPxGridLookupPropertyEditor peProjectID = ((DetailView)View).FindItem("ProjectID") as ASPxGridLookupPropertyEditor;
                            peProjectID.RefreshDataSource();
                        }
                        else if (e.PropertyName == "QuoteID")
                        {
                            if (objsamplecheckin != null && objsamplecheckin.QuoteID != null && objsamplecheckin.QuoteID.ProjectID != null)
                            {
                                objsamplecheckin.ProjectID = objsamplecheckin.QuoteID.ProjectID;
                            }
                            if (objsamplecheckin != null && objsamplecheckin.QuoteID != null && objsamplecheckin.QuoteID.TAT != null)
                            {
                                objsamplecheckin.TAT = objsamplecheckin.QuoteID.TAT;
                            }
                            if (objsamplecheckin != null && objsamplecheckin.QuoteID != null && objsamplecheckin.QuoteID != null)
                            {
                                //List<AnalysisPricing> lstanalysisprice = View.ObjectSpace.GetObjects<AnalysisPricing>(CriteriaOperator.Parse("[CRMQuotes.Oid] = ? and SampleMatrix is not null", objsamplecheckin.QuoteID.Oid)).ToList();

                                //foreach (VisualMatrix objVM in lstanalysisprice.Select(s => s.SampleMatrix).Distinct().ToList())
                                //{
                                //    objsamplecheckin.SampleMatrixes.Add(objVM);
                                //    if (objsamplecheckin.SampleMatries == null)
                                //        objsamplecheckin.SampleMatries = objVM.Oid.ToString();
                                //    else
                                //        objsamplecheckin.SampleMatries = objsamplecheckin.SampleMatries + ";" + objVM.Oid.ToString();
                                //}
                            }

                        }
                        else if (e.PropertyName == "NPTest")
                        {
                            Samplecheckin objTask = (Samplecheckin)e.Object;
                            ////if (!string.IsNullOrEmpty(objTask.SampleMatries) && objTask.NPTest != null && e.OldValue != null)
                            ////{
                            ////    IObjectSpace os = Application.CreateObjectSpace();
                            ////    string[] newarrtest = objTask.SampleMatries.Split(';');
                            ////    string[] oldarrtest = e.OldValue.ToString().Split(';');
                            ////    foreach (string strtest in oldarrtest.ToList())
                            ////    {
                            ////        if (!newarrtest.Contains(strtest))
                            ////        {
                            ////            string[] strtestarr = strtest.Split('_');
                            ////            IList<SampleParameter> lstsmpllogin = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ? And And ", objTask.Oid, strtestarr[0], strtestarr[1])).ToList();
                            ////            if (lstsmpllogin != null && lstsmpllogin.Count > 0)
                            ////            {
                            ////                TestMethod objtest = os.FindObject<TestMethod>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strtest)));
                            ////                if (objtest != null)
                            ////                {
                            ////                    string msg = objtest.TestName + " test already linked with samplelogin couldn't be removed";
                            ////                    Application.ShowViewStrategy.ShowMessage(msg, InformationType.Error, timer.Seconds, InformationPosition.Top);
                            ////                    IObjectSpace ossmplchk = Application.CreateObjectSpace();
                            ////                    //objsamplecheckin.SampleMatries = e.OldValue.ToString();
                            ////                    Samplecheckin objsc = View.ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", objsamplecheckin.Oid));
                            ////                    if (objsc != null)
                            ////                    {
                            ////                        objsc.NPTest = e.OldValue.ToString();
                            ////                        View.ObjectSpace.CommitChanges();
                            ////                        View.ObjectSpace.Refresh();
                            ////                        View.RefreshDataSource();
                            ////                        return;
                            ////                    }
                            ////                }
                            ////            }
                            ////        }
                            ////    }
                            ////}
                            if (!string.IsNullOrEmpty(objTask.NPTest) && !string.IsNullOrEmpty(objTask.SampleMatries))
                            {
                                IObjectSpace os = Application.CreateObjectSpace();
                                HttpContext.Current.Session["Test"] = objTask.NPTest;
                                if (HttpContext.Current.Session["Test"] != null)
                                {
                                    List<VisualMatrix> lstVM = new List<VisualMatrix>();
                                    foreach (string strMatrix in objTask.SampleMatries.Split(';'))
                                    {
                                        VisualMatrix objSM = ObjectSpace.GetObjectByKey<VisualMatrix>(new Guid(strMatrix));
                                        if (objSM != null)
                                        {
                                            lstVM.Add(objSM);
                                        }
                                    }
                                    //CustomDueDate cdd = View.CurrentObject as CustomDueDate;
                                    string[] TestOid = HttpContext.Current.Session["Test"].ToString().Split(new string[] { ";" }, StringSplitOptions.None);
                                    if (objSCInfo.lstTestOid != null && objSCInfo.lstTestOid.Count > 0)
                                    {
                                        objSCInfo.lstTestOid.Clear();
                                    }

                                    if (TestOid != null && TestOid.Count() > 0)
                                    {
                                        foreach (string strTest in TestOid)
                                        {
                                            List<string> lstTestName = strTest.Split('|').ToList();
                                            if (lstTestName.Count == 1)
                                            {
                                                //COCSettings Form Testname split
                                                lstTestName = strTest.Split('_').ToList();
                                            }
                                            if (lstTestName.Count == 2)
                                            {
                                                IList<TestMethod> lstTests = ObjectSpace.GetObjects<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [MethodName.MethodNumber] = ? And [MethodName.GCRecord] Is Null ", lstTestName[0], lstTestName[1]));
                                                if (objSCInfo.lstTestOid == null)
                                                {
                                                    objSCInfo.lstTestOid = new List<Guid>();
                                                    foreach (TestMethod obj in lstTests.ToList())
                                                    {
                                                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                                                        {
                                                            objSCInfo.lstTestOid.Add(obj.Oid);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (TestMethod obj in lstTests.ToList())
                                                    {
                                                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                                                        {
                                                            objSCInfo.lstTestOid.Add(obj.Oid);
                                                        }
                                                    }
                                                }
                                            }
                                            else if (lstTestName.Count == 1)
                                            {
                                                IList<TestMethod> lstTests = ObjectSpace.GetObjects<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup]=true", lstTestName[0]));
                                                if (objSCInfo.lstTestOid == null)
                                                {
                                                    objSCInfo.lstTestOid = new List<Guid>();
                                                    foreach (TestMethod obj in lstTests.ToList())
                                                    {
                                                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                                                        {
                                                            objSCInfo.lstTestOid.Add(obj.Oid);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (TestMethod obj in lstTests.ToList())
                                                    {
                                                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                                                        {
                                                            objSCInfo.lstTestOid.Add(obj.Oid);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    ListPropertyEditor lstccd = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                                    if (lstccd != null && lstccd.ListView == null)
                                    {
                                        lstccd.CreateControl();
                                    }
                                    ListView lstcustomduedate = lstccd.ListView;
                                    if (lstcustomduedate != null && lstcustomduedate.CollectionSource.List.Count > 0)
                                    {
                                        string[] arrNewTests = e.NewValue.ToString().Split(new string[] { ";" }, StringSplitOptions.None);
                                        string[] arrOldTests = e.OldValue.ToString().Split(new string[] { ";" }, StringSplitOptions.None);
                                        List<Guid> lstOid = new List<Guid>();
                                        foreach (string strOid in arrOldTests)
                                        {
                                            //Guid oid = new Guid(strOid);
                                            List<string> lstTest = strOid.Split('|').ToList();
                                            if (lstTest.Count == 2)
                                            {
                                                IList<TestMethod> lstTests = ObjectSpace.GetObjects<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [MethodName.MethodNumber] = ?", lstTest[0], lstTest[1]));
                                                foreach (TestMethod obj in lstTests.ToList())
                                                {
                                                    if (arrNewTests.FirstOrDefault(i => i == strOid) == null && !lstOid.Contains(obj.Oid))
                                                    {
                                                        lstOid.Add(obj.Oid);
                                                    }
                                                }
                                            }
                                            else if (lstTest.Count == 1)
                                            {
                                                IList<TestMethod> lstTests = ObjectSpace.GetObjects<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup] =true", lstTest[0]));
                                                foreach (TestMethod obj in lstTests.ToList())
                                                {
                                                    if (arrNewTests.FirstOrDefault(i => i == strOid) == null && !lstOid.Contains(obj.Oid))
                                                    {
                                                        lstOid.Add(obj.Oid);
                                                    }
                                                }
                                            }

                                        }
                                        //var objlst = obj2.ToList().ForEach(i => obj1);
                                        foreach (CustomDueDate clr in lstcustomduedate.CollectionSource.List.Cast<CustomDueDate>().Where(i => lstOid.Contains(i.TestMethod.Oid)).ToList())
                                        {
                                            lstcustomduedate.CollectionSource.Remove(clr);
                                        }
                                    }
                                    if (objSCInfo.lstTestOid != null && objSCInfo.lstTestOid.Count > 0)
                                    {
                                        foreach (string val in objSCInfo.lstTestOid.Select(i => i.ToString()).ToList())
                                        {
                                            if (!string.IsNullOrEmpty(val))
                                            {
                                                TestMethod objTestMethod = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[Oid] = ?", new Guid(val)));
                                                //if (objTestMethod != null && objTask.CustomDueDates.FirstOrDefault(i => i.TestMethod != null && i.TestMethod.Oid == new Guid(val) && i.TestMethod.TestName == objTestMethod.TestName) == null)
                                                if (objTestMethod != null)
                                                {
                                                    if (lstcustomduedate != null)
                                                    {
                                                        var lst = lstVM.Where(i => i.MatrixName.Oid == objTestMethod.MatrixName.Oid);
                                                        if (lst != null && lst.Count() > 0)
                                                        {
                                                            foreach (VisualMatrix objSM in lst.Where(i => i.MatrixName != null).GroupBy(p => p.MatrixName.Oid).Select(grp => grp.FirstOrDefault()))
                                                            {
                                                                //if (objTask.CustomDueDates.FirstOrDefault(i => i.TestMethod.Oid == objTestMethod.Oid && i.SampleMatrix.Oid == objSM.Oid) == null)
                                                                //{
                                                                //    CustomDueDate objDate = ObjectSpace.CreateObject<CustomDueDate>();
                                                                //    objDate.TestMethod = objTestMethod;
                                                                //    objDate.SampleCheckin = objTask;
                                                                //    objDate.SampleMatrix = objSM;
                                                                //    objDate.Parameter = "AllParam";
                                                                //    if (objsamplecheckin != null && objsamplecheckin.TAT != null)
                                                                //    {
                                                                //        objDate.DueDate = objsamplecheckin.DueDate;
                                                                //        objDate.TAT = objsamplecheckin.TAT;
                                                                //    }
                                                                //    lstcustomduedate.CollectionSource.Add(objDate);
                                                                //}
                                                                if (objTask.CustomDueDates.FirstOrDefault(i => i.TestMethod.Oid == objTestMethod.Oid && i.TestMethod.MatrixName.Oid == objSM.MatrixName.Oid) == null)
                                                                {
                                                                    CustomDueDate objDate = ObjectSpace.CreateObject<CustomDueDate>();
                                                                    objDate.TestMethod = objTestMethod;
                                                                    objDate.SampleCheckin = objTask;
                                                                    objDate.SampleMatrix = objSM;
                                                                    if (!objTestMethod.IsGroup)
                                                                    {
                                                                        objDate.Parameter = "AllParam";
                                                                    }
                                                                    if (objsamplecheckin != null && objsamplecheckin.TAT != null)
                                                                    {
                                                                        objDate.DueDate = objsamplecheckin.DueDate;
                                                                        objDate.TAT = objsamplecheckin.TAT;
                                                                    }
                                                                    lstcustomduedate.CollectionSource.Add(objDate);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                            else
                            {
                                ListPropertyEditor lstccd = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                                ListView lstcustomduedate = lstccd.ListView;
                                if (lstcustomduedate != null)
                                {
                                    foreach (CustomDueDate clr in lstcustomduedate.CollectionSource.List.Cast<CustomDueDate>().ToList())
                                    {
                                        lstcustomduedate.CollectionSource.Remove(clr);
                                    }
                                }
                            }
                        }
                        else if (e.PropertyName == "SampleMatries")
                        {
                            Samplecheckin objTask = (Samplecheckin)e.Object;
                            ////if(!string.IsNullOrEmpty(objTask.SampleMatries) && objTask.SampleMatries != null && e.OldValue != null)
                            ////{
                            ////    IObjectSpace os = Application.CreateObjectSpace();
                            ////    string[] newarrmatrixes = objTask.SampleMatries.Split(';');
                            ////    string[] oldarrmatrixes = e.OldValue.ToString().Split(';');
                            ////    foreach (string strmat in oldarrmatrixes.ToList())
                            ////    {
                            ////        if(!newarrmatrixes.Contains(strmat))
                            ////        {
                            ////            IList<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstsmpllogin = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID] = ? And [VisualMatrix.Oid] = ?", objTask.Oid,new Guid(strmat.ToString()))).ToList();
                            ////            if (lstsmpllogin != null && lstsmpllogin.Count > 0)
                            ////            {
                            ////                VisualMatrix objvm = os.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strmat)));
                            ////                if (objvm != null)
                            ////                {
                            ////                    string msg = objvm.VisualMatrixName + " matrix already linked with samplelogin couldn't be removed";
                            ////                    Application.ShowViewStrategy.ShowMessage(msg, InformationType.Error, timer.Seconds, InformationPosition.Top);
                            ////                    IObjectSpace ossmplchk = Application.CreateObjectSpace();
                            ////                    //objsamplecheckin.SampleMatries = e.OldValue.ToString();
                            ////                    Samplecheckin objsc = View.ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", objsamplecheckin.Oid));
                            ////                    if (objsc != null)
                            ////                    {
                            ////                        objsc.SampleMatries = e.OldValue.ToString();
                            ////                        View.ObjectSpace.CommitChanges();
                            ////                        View.ObjectSpace.Refresh();
                            ////                        View.RefreshDataSource();
                            ////                        return;
                            ////                    }
                            ////                }
                            ////            }
                            ////        }
                            ////    }
                            ////}
                            if (!string.IsNullOrEmpty(objTask.NPTest) && !string.IsNullOrEmpty(objTask.SampleMatries))
                            {
                                IObjectSpace os = Application.CreateObjectSpace();
                                HttpContext.Current.Session["Test"] = objTask.NPTest;
                                if (HttpContext.Current.Session["Test"] != null)
                                {
                                    List<VisualMatrix> lstVM = new List<VisualMatrix>();
                                    foreach (string strMatrix in objTask.SampleMatries.Split(';'))
                                    {
                                        VisualMatrix objSM = ObjectSpace.GetObjectByKey<VisualMatrix>(new Guid(strMatrix));
                                        if (objSM != null)
                                        {
                                            lstVM.Add(objSM);
                                        }
                                    }
                                    //CustomDueDate cdd = View.CurrentObject as CustomDueDate;
                                    if (objSCInfo.lstTestOid != null && objSCInfo.lstTestOid.Count > 0)
                                    {
                                        objSCInfo.lstTestOid.Clear();
                                    }
                                    string[] TestOid = HttpContext.Current.Session["Test"].ToString().Split(new string[] { ";" }, StringSplitOptions.None);
                                    if (TestOid != null && TestOid.Count() > 0)
                                    {
                                        foreach (string strTest in TestOid)
                                        {
                                            List<string> lstTestName = strTest.Split('|').ToList();
                                            if (lstTestName.Count == 2)
                                            {
                                                IList<TestMethod> lstTests = ObjectSpace.GetObjects<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [MethodName.MethodNumber] = ?", lstTestName[0], lstTestName[1]));
                                                if (objSCInfo.lstTestOid == null)
                                                {
                                                    objSCInfo.lstTestOid = new List<Guid>();
                                                    foreach (TestMethod obj in lstTests.ToList())
                                                    {
                                                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                                                        {
                                                            objSCInfo.lstTestOid.Add(obj.Oid);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    foreach (TestMethod obj in lstTests.ToList())
                                                    {
                                                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                                                        {
                                                            objSCInfo.lstTestOid.Add(obj.Oid);
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                    ListPropertyEditor lstccd = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                                    if (lstccd != null && lstccd.ListView == null)
                                    {
                                        lstccd.CreateControl();
                                    }
                                    ListView lstcustomduedate = lstccd.ListView;
                                    if (lstcustomduedate != null && lstcustomduedate.CollectionSource.List.Count > 0)
                                    {
                                        List<Guid> lstOid = new List<Guid>();
                                        foreach (CustomDueDate strOid in lstcustomduedate.CollectionSource.List.Cast<CustomDueDate>().ToList())
                                        {
                                            if (lstVM.FirstOrDefault(i => i.MatrixName.Oid == strOid.TestMethod.MatrixName.Oid) == null)
                                            {
                                                lstOid.Add(strOid.TestMethod.MatrixName.Oid);
                                            }
                                        }
                                        foreach (CustomDueDate clr in lstcustomduedate.CollectionSource.List.Cast<CustomDueDate>().ToList().Where(i => lstOid.Contains(i.TestMethod.MatrixName.Oid)).ToList())
                                        {
                                            lstcustomduedate.CollectionSource.Remove(clr);
                                        }
                                    }
                                    if (objSCInfo.lstTestOid != null && objSCInfo.lstTestOid.Count > 0)
                                    {
                                        foreach (string val in objSCInfo.lstTestOid.Select(i => i.ToString()))
                                        {
                                            if (!string.IsNullOrEmpty(val))
                                            {
                                                TestMethod objTestMethod = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[Oid] = ?", new Guid(val)));
                                                //if (objTestMethod != null && objTask.CustomDueDates.FirstOrDefault(i => i.TestMethod != null && i.TestMethod.Oid == new Guid(val) && i.TestMethod.TestName == objTestMethod.TestName) == null)
                                                if (objTestMethod != null)
                                                {
                                                    if (lstcustomduedate != null)
                                                    {
                                                        var lst = lstVM.Where(i => i.MatrixName.Oid == objTestMethod.MatrixName.Oid);
                                                        if (lst != null && lst.Count() > 0)
                                                        {
                                                            foreach (VisualMatrix objSM in lst.Where(i => i.MatrixName != null).GroupBy(p => p.MatrixName.Oid).Select(grp => grp.FirstOrDefault()))
                                                            {
                                                                //if (objTask.CustomDueDates.FirstOrDefault(i => i.SampleMatrix != null && i.TestMethod.Oid == objTestMethod.Oid && i.SampleMatrix.Oid == objSM.Oid) == null)
                                                                //{
                                                                //    CustomDueDate objDate = ObjectSpace.CreateObject<CustomDueDate>();
                                                                //    objDate.TestMethod = objTestMethod;
                                                                //    objDate.SampleCheckin = objTask;
                                                                //    objDate.SampleMatrix = objSM;
                                                                //    objDate.Parameter = "AllParam";
                                                                //    if (objsamplecheckin != null && objsamplecheckin.TAT != null)
                                                                //    {
                                                                //        objDate.DueDate = objsamplecheckin.DueDate;
                                                                //        objDate.TAT = objsamplecheckin.TAT;
                                                                //    }
                                                                //    lstcustomduedate.CollectionSource.Add(objDate);
                                                                //}
                                                                if (objTask.CustomDueDates.FirstOrDefault(i => i.TestMethod.Oid == objTestMethod.Oid && i.TestMethod.MatrixName.Oid == objSM.MatrixName.Oid) == null)
                                                                {
                                                                    CustomDueDate objDate = ObjectSpace.CreateObject<CustomDueDate>();
                                                                    objDate.TestMethod = objTestMethod;
                                                                    objDate.SampleCheckin = objTask;
                                                                    objDate.SampleMatrix = objSM;
                                                                    if (!objTestMethod.IsGroup)
                                                                    {
                                                                        objDate.Parameter = "AllParam";
                                                                    }
                                                                    if (objsamplecheckin != null && objsamplecheckin.TAT != null)
                                                                    {
                                                                        objDate.DueDate = objsamplecheckin.DueDate;
                                                                        objDate.TAT = objsamplecheckin.TAT;
                                                                    }
                                                                    lstcustomduedate.CollectionSource.Add(objDate);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                            else
                            {
                                ListPropertyEditor lstccd = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                                ListView lstcustomduedate = lstccd.ListView;
                                if (lstcustomduedate != null)
                                {
                                    foreach (CustomDueDate clr in lstcustomduedate.CollectionSource.List.Cast<CustomDueDate>().ToList())
                                    {
                                        lstcustomduedate.CollectionSource.Remove(clr);
                                    }
                                }
                            }
                        }
                        else if (e.PropertyName == "TAT" || e.PropertyName == "RecievedDate")
                        {
                            if (objsamplecheckin != null && objsamplecheckin.TAT != null && !objsamplecheckin.IsSampling)
                            {
                                int tatHour = objsamplecheckin.TAT.Count;
                                DateTime dateTime = objsamplecheckin.RecievedDate;
                                int Day = 0;

                                if (tatHour >= 24)
                                {
                                    Day = tatHour / 24;
                                    objsamplecheckin.DueDate = AddWorkingDays(objsamplecheckin.RecievedDate, Day);
                                }
                                else
                                {
                                    objsamplecheckin.DueDate = AddWorkingHours(objsamplecheckin.RecievedDate, tatHour);
                                }
                                ListPropertyEditor lstccd = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                                ListView lstcustomduedate = lstccd.ListView;
                                if (lstcustomduedate != null)
                                {
                                    lstcustomduedate.CollectionSource.List.Cast<CustomDueDate>().ToList().ForEach(i => { i.TAT = objsamplecheckin.TAT; i.DueDate = objsamplecheckin.DueDate; });
                                    //Application.MainWindow.View.Refresh();
                                    lstcustomduedate.Refresh();
                                }
                                //string[] values = objsamplecheckin.TAT.TAT.Split(' ');
                                //if (objsamplecheckin.TAT.TAT == "Same Day" )
                                //{
                                //    objsamplecheckin.DueDate = DateTime.Today;
                                //}
                                //else if( values[1] == "Hour" || values[1] == "Hours" || values[1]=="hour" || values[1]=="hours")
                                //{
                                //    objsamplecheckin.DueDate = DateTime.Now.AddHours(Convert.ToInt32(values[0]));
                                //}
                                //else
                                //{
                                //    if (values[1] == "Days" || values[1] == "Day")
                                //    {
                                //        objsamplecheckin.DueDate= AddWorkingDays(DateTime.Today, Convert.ToInt32(values[0]));
                                //    }
                                //    else if (values[1] == "Week" || values[1] == "Weeks")
                                //    {
                                //        int week = int.Parse(values[0]);
                                //        week = week * 7;
                                //        objsamplecheckin.DueDate= AddWorkingDays(DateTime.Today, week);
                                //    }
                                //    else if (values[1] == "Day")
                                //    {
                                //        objsamplecheckin.DueDate= AddWorkingDays(DateTime.Today, Convert.ToInt32(values[0]));
                                //    }
                                //    else if(values[1] == "Month" || values[1] == "Months")
                                //    {
                                //        int month = int.Parse(values[0]);
                                //        month = month * 30;
                                //        objsamplecheckin.DueDate = AddWorkingDays(DateTime.Today, month);
                                //    }
                                //    else if (values[1] == "Year" || values[1] == "Years")
                                //    {
                                //        int Year = int.Parse(values[0]);
                                //        Year = Year * 365;
                                //        objsamplecheckin.DueDate = AddWorkingDays(DateTime.Today, Year);
                                //    }
                                //}

                            }
                        }

                        else if (e.PropertyName == "QuoteID")
                        {

                            ListPropertyEditor lstItemPrice = ((DetailView)View).FindItem("SCItemCharges") as ListPropertyEditor;
                            if (lstItemPrice != null && lstItemPrice.ListView == null)
                            {
                                lstItemPrice.CreateControl();
                            }
                            if (lstItemPrice != null && lstItemPrice.ListView != null)
                            {
                                foreach (SampleCheckinItemChargePricing obj in ((ListView)lstItemPrice.ListView).CollectionSource.List.Cast<SampleCheckinItemChargePricing>().ToList())
                                {
                                    ((ListView)lstItemPrice.ListView).CollectionSource.Remove(obj);
                                }
                            }
                            IObjectSpace os = lstItemPrice.ListView.ObjectSpace;
                            Samplecheckin objTask = (Samplecheckin)e.Object;
                            if (objTask.QuoteID != null)
                            {
                                CRMQuotes objQuote = os.GetObjectByKey<CRMQuotes>(objTask.QuoteID.Oid);
                                if (objQuote != null && objQuote.QuotesItemChargePrice.Count > 0)
                                {
                                    foreach (QuotesItemChargePrice obj in objQuote.QuotesItemChargePrice.ToList())
                                    {
                                        SampleCheckinItemChargePricing objNewItem = os.CreateObject<SampleCheckinItemChargePricing>();
                                        objNewItem.ItemPrice = os.GetObjectByKey<ItemChargePricing>(obj.ItemPrice.Oid);
                                        objNewItem.Qty = obj.Qty;
                                        objNewItem.UnitPrice = obj.UnitPrice;
                                        objNewItem.Amount = obj.Amount;
                                        objNewItem.FinalAmount = obj.FinalAmount;
                                        objNewItem.Discount = obj.Discount;
                                        objNewItem.Description = obj.Description;
                                        objNewItem.NpUnitPrice = obj.NpUnitPrice;
                                        ((ListView)lstItemPrice.ListView).CollectionSource.Add(objNewItem);
                                    }
                                }
                                 ((ListView)lstItemPrice.ListView).Refresh();
                            }

                        }
                        else if (e.PropertyName == "DateCollected")
                        {
                            if (objsamplecheckin.DateCollected != DateTime.MinValue && (objsamplecheckin.DateCollected > objsamplecheckin.RecievedDate))
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "SLReceiveddate"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                objsamplecheckin.DateCollected = null;
                                return;
                            }
                            else if (objsamplecheckin.DateCollected != DateTime.MinValue && objsamplecheckin.CollectionTime != TimeSpan.Zero && (Convert.ToDateTime(objsamplecheckin.DateCollected).Day == objsamplecheckin.RecievedDate.Day && objsamplecheckin.CollectionTime.Hours > objsamplecheckin.RecievedDate.Hour)
                                || (Convert.ToDateTime(objsamplecheckin.DateCollected).Day == objsamplecheckin.RecievedDate.Day && objsamplecheckin.CollectionTime.Hours == objsamplecheckin.RecievedDate.Hour && objsamplecheckin.CollectionTime.Minutes > objsamplecheckin.RecievedDate.Minute))
                            {
                                Application.ShowViewStrategy.ShowMessage("The collected time must be less than the received date time.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                objsamplecheckin.TimeCollected = string.Empty;
                                return;
                            }
                        }
                        else if (e.PropertyName == "TimeCollected")
                        {
                            string val = objsamplecheckin.TimeCollected;
                            DateTime myDate;
                            if (!DateTime.TryParse(objsamplecheckin.TimeCollected, out myDate))
                            {
                                Application.ShowViewStrategy.ShowMessage("Time collected format is not correct.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                objsamplecheckin.TimeCollected = null;
                                return;
                            }
                            if (val.Length > 0)
                            {
                                if (val.Contains(":"))
                                {
                                    //string[] collectedTimeArray = objsamplecheckin.TimeCollected.Split(':');
                                    //int collectedTimehours = int.Parse(collectedTimeArray[0]);
                                    //int collectedTimemins = int.Parse(collectedTimeArray[1]);
                                    int collectedTimehours = myDate.Hour;
                                    int collectedTimemins = myDate.Minute;
                                    if (collectedTimehours <= 24 && collectedTimemins <= 60)
                                    {
                                        if (objsamplecheckin.DateCollected != DateTime.MinValue && objsamplecheckin.DateCollected != null)
                                        {
                                            if (Convert.ToDateTime(objsamplecheckin.DateCollected).Day == objsamplecheckin.RecievedDate.Day)
                                            {
                                                if ((collectedTimehours) > Convert.ToDateTime(objsamplecheckin.RecievedDate).Hour)
                                                {
                                                    Application.ShowViewStrategy.ShowMessage("The collected time must be less than the received date time.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                                    objsamplecheckin.TimeCollected = string.Empty;
                                                    objsamplecheckin.CollectionTime = TimeSpan.Zero;
                                                    return;
                                                }
                                                if (collectedTimehours == Convert.ToDateTime(objsamplecheckin.RecievedDate).Hour && collectedTimemins > Convert.ToDateTime(objsamplecheckin.RecievedDate).Minute)
                                                {
                                                    Application.ShowViewStrategy.ShowMessage("The collected time must be less than the received date time.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                                    objsamplecheckin.TimeCollected = string.Empty;
                                                    objsamplecheckin.CollectionTime = TimeSpan.Zero;
                                                    return;
                                                }
                                            }
                                            TimeSpan ts = new TimeSpan(collectedTimehours, collectedTimemins, 0);
                                            objsamplecheckin.CollectionTime = ts;
                                            objsamplecheckin.TimeCollected = ts.ToString("hh':'mm");
                                        }
                                        else if (objsamplecheckin.DateCollected == null || objsamplecheckin.DateCollected == DateTime.MinValue)
                                        {
                                            TimeSpan ts = new TimeSpan(collectedTimehours, collectedTimemins, 0);
                                            objsamplecheckin.CollectionTime = ts;
                                            objsamplecheckin.TimeCollected = ts.ToString("hh':'mm");
                                        }
                                    }
                                    else
                                    {
                                        Application.ShowViewStrategy.ShowMessage("Time collected format is not correct.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        objsamplecheckin.TimeCollected = string.Empty;
                                        objsamplecheckin.CollectionTime = TimeSpan.Zero;
                                    }
                                }
                                else
                                {
                                    Application.ShowViewStrategy.ShowMessage("Time collected format is not correct.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    objsamplecheckin.TimeCollected = string.Empty;
                                    objsamplecheckin.CollectionTime = TimeSpan.Zero;
                                }
                            }
                            //else if (val.Length > 0)
                            //{
                            //    Application.ShowViewStrategy.ShowMessage("Time collected format is not correct.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                            //    objsamplecheckin.TimeCollected = null;
                            //}
                            else
                            {
                                objsamplecheckin.CollectionTime = TimeSpan.Zero;
                            }
                        }
                    }
                }
                if (View != null && View.Id == "Samplecheckin_DetailView_TestEdit" && e.PropertyName == "TestEditSampleLogIn" && e.OldValue != e.NewValue)
                {
                    Samplecheckin objSampleCheckin = (Samplecheckin)View.CurrentObject;
                    //objSCInfo.SPOid = objSampleCheckin.TestEditSampleLogIn.Oid;
                    if (Frame is NestedFrame && objSampleCheckin != null)
                    {
                        CompositeView cv = ((NestedFrame)Frame).ViewItem.View;
                        if (cv != null)
                        {
                            DashboardViewItem dviSampleParam = (DashboardViewItem)cv.FindItem("TestEdit_Grid");
                            if (dviSampleParam != null)
                            {
                                if (dviSampleParam.InnerView == null)
                                {
                                    dviSampleParam.CreateControl();
                                }
                                if (e.NewValue != null)
                                {
                                    using (XPView lstview = new XPView(((XPObjectSpace)this.ObjectSpace).Session, typeof(SampleParameter)))
                                    {
                                        lstview.Criteria = CriteriaOperator.Parse("[Samplelogin.Oid] = ?", objSampleCheckin.TestEditSampleLogIn.Oid);
                                        //lstview.Criteria = CriteriaOperator.Parse("[SignOff] = True And [Samplelogin.IsNotTransferred] = false And [GCRecord] IS NULL And [Samplelogin] IS NOT NULL and ([ABID] is Null or ([ABID] is not null))");
                                        lstview.Properties.Add(new ViewProperty("SPMatrix", DevExpress.Xpo.SortDirection.Ascending, "Testparameter.TestMethod.MatrixName.MatrixName", true, true));
                                        lstview.Properties.Add(new ViewProperty("SPTest", DevExpress.Xpo.SortDirection.Ascending, "Testparameter.TestMethod.TestName", true, true));
                                        lstview.Properties.Add(new ViewProperty("SPMethod", DevExpress.Xpo.SortDirection.Ascending, "Testparameter.TestMethod.MethodName.MethodNumber", true, true));
                                        lstview.Properties.Add(new ViewProperty("SPoid", DevExpress.Xpo.SortDirection.Ascending, "MAX(Oid)", false, true));
                                        List<object> groups = new List<object>();
                                        foreach (ViewRecord rec in lstview)
                                            groups.Add(rec["SPoid"]);
                                        ((DevExpress.ExpressApp.ListView)dviSampleParam.InnerView).CollectionSource.Criteria["TestEditFilter"] = new InOperator("Oid", groups);
                                    }
                                }
                                else
                                {
                                    ((ListView)dviSampleParam.InnerView).CollectionSource.Criteria["TestEditFilter"] = CriteriaOperator.Parse("1=2");
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private DateTime AddWorkingDays(DateTime date, int daysToAdd)
        {
            try
            {
                while (daysToAdd > 0)
                {
                    date = date.AddDays(1);
                    IList<Holidays> lstHoliday = ObjectSpace.GetObjects<Holidays>(CriteriaOperator.Parse("Oid is Not Null"));
                    Holidays objHoliday = lstHoliday.FirstOrDefault(i => i.HolidayDate != DateTime.MinValue && i.HolidayDate.Day.Equals(date.Day));
                    if (date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday && objHoliday == null)
                    {
                        daysToAdd -= 1;
                    }
                }
                return date;
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
                return DateTime.Now;
            }
        }
        private DateTime AddWorkingHours(DateTime date, int daysToAdd)
        {
            try
            {
                while (daysToAdd > 0)
                {
                    date = date.AddHours(1);
                    IList<Holidays> lstHoliday = ObjectSpace.GetObjects<Holidays>(CriteriaOperator.Parse("Oid is Not Null"));
                    Holidays objHoliday = lstHoliday.FirstOrDefault(i => i.HolidayDate != DateTime.MinValue && i.HolidayDate.Day.Equals(date.Day));
                    if (date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday && objHoliday == null)
                    {
                        daysToAdd -= 1;
                    }
                }
                return date;
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
                return DateTime.Now;
            }
        }
        private void SCDetailView_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                DetailView detailView = (DetailView)((DashboardViewItem)sender).Frame.View;
                ActionContainerViewItem GotoSampleLogIn = detailView.FindItem("SampleLoginFromCheckin") as ActionContainerViewItem;
                if (GotoSampleLogIn != null && GotoSampleLogIn.Actions.Count > 0)
                {
                    GotoSampleLogIn.Actions[0].Active.SetItemValue("Show", false);//the 0 index has the GotoSampleLogIn Action.

                }
                if (detailView.CurrentObject == null)
                {
                    ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = false;

                    detailView.ViewEditMode = ViewEditMode.Edit;
                    detailView.CurrentObject = detailView.ObjectSpace.CreateObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>();
                    ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = true;
                }
                if (detailView.CurrentObject != null)
                {
                    Modules.BusinessObjects.SampleManagement.Samplecheckin SCObj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)detailView.CurrentObject;
                    if (SCObj.JobID == null)
                    {
                        SelectedData sproc = ((XPObjectSpace)ObjectSpace).Session.ExecuteSproc("GetJobID", new OperandValue("Normal"));
                        SCObj.JobID = sproc.ResultSet[1].Rows[0].Values[0].ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void SLDetailView_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                ((DashboardViewItem)sender).Frame.GetController<SampleRegistrationViewController>().Actions["SR_SLDetailViewNew"].Active.SetItemValue("Show", true);//this action visibility hidden from sampleLoginviewcontroller so we need to enable the visiblity for showing here.
                ((DashboardViewItem)sender).Frame.GetController<SampleRegistrationViewController>().Actions["SampleRegistrationSL_Save"].Active.SetItemValue("Show", true);//this action visibility hidden from sampleLoginviewcontroller  so we need to enable the visiblity for showing here.
                ((DashboardViewItem)sender).Frame.GetController<NewObjectViewController>().NewObjectAction.Active.SetItemValue("Show", false);
                DetailView detailView = (DetailView)((DashboardViewItem)sender).Frame.View;
                if (detailView.CurrentObject == null)
                {
                    DashboardViewItem SCDetailView = ((DashboardView)View).FindItem("SampleCheckIn_DetailView") as DashboardViewItem;
                    if (SCDetailView != null)
                    {
                        if (SCDetailView.InnerView != null && SCDetailView.InnerView.CurrentObject != null)
                        {
                            Modules.BusinessObjects.SampleManagement.Samplecheckin SCObj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)SCDetailView.InnerView.CurrentObject;
                            if (SCObj.JobID != null)
                            {
                                ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = false;
                                detailView.ViewEditMode = ViewEditMode.Edit;
                                Modules.BusinessObjects.SampleManagement.SampleLogIn SLCurrentObject = detailView.ObjectSpace.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                                if (SLCurrentObject != null)
                                {
                                    SLCurrentObject.JobID = detailView.ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj); //detailView.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj.Oid);
                                    objSCInfo.JobID = SCObj.JobID;
                                    detailView.CurrentObject = SLCurrentObject;
                                }
                                ((DashboardViewItem)sender).Frame.GetController<ModificationsController>().Active["not in dashboard"] = true;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SLListView_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                ((DashboardViewItem)sender).Frame.GetController<ListViewController>().EditAction.Active.SetItemValue("show", false);
                DashboardViewItem SCDetailView = ((DashboardView)View).FindItem("SampleCheckIn_DetailView") as DashboardViewItem;
                if (SCDetailView != null && SCDetailView.InnerView != null)
                {
                    Modules.BusinessObjects.SampleManagement.Samplecheckin SCObj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)SCDetailView.InnerView.CurrentObject;
                    ListView SLListView = (ListView)((DashboardViewItem)sender).Frame.View;
                    SLListView.CollectionSource.Criteria["filter"] = new BinaryOperator("JobID.JobID", SCObj.JobID);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        protected override void OnViewControlsCreated()
        {
            base.OnViewControlsCreated();
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                {
                    Samplecheckin objsampreg = (Samplecheckin)View.CurrentObject;
                    ASPxStringPropertyEditor JobIDpropertyEditor = ((DetailView)View).FindItem("JobID") as ASPxStringPropertyEditor;
                    if (JobIDpropertyEditor != null && JobIDpropertyEditor.Editor != null)
                    {
                        ASPxTextBox editor = (ASPxTextBox)JobIDpropertyEditor.Editor;
                        if (editor != null)
                        {
                            editor.ClientSideEvents.KeyPress = @"function(s, e){
                                                                                var regex = /[0-9]/;   
                                                                                if (!regex.test(e.htmlEvent.key)) {
                                                                                e.htmlEvent.returnValue = false;
                                                                                }}";
                        }
                    }
                    ASPxStringPropertyEditor TimeCollectedpropertyEditor = ((DetailView)View).FindItem("TimeCollected") as ASPxStringPropertyEditor;
                    if (TimeCollectedpropertyEditor != null && TimeCollectedpropertyEditor.Editor != null)
                    {
                        ASPxTextBox editor = (ASPxTextBox)TimeCollectedpropertyEditor.Editor;
                        if (editor != null)
                        {
                            editor.ClientSideEvents.KeyPress = @"function(s, e){
                                var regex = /[0-9]|\:|\a|\m|\p|^\A|\s|^\M|^\P/;   
                                if (!regex.test(e.htmlEvent.key)) {
                                    e.htmlEvent.returnValue = false;
                                }}";
                            editor.ClientSideEvents.GotFocus = "function(s, e){ if(s.GetText()==''||s.GetText().trim().length==0){s.SetText('00:00')}}";
                        }
                    }

                    ASPxGridLookupPropertyEditor propertyEditor = ((DetailView)View).FindItem("ProjectID") as ASPxGridLookupPropertyEditor;
                    if (propertyEditor != null && propertyEditor.CollectionSource != null)
                    {
                        if (objsampreg != null && objsampreg.ClientName != null)
                        {
                            propertyEditor.CollectionSource.Criteria["ProjectID"] = CriteriaOperator.Parse("[customername.Oid] = ? ", objsampreg.ClientName.Oid);
                        }
                        else
                        {
                            propertyEditor.CollectionSource.Criteria["ProjectID"] = CriteriaOperator.Parse("1=2");
                        }
                    }
                    //Quote ID
                    ASPxGridLookupPropertyEditor peQuoteID = ((DetailView)View).FindItem("QuoteID") as ASPxGridLookupPropertyEditor;
                    if (peQuoteID != null && peQuoteID.GridListEditor != null && peQuoteID.GridListEditor.Grid != null && peQuoteID.CollectionSource != null)
                    {
                        peQuoteID.GridListEditor.Grid.KeyFieldName = "Oid";
                        peQuoteID.GridListEditor.Grid.Settings.ShowFilterRow = true;
                        if (objsampreg != null && objsampreg.ClientName != null)
                        {
                            peQuoteID.CollectionSource.Criteria["QuoteID"] = CriteriaOperator.Parse("[Client.Oid] = ? and Status =2 and [ExpirationDate] >= ?", objsampreg.ClientName.Oid, DateTime.Today);
                            peQuoteID.RefreshDataSource();
                            peQuoteID.GridListEditor.Grid.DataBind();
                        }
                        else
                        {
                            peQuoteID.CollectionSource.Criteria["QuoteID"] = CriteriaOperator.Parse("1=2");
                        }
                        if (peQuoteID.GridListEditor.Grid.Columns["QuoteID"] != null)
                        {
                            peQuoteID.GridListEditor.Grid.Columns["QuoteID"].Width = 110;
                        }
                    }
                    //End
                    Samplecheckin obj = (Samplecheckin)View.CurrentObject;
                    if (!View.ObjectSpace.IsNewObject(obj))
                    {
                        if (obj.ProjectID != null && obj.ProjectLocation == null && obj.ProjectID.ProjectLocation != null)
                            obj.ProjectLocation = obj.ProjectID.ProjectLocation;
                    }
                    ASPxDateTimePropertyEditor DateCollectedpropertyEditor = ((DetailView)View).FindItem("DateCollected") as ASPxDateTimePropertyEditor;
                    if (DateCollectedpropertyEditor != null)
                    {
                        ASPxDateEdit dateEdit = DateCollectedpropertyEditor.Editor;
                        //dateEdit.PickerDisplayMode = DatePickerDisplayMode.Auto;
                        if (dateEdit != null)
                        {
                            //dateEdit.TimeSectionProperties.Visible = true;
                            //dateEdit.PickerDisplayMode = DatePickerDisplayMode.Calendar;
                        }
                    }
                    List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSamples = View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("JobID.Oid=?", objsampreg.Oid)).ToList();
                    if (lstSamples.Count > 0)
                    {
                        SRInfo.isNoOfSampleDisable = true;
                    }
                    else
                    {
                        SRInfo.isNoOfSampleDisable = false;
                        if (SRInfo.IsSamplePopupClose)
                        {
                            ASPxIntPropertyEditor noOfSamplespropertyEditor = ((DetailView)View).FindItem("NoOfSamples") as ASPxIntPropertyEditor;
                            if (noOfSamplespropertyEditor != null)
                            {
                                //noOfSamplespropertyEditor.CurrentObject = Convert.ToUInt16(1);
                                //Application.MainWindow.View.Refresh();
                            }
                            SRInfo.IsSamplePopupClose = false;
                        }
                    }
                    ICallbackManagerHolder handlerid = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    handlerid.CallbackManager.RegisterHandler("JobidResethandler", this);
                }
                if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null && gridListEditor.Grid != null)
                    {
                        //if (SRInfo.CanRefresh == true)
                        //{
                        //    gridListEditor.Grid.ClientSideEvents.Init = @"function(s,e){
                        //    s.Refresh();
                        //    }";
                        //}
                        //SRInfo.CanRefresh = false;
                    }
                }
                if (View.Id == "Project_DetailView_SampleRegistration")
                {
                    if (Application.MainWindow != null && Application.MainWindow.View != null && Application.MainWindow.View.CurrentObject != null)
                    {
                        Samplecheckin obj = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                        Project objP = (Project)View.CurrentObject;
                        if (obj.ClientName != null)
                        { objP.customername = ObjectSpace.GetObjectByKey<Customer>(obj.ClientName.Oid); }
                        else
                        {
                        }
                        if (obj.ProjectID != null)
                            objP.ProjectId = obj.ProjectID.ProjectId;

                        if (obj.ProjectID != null && obj.ProjectID.DaysSampleKeeping != null && !string.IsNullOrEmpty(obj.ProjectID.DaysSampleKeeping) /* && obj.ProjectID.DaysSampleKeeping>0*/)
                        {
                            //    int i = 0;
                            //    //bool result = int.TryParse(obj.ProjectID.DaysSampleKeeping, out i);
                            //    if (int.TryParse(obj.ProjectID.DaysSampleKeeping, out i))
                            //    {
                            //        if (i > 0)
                            //        {
                            //            objP.DaysSampleKeeping = obj.ProjectID.DaysSampleKeeping;
                            //        }
                            //    }


                            //}
                            //else
                            //{
                            objP.DaysSampleKeeping = obj.ProjectID.DaysSampleKeeping;
                        }

                    }
                }
                if (View.Id == "DataSource_ListView" || View.Id == "SampleParameter_ListView_TestEdit")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null)
                    {
                        ASPxGridView gv = gridListEditor.Grid;
                        if (gv != null)
                        {
                            gv.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
                            //gv.SettingsBehavior.AllowSelectSingleRowOnly = true;
                            //gv.SettingsBehavior.AllowSelectByRowClick = true;
                        }
                    }
                }
                if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {
                    XafCallbackManager callbackManager = ((ICallbackManagerHolder)WebWindow.CurrentRequestPage).CallbackManager;
                    callbackManager.RegisterHandler("Contact", this);
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null)
                    {
                        ASPxGridView gv = gridListEditor.Grid;
                        if (gv != null)
                        {
                            gv.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
                            gv.HtmlDataCellPrepared += Gv_HtmlDataCellPrepared; ;
                        }
                    }
                }
                if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    tempviewinfo.strtempviewid = View.Id;
                    //((ASPxGridListEditor)((ListView)View).Editor).Grid.BatchUpdate += Grid_BatchUpdate;
                    //((ASPxGridListEditor)((ListView)View).Editor).Grid.BatchUpdate
                    ((ListView)View).CollectionSource.Criteria["Filter"] = CriteriaOperator.Parse("[JobID.JobID] = ? AND [JobID.GCRecord] is NULL", SRInfo.strJobID);
                    Samplecheckin objsmplcheckin = ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.CurrentJob.Oid));
                    string[] strvmarr = objsmplcheckin.SampleMatries.Split(';');
                    SRInfo.lstSRvisualmat = new List<VisualMatrix>();
                    foreach (string strvmoid in strvmarr.ToList())
                    {
                        VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
                        if (lstvmatobj != null)
                        {
                            SRInfo.lstSRvisualmat.Add(lstvmatobj);
                        }
                    }
                    Frame.GetController<SampleRegistrationViewController>().Actions["SR_SLListViewEdit"].Active.SetItemValue("", false);
                    ICallbackManagerHolder sampleid = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    sampleid.CallbackManager.RegisterHandler("id", this);
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    gridListEditor.Grid.JSProperties["cpsuboutremove"] = CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "Suboutremove");
                    gridListEditor.Grid.JSProperties["cpcollectdatemsg"] = CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "SLCollectdate");
                    gridListEditor.Grid.JSProperties["cpReceiveddatemsg"] = CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "SLReceiveddate");
                    gridListEditor.Grid.JSProperties["cpCollecteddateTimemsg"] = CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "SLCollectdateTime");
                    gridListEditor.Grid.JSProperties["cpReceiveddateTimemsg"] = CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "SLReceiveddateTime");
                    if (objPermissionInfo.SampleRegistrationViewEditMode == ViewEditMode.Edit)
                    {
                        gridListEditor.Grid.JSProperties["cpviewid"] = "ViewEditMode_Edit";
                    }
                    else
                    {
                        gridListEditor.Grid.JSProperties["cpviewid"] = "ViewEditMode_View";
                    }

                    //gridListEditor.Grid.CustomJSProperties += Grid_CustomJSProperties1;
                    //gridListEditor.Grid.CommandButtonInitialize += Grid_CommandButtonInitialize;
                    gridListEditor.Grid.HtmlCommandCellPrepared += Grid_HtmlCommandCellPrepared;
                    gridListEditor.Grid.CustomJSProperties += Grid_CustomJSProperties;
                    gridListEditor.Grid.Load += Grid_Load;
                    gridListEditor.Grid.SettingsBehavior.ProcessSelectionChangedOnServer = true;
                    gridListEditor.Grid.FillContextMenuItems += GridView_FillContextMenuItems;
                    gridListEditor.Grid.SettingsContextMenu.Enabled = true;
                    gridListEditor.Grid.SettingsContextMenu.EnableRowMenu = DevExpress.Utils.DefaultBoolean.True;
                    gridListEditor.Grid.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                    gridListEditor.Grid.Settings.VerticalScrollableHeight = 300;
                    //gridListEditor.Grid.VisibleColumns[0].FixedStyle = GridViewColumnFixedStyle.Left;
                    //gridListEditor.Grid.VisibleColumns[1].FixedStyle = GridViewColumnFixedStyle.Left;
                    //if (gridListEditor.Grid.Columns["SelectionCommandColumn"] != null)
                    //{
                    //    gridListEditor.Grid.VisibleColumns["SelectionCommandColumn"].FixedStyle = GridViewColumnFixedStyle.Left;
                    //}
                    //if (gridListEditor.Grid.Columns["Test"] != null)
                    //{
                    //    gridListEditor.Grid.VisibleColumns["Test"].FixedStyle = GridViewColumnFixedStyle.Left;
                    //}
                    //if (gridListEditor.Grid.Columns["Containers"] != null)
                    //{
                    //    gridListEditor.Grid.VisibleColumns["Containers"].FixedStyle = GridViewColumnFixedStyle.Left;
                    //}
                    //if (gridListEditor.Grid.Columns["SampleID"] != null)
                    //{
                    //    gridListEditor.Grid.VisibleColumns["SampleID"].FixedStyle = GridViewColumnFixedStyle.Left;
                    //}
                    if (SRInfo.EditColumnName == null || SRInfo.EditColumnName.Count == 0)
                    {
                        SRInfo.EditColumnName = new List<string>();
                        foreach (ColumnWrapper wrapper in gridListEditor.Columns)
                        {
                            IModelColumn columnModel = ((ListView)View).Model.Columns[wrapper.PropertyName];
                            if (columnModel != null && columnModel.AllowEdit == true && !SRInfo.EditColumnName.Contains(columnModel.Id + ".Oid") && columnModel.PropertyEditorType == typeof(ASPxLookupPropertyEditor))
                            {
                                SRInfo.EditColumnName.Add(columnModel.Id + ".Oid");
                            }
                            else if (columnModel != null && columnModel.AllowEdit == true && !SRInfo.EditColumnName.Contains(columnModel.Id) && columnModel.PropertyEditorType != typeof(ASPxLookupPropertyEditor))
                            {
                                SRInfo.EditColumnName.Add(columnModel.Id);
                            }
                        }
                    }
                    if (SRInfo.EditColumnName.Count > 0)
                    {
                        gridListEditor.Grid.JSProperties["cpeditcolumnname"] = SRInfo.EditColumnName;
                    }
                    //gridListEditor.Grid.VisibleColumns[2].FixedStyle = GridViewColumnFixedStyle.Left;
                    if (SRInfo.IsTestAssignmentClosed)
                    {
                        ////String gridId = gridLstEditor.Grid.ClientID;
                        ////String resetIsModifiedScript = "xaf.ConfirmUnsavedChangedController.SetModified(false, '" + gridId + "');";
                        ////WebWindow.CurrentRequestWindow.RegisterClientScript("SetNotModified", resetIsModifiedScript);
                        ////foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSample in View.ObjectSpace.ModifiedObjects.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList())
                        ////{
                        ////    View.ObjectSpace.RemoveFromModifiedObjects(objSample);
                        ////}
                        //Frame.GetController<ASPxGridListEditorConfirmUnsavedChangesController>().Active["DisableUnsavedChangesController"] = false;
                        //Frame.GetController<RefreshController>().RefreshAction.DoExecute();
                        SRInfo.IsTestAssignmentClosed = false;
                        ////View.ObjectSpace.Refresh();
                    }

                    if (AddSample != null)
                    {
                        AddSample.Active["showAddSample"] = objPermissionInfo.SampleRegIsWrite;
                    }
                    if (objPermissionInfo.SampleRegIsWrite == false)
                    {
                        gridListEditor.AllowEdit = false;
                        gridListEditor.Grid.ClientSideEvents.BatchEditStartEditing = @"function(s,e){
                e.cancel = true;
                 
                }";
                    }
                    else
                    {
                        //gridListEditor.Grid.ClientSideEvents.FocusedCellChanging = @"function(s,e)
                        //{
                        //    var fieldName = e.cellInfo.column.fieldName;
                        //    sessionStorage.setItem('SampleRegistrationFocusedColumn', fieldName);
                        //    sessionStorage.setItem('CanChangeVisualMatrix', '');
                        //    s.GetRowValues(e.cellInfo.rowVisibleIndex, 'CanChangeVisualMatrix',function GetVisualMatrixChange(value) 
                        //    {
                        //        sessionStorage.setItem('CanChangeVisualMatrix', value);
                        //    });

                        //    if(sessionStorage.getItem('CurrFocusedColumn') == null)
                        //{
                        //            sessionStorage.setItem('PrevFocusedColumn', e.cellInfo.column.fieldName);
                        //            sessionStorage.setItem('CurrFocusedColumn', e.cellInfo.column.fieldName);
                        //}
                        //        else
                        //{
                        //            var precolumn = sessionStorage.getItem('CurrFocusedColumn');
                        //            sessionStorage.setItem('PrevFocusedColumn', precolumn);                           
                        //            sessionStorage.setItem('CurrFocusedColumn', e.cellInfo.column.fieldName);
                        //} 
                        //}";
                        gridListEditor.Grid.ClientSideEvents.BatchEditStartEditing = @"function(s,e)
                        {
                            if(s.cpviewid == 'ViewEditMode_View')
                            {
                                 e.cancel = true;
                            }
                            else
                            {
                                if(e.focusedColumn.fieldName == 'VisualMatrix.Oid' && s.batchEditApi.GetCellValue(e.visibleIndex, 'VisualMatrix.Oid') != null)
                                {
                                    var val = sessionStorage.getItem('CanChangeVisualMatrix');
                                    if (val == 'CannotChange')
                                    {
                                        e.cancel = true;
                                    }
                                    else if(val == 'DeleteSampleParamsAndChange')
                                    {
                                        s.GetRowValues(e.visibleIndex, 'Test;Oid', OnGetRowValues);
                                    }
                                }
                                else if(e.focusedColumn.fieldName == 'SampleID')
                                {
                                    e.cancel = true;
                                }
                            }
                            
                            //else if(e.focusedColumn.fieldName == 'SubOut')
                            //{
                            //    var subout = s.batchEditApi.GetCellValue(e.visibleIndex, 'SubOut');
                            //    if(subout == 1)
                            //    {
                            //        e.cancel = true;
                            //        //alert(s.cpsuboutremove);
                            //    }                
                            //}
                        }";
                        gridListEditor.Grid.ClientSideEvents.BatchEditEndEditing = @"function(s, e) 
                                                {
                                                    s.timerHandle = setTimeout(function() 
                                                    {

                          var fieldName = sessionStorage.getItem('PrevFocusedColumn');
                          if(s.batchEditApi.HasChanges(e.visibleIndex) && fieldName=='NotReport')
                          {
var NotReport = s.batchEditApi.GetCellValue(e.visibleIndex, 'NotReport');
s.batchEditApi.SetCellValue(e.visibleIndex, 'ExcludeInvoice', NotReport);
                          }
                          if(s.batchEditApi.HasChanges(e.visibleIndex) && (fieldName=='TimeStart' || fieldName=='TimeEnd'))
                          {
var timestart = s.batchEditApi.GetCellValue(e.visibleIndex, 'TimeStart');
var timeend = s.batchEditApi.GetCellValue(e.visibleIndex, 'TimeEnd');
if(timestart != null && timeend != null)
{
                                                          if (timestart > timeend)
                                                          {
    alert('The TimeStart must be less than the TimeEnd.');
   // e.cancel = true; // Prevent the changes
    s.batchEditApi.SetCellValue(e.visibleIndex, 'TimeStart', null);
    s.batchEditApi.SetCellValue(e.visibleIndex, 'TimeEnd', null);
s.batchEditApi.SetCellValue(e.visibleIndex, 'Time',null); 
}
}
var time =0;
                          }
                          

                         
                            if (s.batchEditApi.HasChanges(e.visibleIndex) && fieldName=='CollectDate')
                          	{
		                     var datecollected = s.batchEditApi.GetCellValue(e.visibleIndex, 'CollectDate',false);
                             var datereceived = s.batchEditApi.GetCellValue(e.visibleIndex, 'ReceivedDate',false);
                             var collectedTime = s.batchEditApi.GetCellValue(e.visibleIndex, 'CollectTimeDisplay',false);
                             if(collectedTime!=null)
                                {
                                    var[collectedTimehours, collectedTimemins] = collectedTime.split(':');
                                }
                             var dt = new Date();
                             
                             if(dt != null && datecollected != null && datereceived != null)
                             {
                                var collectedYear = datecollected.getFullYear();
                                var collectedMonth = datecollected.getMonth();
                                var collectedDay = datecollected.getDate();
                                var collectedHours = datecollected.getHours();
                                var collectedMinutes = datecollected.getMinutes();
                                var receivedYear = datereceived.getFullYear();
                               var receivedMonth = datereceived.getMonth();
                               var receivedDay = datereceived.getDate();
                               var receivedHours = datereceived.getHours();
                               var receivedMinutes = datereceived.getMinutes();
                                 if(collectedYear != null && receivedYear != null && collectedMonth != null && receivedMonth != null && collectedDay != null && receivedDay != null 
                                    && collectedHours != null && receivedHours != null && collectedMinutes != null && receivedMinutes != null)
                                {
                                    //if (collectedYear > receivedYear ||(collectedYear === receivedYear && 
                                    //    (collectedMonth > receivedMonth || (collectedMonth === receivedMonth &&  
                                    //    (collectedDay > receivedDay || (collectedDay === receivedDay && 
                                    //    (collectedTimehours > receivedHours ||  (collectedTimehours === receivedHours && 
                                    //        collectedTimemins > receivedMinutes))))))))
                                    //{
                                    //   alert(s.cpReceiveddatemsg);
                                    //   s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null); 
                                    //}
                                    if(collectedYear > receivedYear)
                                      {
                                          alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null); 
                                      }
                                      else if(collectedYear == receivedYear && collectedMonth > receivedMonth)
                                      {
                                         alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null); 
                                      }
                                      else if(collectedYear == receivedYear && collectedMonth == receivedMonth && collectedDay>receivedDay)
                                      {
                                         alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null); 
                                      } 
                                      else if(collectedYear == receivedYear && collectedMonth == receivedMonth && collectedDay == receivedDay && collectedTimehours>receivedHours)
                                      {
                                         alert(s.cpReceiveddatemsg);
                                        s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null);  
                                      }
                                      else if(collectedYear == receivedYear && collectedMonth == receivedMonth && collectedDay == receivedDay && collectedTimehours == receivedHours && collectedTimemins> receivedMinutes)
                                      {
                                         alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null);  
                                      }
                                }
                             } 
	                        }
                            else if(s.batchEditApi.HasChanges(e.visibleIndex) && fieldName=='CollectTimeDisplay')
                                {
                             var datecollected = s.batchEditApi.GetCellValue(e.visibleIndex, 'CollectDate',false);
                             var datereceived = s.batchEditApi.GetCellValue(e.visibleIndex, 'ReceivedDate',false);
                             var collectedTime = s.batchEditApi.GetCellValue(e.visibleIndex, 'CollectTimeDisplay',false);
                             var dt = new Date();
                             if(dt != null && datecollected != null && datereceived != null && collectedTime!=null)
                             {
                                var[collectedTimehours, collectedTimemins] = collectedTime.split(':');
                                var collectedYear = datecollected.getFullYear();
                                var collectedMonth = datecollected.getMonth();
                                var collectedDay = datecollected.getDate();
                                var collectedHours = datecollected.getHours();
                                var collectedMinutes = datecollected.getMinutes();
                                var receivedYear = datereceived.getFullYear();
                               var receivedMonth = datereceived.getMonth();
                               var receivedDay = datereceived.getDate();
                               var receivedHours = datereceived.getHours();
                               var receivedMinutes = datereceived.getMinutes();
                               if(collectedYear != null && receivedYear != null && collectedMonth != null && receivedMonth != null && collectedDay != null && receivedDay != null 
                                   && collectedTimehours != null && receivedHours != null && collectedTimemins != null && receivedMinutes != null)
                                {
                                    if(collectedYear > receivedYear)
                                      {
                                          alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectTimeDisplay', '00:00'); 
                                      }
                                      else if(collectedYear == receivedYear && collectedMonth > receivedMonth)
                                      {
                                         alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectTimeDisplay', '00:00'); 
                                      }
                                      else if(collectedYear == receivedYear && collectedMonth == receivedMonth && collectedDay>receivedDay)
                                      {
                                         alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectTimeDisplay', '00:00'); 
                                      } 
                                      else if(collectedYear == receivedYear && collectedMonth == receivedMonth && collectedDay == receivedDay && collectedTimehours>receivedHours)
                                      {
                                         alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectTimeDisplay', '00:00'); 
                                      }
                                      else if(collectedYear == receivedYear && collectedMonth == receivedMonth && collectedDay == receivedDay && collectedTimehours == receivedHours && collectedTimemins> receivedMinutes)
                                    {
                                       alert(s.cpReceiveddatemsg);
                                         s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectTimeDisplay', '00:00'); 
                                      }
                                    }
                                }
                             }
                             //if (s.batchEditApi.HasChanges(e.visibleIndex) && (fieldName === 'QCCategory.Oid'))
                             //{

                             //      var QCCategory = s.batchEditApi.GetCellValue(e.visibleIndex, 'QCCategory.Oid');

                             //      s.batchEditApi.ResetChanges(e.visibleIndex);
                             //      s.GetRowValues(e.visibleIndex, 'Oid', function(Oidvalue) 
                             //      {

                             //         RaiseXafCallback(globalCallbackControl, 'id', 'QCCategory|' + Oidvalue + '|' + QCCategory, '', false); 
                             //      }); 
                             //}


////var datecollected = s.batchEditApi.GetCellValue(e.visibleIndex, 'CollectDate');
////var datereceived = s.batchEditApi.GetCellValue(e.visibleIndex, 'JobID.RecievedDate');
////var dt = new Date();
////    if(dt != null && datecollected != null && datereceived != null)
////    {
////        ////if(datecollected > dt)  
////        ////{
////        ////    alert(s.cpcollectdatemsg);
////        ////    s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null); 
////        ////}
////        ////else
////        if(datereceived < datecollected)  
////        {
////            alert(s.cpReceiveddatemsg);
////            s.batchEditApi.SetCellValue(e.visibleIndex, 'CollectDate', null); 
////        }
////    }
if(timestart != null && timeend != null)
{
if (timestart < timeend) 
{
    time =  (timeend-timestart)/1000;
time = (time/60);

s.batchEditApi.SetCellValue(e.visibleIndex, 'Time',time); 
}
}
                                                        var flowrate = s.batchEditApi.GetCellValue(e.visibleIndex, 'FlowRate');
                                                        var timemin = s.batchEditApi.GetCellValue(e.visibleIndex, 'Time');
                                                        var vol = 0;
                                                        if(flowrate != null && flowrate > 0 && timemin != null &&timemin > 0)
                                                        {
                                                            vol = flowrate * timemin;
                                                            s.batchEditApi.SetCellValue(e.visibleIndex, 'Volume',vol); 
                                                        }
                                                        else if(flowrate != null && flowrate < 1 || timemin != null && timemin < 1)
                                                        {
                                                       //alert('0');
                                                       var volum = '';
                                                       //alert(volum)
                                                            s.batchEditApi.SetCellValue(e.visibleIndex, 'Volume', volum); 
                                                        }
                                                                                     var val = s.batchEditApi.GetCellValue(e.visibleIndex, 'Containers');
                                                                                                              if(val == 0 )
                                                                                                              {
                                                                                                              alert('#Containers must not be in 0');
                                                                                                            s.batchEditApi.SetCellValue(e.visibleIndex, 'Containers',1); 
                                                                                                              }
                                                                                     var val = s.batchEditApi.GetCellValue(e.visibleIndex, 'Qty');
                                                                                                              if(val == 0 )
                                                                                                              {
                                                                                                              alert('Qty must not be in 0');
                                                                                                            s.batchEditApi.SetCellValue(e.visibleIndex, 'Qty',1); 
                                                                                                              }
                                                        //s.UpdateEdit();
                                                    }, 100); 
                                                }";

                    }

                    gridListEditor.Grid.ClientSideEvents.BatchEditChangesSaving = @"function(s, e)
                    {
                        for (var i in e.updatedValues) 
                        { 
                             var datecollected = s.batchEditApi.GetCellValue(i, 'CollectDate',false);
                             var datereceived = s.batchEditApi.GetCellValue(i, 'JobID.RecievedDate',false);
                             var dt = new Date();
                             
                             if(dt != null && datecollected != null && datereceived != null)
                             {
                                var collectedYear = datecollected.getFullYear();
                                var collectedMonth = datecollected.getMonth();
                                var collectedDay = datecollected.getDate();
                                var collectedHours = datecollected.getHours();
                                var collectedMinutes = datecollected.getMinutes();
                                var receivedYear = datereceived.getFullYear();
                               var receivedMonth = datereceived.getMonth();
                               var receivedDay = datereceived.getDate();
                               var receivedHours = datereceived.getHours();
                               var receivedMinutes = datereceived.getMinutes();
                                 ////if(datecollected > dt)  
                                 ////{
                                 ////    alert(s.cpcollectdatemsg);
                                 ////    s.batchEditApi.SetCellValue(i, 'CollectDate', null); 
                                 ////}
                                 ////else
                                 if(collectedYear != null && receivedYear != null && collectedMonth != null && receivedMonth != null && collectedDay != null && receivedDay != null 
                                    && collectedHours != null && receivedHours != null && collectedMinutes != null && receivedMinutes != null)
                                {
                                    if (collectedYear > receivedYear ||(collectedYear === receivedYear && 
                                        (collectedMonth > receivedMonth || (collectedMonth === receivedMonth &&  
                                        (collectedDay > receivedDay || (collectedDay === receivedDay && 
                                        (collectedHours > receivedHours ||  (collectedHours === receivedHours && 
                                            collectedMinutes >= receivedMinutes))))))))
                                    {
                                       alert(s.cpReceiveddatemsg);
                                       s.batchEditApi.SetCellValue(i, 'CollectDate', null); 
                                    }
                                }
                             }
                             var CollectTimeDisplay = s.batchEditApi.GetCellValue(i, 'CollectTimeDisplay', false);
                             if(CollectTimeDisplay == null || CollectTimeDisplay.toString().length ==0){
                                s.batchEditApi.SetCellValue(i, 'CollectTimeDisplay', '00:00');
                             }
                             var RestTime = s.batchEditApi.GetCellValue(i, 'RestTime', false);
                             if(RestTime == null || RestTime.toString().length ==0){
                                s.batchEditApi.SetCellValue(i, 'RestTime', '00:00');
                             }
                        }  
                    }";
                    gridListEditor.Grid.ClientSideEvents.FocusedCellChanging = @"function (s, e) {
                                    if(sessionStorage.getItem('CurrFocusedColumn') == null)
                                    {
                                        sessionStorage.setItem('PrevFocusedColumn', e.cellInfo.column.fieldName);
                                        sessionStorage.setItem('CurrFocusedColumn', e.cellInfo.column.fieldName);
                                    }
                                    else
                                    {
                                        var precolumn = sessionStorage.getItem('CurrFocusedColumn');
                                        sessionStorage.setItem('PrevFocusedColumn', precolumn);                           
                                        sessionStorage.setItem('CurrFocusedColumn', e.cellInfo.column.fieldName);
                                    }   
                        if(e.cellInfo.column.fieldName=='FlowRate')
                          {
                             s.GetEditor('FlowRate').KeyPress.AddHandler(OnSLFlowRateTimeChanged);
                          }
                       if(e.cellInfo.column.fieldName=='Time')
                          {
                           s.GetEditor('Time').KeyPress.AddHandler(OnSLFlowRateTimeChanged);
                          }
                       if(e.cellInfo.column.fieldName=='Volume')
                          {
                             s.GetEditor('Volume').KeyPress.AddHandler(OnSLFlowRateTimeChanged);
                          }
                           sessionStorage.setItem('SampleRegistrationCopyFocusedColumn', null);  
                           if((e.cellInfo.column.name.indexOf('Command') !== -1) || (e.cellInfo.column.name == 'Edit'))
                            {  
                              e.cancel = true;
                            }                  
                            else
                             {
                                 
                                  if (s.cpeditcolumnname!=null)
	                                 {
                                   if (s.cpeditcolumnname.includes(e.cellInfo.column.fieldName))
                                    {
                                     var fieldName = e.cellInfo.column.fieldName; 
                                    sessionStorage.setItem('SampleRegistrationCopyFocusedColumn', fieldName); 
                                    }
                                    else
                                     {
                                          e.cancel=true;
                                     }
                             }                
                             }                
                        }";
                    if (objPermissionInfo.SampleRegIsWrite)
                    {
                        gridListEditor.Grid.ClientSideEvents.ContextMenuItemClick = @"function(s,e) 
                            { 
                                if (s.IsRowSelectedOnPage(e.elementIndex))  
                                { 
                                    var FocusedColumn = sessionStorage.getItem('SampleRegistrationCopyFocusedColumn');  
                                    var text;
                                    if(FocusedColumn.includes('.'))
                                    {  
                                        oid=s.batchEditApi.GetCellValue(e.elementIndex,FocusedColumn,false);
                                        text = s.batchEditApi.GetCellTextContainer(e.elementIndex,FocusedColumn).innerText;                                                     
                                        if (e.item.name =='CopyToAllCell')
                                        {
                                            if(FocusedColumn=='StationLocation.Oid')
                                            {
                                              var address= s.batchEditApi.GetCellValue(e.elementIndex,'Address');
                                              var pwsid= s.batchEditApi.GetCellValue(e.elementIndex,'PWSID');
                                              var KeyMap= s.batchEditApi.GetCellValue(e.elementIndex,'KeyMap');
                                              var SamplePointID= s.batchEditApi.GetCellValue(e.elementIndex,'SamplePointID');
                                              var SamplePointType= s.batchEditApi.GetCellValue(e.elementIndex,'SamplePointType');
                                              var SystemTypeOid= s.batchEditApi.GetCellValue(e.elementIndex,'SystemType.Oid',false);
                                             if (SystemTypeOid!=null)
	                                          {
		                                         var SystemTypetext = s.batchEditApi.GetCellTextContainer(e.elementIndex,'SystemType.Oid').innerText;  
	                                          }
                                              var PWSSystemNameOid= s.batchEditApi.GetCellValue(e.elementIndex,'PWSSystemName.Oid',false);
                                              if(PWSSystemNameOid!=null)
                                                {
                                                     var PWSSystemNametext = s.batchEditApi.GetCellTextContainer(e.elementIndex,'PWSSystemName.Oid').innerText;  
                                                }
                                              var RejectionCriteria= s.batchEditApi.GetCellValue(e.elementIndex,'RejectionCriteria');
                                              var WaterTypeOid = s.batchEditApi.GetCellValue(e.elementIndex,'WaterType.Oid',false);
                                             if (WaterTypeOid!=null)
                                               	{
		                                           var WaterTypetext = s.batchEditApi.GetCellTextContainer(e.elementIndex,'WaterType.Oid').innerText;  
	                                            }
                                              var ParentSampleID= s.batchEditApi.GetCellValue(e.elementIndex,'ParentSampleID');
                                              var ParentSampleDate= s.batchEditApi.GetCellValue(e.elementIndex,'ParentSampleDate');
                                              var samplingAddress= s.batchEditApi.GetCellValue(e.elementIndex,'SamplingAddress');
                                            for(var i = 0; i < s.cpVisibleRowCount; i++)
                                                 { 
                                                if (s.IsRowSelectedOnPage(i)) 
                                                  {
                                                       s.batchEditApi.SetCellValue(i,FocusedColumn,oid,text,false);
                                                        s.batchEditApi.SetCellValue(i,'Address',address); 
                                                       s.batchEditApi.SetCellValue(i,'PWSID',pwsid); 
                                                       s.batchEditApi.SetCellValue(i,'KeyMap',KeyMap);
                                                       s.batchEditApi.SetCellValue(i,'SamplePointID',SamplePointID);
                                                       s.batchEditApi.SetCellValue(i,'SamplePointType',SamplePointType);
                                                       s.batchEditApi.SetCellValue(i,'SystemType.Oid',SystemTypeOid,SystemTypetext,false);
                                                       s.batchEditApi.SetCellValue(i,'PWSSystemName.Oid',PWSSystemNameOid,PWSSystemNametext,false);
                                                       s.batchEditApi.SetCellValue(i,'RejectionCriteria',RejectionCriteria);
                                                       s.batchEditApi.SetCellValue(i,'WaterType.Oid',WaterTypeOid,WaterTypetext,false);
                                                       s.batchEditApi.SetCellValue(i,'ParentSampleID',ParentSampleID);
                                                       s.batchEditApi.SetCellValue(i,'ParentSampleDate',ParentSampleDate);
                                                       s.batchEditApi.SetCellValue(i,'SamplingAddress',samplingAddress);
                                                   }
                                                }
                                            }
                                            else
                                            {
                                            for(var i = 0; i < s.cpVisibleRowCount; i++)
                                            { 
                                                if (s.IsRowSelectedOnPage(i)) 
                                                {                                               
                                                    s.batchEditApi.SetCellValue(i,FocusedColumn,oid,text,false);
                                                }
                                            }
                                        }        
                                            
                                        }        
                                    }
                                else{
                                var CopyValue = s.batchEditApi.GetCellValue(e.elementIndex,FocusedColumn);                            
                                if (e.item.name =='CopyToAllCell')
                                {
                                    for(var i = 0; i < s.cpVisibleRowCount; i++)
                                    { 
                                        if (s.IsRowSelectedOnPage(i)) 
                                        {
                                            s.batchEditApi.SetCellValue(i,FocusedColumn,CopyValue);
                                            
                                        }
                                    }
                                }    
                             }
                                }
                                e.processOnServer = false;
                            }";
                        //gridListEditor.Grid.ClientSideEvents.ContextMenuItemClick = @"function(s,e) 
                        //    { 
                        //        if (s.IsRowSelectedOnPage(e.elementIndex))  
                        //        { 
                        //            var FocusedColumn = sessionStorage.getItem('SampleRegistrationCopyFocusedColumn');  
                        //            var text;
                        //            if(FocusedColumn.includes('.'))
                        //            {  
                        //                oid=s.batchEditApi.GetCellValue(e.elementIndex,FocusedColumn,false);
                        //                text = s.batchEditApi.GetCellTextContainer(e.elementIndex,FocusedColumn).innerText;                                                     
                        //                if (e.item.name =='CopyToAllCell')
                        //                {
                        //                    for(var i = 0; i < s.cpVisibleRowCount; i++)
                        //                    { 
                        //                        if (s.IsRowSelectedOnPage(i)) 
                        //                        {                                               
                        //                            s.batchEditApi.SetCellValue(i,FocusedColumn,oid,text,false);
                        //                        }
                        //                    }
                        //                }        
                        //            }
                        //        else{
                        //        var CopyValue = s.batchEditApi.GetCellValue(e.elementIndex,FocusedColumn);                            
                        //        if (e.item.name =='CopyToAllCell')
                        //        {
                        //            for(var i = 0; i < s.cpVisibleRowCount; i++)
                        //            { 
                        //                if (s.IsRowSelectedOnPage(i)) 
                        //                {
                        //                    s.batchEditApi.SetCellValue(i,FocusedColumn,CopyValue);

                        //                }
                        //            }
                        //        }    
                        //     }
                        //        }
                        //        e.processOnServer = false;
                        //    }";
                        if (SRInfo.canGridRefresh == true)
                        {
                            //    gridListEditor.Grid.ClientSideEvents.Init = @"function(s,e)
                            // { 
                            //s.Refresh();
                            // }";
                            SRInfo.canGridRefresh = false;
                        }
                    }
                    CriteriaOperator cs = CriteriaOperator.Parse("JobID=?", SRInfo.strJobID);
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(cs);
                    if (gridListEditor != null && objsamplecheckin != null)
                    {
                        List<SampleMatrixSetupFields> lstFields = new List<SampleMatrixSetupFields>();
                        if (!string.IsNullOrEmpty(objsamplecheckin.SampleMatries))
                        {
                            List<string> lstSMOid = objsamplecheckin.SampleMatries.Split(';').ToList();
                            //lstFields = objsamplecheckin.SampleMatries.SetupFields.ToList();
                            foreach (string strOid in lstSMOid)
                            {
                                VisualMatrix objVM = ObjectSpace.GetObjectByKey<VisualMatrix>(new Guid(strOid.Trim()));
                                if (objVM != null && objVM.SetupFields.Count > 0)
                                {
                                    foreach (SampleMatrixSetupFields objField in objVM.SetupFields)
                                    {
                                        if (lstFields.FirstOrDefault(i => i.Oid == objField.Oid) == null)
                                        {
                                            lstFields.Add(objField);
                                        }
                                    }
                                }
                            }
                        }
                        if (gridListEditor != null && gridListEditor.Grid != null)
                        {
                            ASPxGridView gridView = (ASPxGridView)gridListEditor.Grid;
                            if (gridView != null)
                            {
                                gridView.Settings.UseFixedTableLayout = true;
                                gridView.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
                                gridView.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                                foreach (WebColumnBase column in gridView.Columns)
                                {
                                    if (column.Name == "SelectionCommandColumn" || column.Name == "Test" || column.Name == "Containers")
                                    {
                                        //gridView.VisibleColumns[column.Name].FixedStyle = GridViewColumnFixedStyle.Left;
                                        //column.Width = 5;
                                    }
                                    else
                                    {
                                        IColumnInfo columnInfo = ((IDataItemTemplateInfoProvider)gridListEditor).GetColumnInfo(column);
                                        if (columnInfo != null)
                                        {
                                            SampleMatrixSetupFields curField = lstFields.FirstOrDefault(i => i.FieldID == columnInfo.Model.Id);
                                            if (curField != null)
                                            {
                                                if (columnInfo.Model.Id == "Containers" || columnInfo.Model.Id == "BottleQty")
                                                {
                                                    column.Visible = false;
                                                }
                                                else
                                                {
                                                    column.Visible = true;
                                                    if (!string.IsNullOrEmpty(curField.FieldCustomCaption))
                                                    {
                                                        column.Caption = curField.FieldCustomCaption;
                                                    }
                                                    else
                                                    {
                                                        column.Caption = curField.FieldCaption;
                                                    }
                                                    if (curField.SortOrder > 0)
                                                    {
                                                        //column.VisibleIndex = curField.SortOrder+3;
                                                        column.SetColVisibleIndex(curField.SortOrder + 3);
                                                    }
                                                    if (curField.Freeze)
                                                    {
                                                        gridView.VisibleColumns[columnInfo.Model.Id].FixedStyle = GridViewColumnFixedStyle.Left;
                                                    }
                                                    if (curField.Width > 0)
                                                    {
                                                        column.Width = curField.Width;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (lstFields.Count == 0)
                                                {
                                                    if (columnInfo.Model.Id == "SampleID" || columnInfo.Model.Id == "SampleName" || columnInfo.Model.Id == "VisualMatrix" || columnInfo.Model.Id == "RecievedDate"
                                                                                               || columnInfo.Model.Id == "ClientSampleID" /*|| columnInfo.Model.Id == "SamplingLocation"*/ || columnInfo.Model.Id == "CollectDate" || columnInfo.Model.Id == "CollectTimeDisplay"
                                                                                               || columnInfo.Model.Id == "SampleSource" /*|| columnInfo.Model.Id == "SysSampleCode"*/ || columnInfo.Model.Id == "Hold" || columnInfo.Model.Id == "NotReport" || columnInfo.Model.Id == "ExcludeInvoice")
                                                    {
                                                        column.Visible = true;
                                                    }
                                                    else if (objsamplecheckin.IsSampling)
                                                    {
                                                        if (columnInfo.Model.Id == "StationLocation" || columnInfo.Model.Id == "AlternativeStation")
                                                        {
                                                            column.Visible = true;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        column.Visible = false;
                                                    }
                                                }
                                                else
                                                {
                                                    column.Visible = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //else if (View.Id == "Samplecheckin_CustomDueDates_ListView")
                //{
                //    ASPxGridListEditor gridlistEditor = ((ListView)View).Editor as ASPxGridListEditor;
                //    gridlistEditor.Grid.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
                //    ICallbackManagerHolder selparameter = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                //    selparameter.CallbackManager.RegisterHandler("CustomDueDates", this);
                //    gridlistEditor.Grid.HtmlDataCellPrepared += Grid_HtmlDataCellPrepared;
                //    gridlistEditor.Grid.ClientSideEvents.FocusedCellChanging = @"function(s, e) 
                //        {
                //            var fieldName = e.cellInfo.column.fieldName;
                //            sessionStorage.setItem('CustomDueDateFocusedColumn', fieldName);
                //        }";
                //    gridlistEditor.Grid.ClientSideEvents.BatchEditEndEditing = @"function(s, e) 
                //        {
                //            var fieldName = sessionStorage.getItem('CustomDueDateFocusedColumn');
                //            if(fieldName == 'DueDate')
                //            {
                //                var cell = s.GetColumnByField(fieldName);
                //                var cellvalue = e.rowValues[cell.index].value;
                //                var date = new Date(cellvalue);
                //                var mnth = ('0' + (date.getMonth() + 1)).slice(-2);
                //                var day = ('0' + date.getDate()).slice(-2);
                //                RaiseXafCallback(globalCallbackControl, 'CustomDueDates', fieldName+'|'+e.visibleIndex+'|'+[date.getFullYear(), mnth, day].join('-'), '', false)
                //            }
                //        }";
                //}
                else if (View.Id == "Testparameter_ListView_Parameter")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null)
                    {
                        gridListEditor.Grid.Load += Grid_Load;
                        gridListEditor.Grid.SettingsBehavior.SortMode = DevExpress.XtraGrid.ColumnSortMode.Custom;
                        gridListEditor.Grid.CustomColumnSort += Grid_CustomColumnSort;
                        gridListEditor.Grid.SettingsBehavior.ProcessSelectionChangedOnServer = true;
                        gridListEditor.Grid.ClientSideEvents.Init = @"function(s,e){ s.RowClick.ClearHandlers(); }";
                    }
                }
                else if (View.Id == "COCSettings_ListView_SampleRegistration_ImportCOC")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    gridListEditor.Grid.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
                    gridListEditor.Grid.ClientSideEvents.BatchEditEndEditing = @"function(s, e) {
                            s.timerHandle = setTimeout(function() {  
                                 if (s.batchEditApi.HasChanges()) {  
                                   s.UpdateEdit();  
                                 } 
                               }, 20);}";
                }

                else if (View.Id == "Samplecheckin_CustomDueDates_ListView")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    //if (gridListEditor != null && gridListEditor.Grid != null)
                    //{
                    //    gridListEditor.Grid.UpdateEdit();
                    //}
                    gridListEditor.Grid.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
                    ICallbackManagerHolder selparameter = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    selparameter.CallbackManager.RegisterHandler("CustomDueDates", this);
                    gridListEditor.Grid.HtmlDataCellPrepared += Grid_HtmlDataCellPrepared;
                    gridListEditor.Grid.JSProperties["cpDefaultduedatemsg"] = CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "CRDueDate");
                    gridListEditor.Grid.JSProperties["cpduedatemsg"] = CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "validduedate");
                    gridListEditor.Grid.ClientSideEvents.Init = @"function(s,e){s.UpdateEdit();}";

                    if (objPermissionInfo.SampleRegIsWrite == false)
                    {
                        gridListEditor.Grid.ClientSideEvents.BatchEditStartEditing = @"function(s,e){
                    e.cancel = true;

                    }";
                    }
                    else
                    {
                        gridListEditor.Grid.ClientSideEvents.FocusedCellChanging = @"function(s, e) 
                        {
                            if(sessionStorage.getItem('CurrFocusedColumn') == null)
                                {
                                    sessionStorage.setItem('PrevFocusedColumn', e.cellInfo.column.fieldName);
                                    sessionStorage.setItem('CurrFocusedColumn', e.cellInfo.column.fieldName);
                                }
                                else
                                {
                                    var precolumn = sessionStorage.getItem('CurrFocusedColumn');
                                    sessionStorage.setItem('PrevFocusedColumn', precolumn);                           
                                    sessionStorage.setItem('CurrFocusedColumn', e.cellInfo.column.fieldName);
                                }             
                        }";
                        gridListEditor.Grid.ClientSideEvents.BatchEditEndEditing = @"function(s, e) 
                                                {
                                                    s.timerHandle = setTimeout(function() 
                                                    {

                        var duedate = s.batchEditApi.GetCellValue(e.visibleIndex, 'DueDate');
                        var defaultduedate = s.batchEditApi.GetCellValue(e.visibleIndex, 'DefaultDueDate');
                        var dt = new Date();
                        var today=dt.toISOString().split('T')[0];
                        var fieldName = sessionStorage.getItem('PrevFocusedColumn');
                        if(dt != null && duedate != null && defaultduedate != null)
                          {  
                             var duedates=duedate.toISOString().split('T')[0];
                             var defaultduedates=defaultduedate.toISOString().split('T')[0];
                             if( defaultduedates< duedates)  
                                {
                                    alert(s.cpDefaultduedatemsg);
                                    s.batchEditApi.SetCellValue(e.visibleIndex, 'DueDate', null);
                                    s.UpdateEdit();
                                } 
                              else if(today > duedate)
                                {
                                    alert(s.cpduedatemsg);
                                    s.batchEditApi.SetCellValue(e.visibleIndex, 'DueDate', null);
                                    s.UpdateEdit();
                                }
                          }
                           if(fieldName == 'DueDate' && s.batchEditApi.HasChanges(e.visibleIndex))
                            {
                              RaiseXafCallback(globalCallbackControl, 'CustomDueDates', 'DueDate' +'|'+e.visibleIndex, '', false)
                            }  
                          else if(fieldName == 'TAT.Oid' && s.batchEditApi.HasChanges(e.visibleIndex))
                           {
                              RaiseXafCallback(globalCallbackControl, 'CustomDueDates', 'TAT' +'|'+e.visibleIndex, '', false)
                           }                  
                       }, 100); 
                    }";
                        gridListEditor.Grid.ClientSideEvents.BatchEditChangesSaving = @"function(s, e){
                        for (var i in e.updatedValues) { 
var duedate = s.batchEditApi.GetCellValue(i, 'DueDate',false);
var defaultduedate = s.batchEditApi.GetCellValue(i, 'DefaultDueDate',false);
var dt = new Date();
var today=dt.toISOString().split('T')[0];
    if(dt != null && duedate != null && defaultduedate != null)
    {    
         var duedates=duedate.toISOString().split('T')[0];
         var defaultduedates=defaultduedate.toISOString().split('T')[0];
        if( defaultduedates< duedates)  
              {
                alert(s.cpDefaultduedatemsg);
                s.batchEditApi.SetCellValue(e.visibleIndex, 'DueDate', null);
                s.UpdateEdit();
              } 
              else if(today > duedate)
              {
              alert(s.cpduedatemsg);
              s.batchEditApi.SetCellValue(e.visibleIndex, 'DueDate', null);
              s.UpdateEdit();
              }
    }
                            ////var CollectTimeDisplay = s.batchEditApi.GetCellValue(i, 'CollectTimeDisplay', false);
                            ////if(CollectTimeDisplay == null || CollectTimeDisplay.toString().length ==0){
                            ////   s.batchEditApi.SetCellValue(i, 'CollectTimeDisplay', '00:00');
                            ////}
                           }  
                        }";
                    }
                }
                else if (base.View != null && (base.View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || base.View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History"))
                {
                    Samplecheckin objsampreg = (Samplecheckin)View.CurrentObject;
                    if (objsampreg.NPTest == null)
                    {
                        ListPropertyEditor lstccd = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                        ListView lstcustomduedate = lstccd.ListView;
                        if (lstcustomduedate != null && lstcustomduedate.CollectionSource.List.Count > 0)
                        {
                            foreach (CustomDueDate clr in lstcustomduedate.CollectionSource.List.Cast<CustomDueDate>().ToList())
                            {
                                lstcustomduedate.CollectionSource.Remove(clr);
                            }
                        }
                    }
                    if (objPermissionInfo.SampleRegIsWrite == true && ((DetailView)View).ViewEditMode == ViewEditMode.View)
                    {
                        objPermissionInfo.SampleRegIsWrite = false;
                    }
                    if (objInfo.ClientName == null || objInfo.ClientName.Length == 0)
                    {
                        Samplecheckin objsamplecheckin = (Samplecheckin)View.CurrentObject;
                        if (objsamplecheckin != null && objsamplecheckin.ClientName != null)
                        {
                            objInfo.ClientName = objsamplecheckin.ClientName.CustomerName;
                        }
                        if (objsamplecheckin != null && objsamplecheckin.ProjectID != null)
                        {
                            objInfo.ProjectName = objsamplecheckin.ProjectID.ProjectName;
                        }
                        if (CNInfo.SCJobId == null || CNInfo.SCSampleMatries == null)
                        {
                            CNInfo.SCJobId = objsamplecheckin.JobID;
                            if (!string.IsNullOrEmpty(objsamplecheckin.SampleMatries))
                            {
                                StringBuilder sb = new StringBuilder();
                                foreach (string strMatrix in objsamplecheckin.SampleMatries.Split(';'))
                                {
                                    VisualMatrix objSM = ObjectSpace.GetObjectByKey<VisualMatrix>(new Guid(strMatrix));
                                    if (sb.Length > 0)
                                    {
                                        sb.Append(";"); // Add semicolon before appending the next name
                                    }
                                    sb.Append(objSM.VisualMatrixName);
                                }
                                CNInfo.SCSampleMatries = sb.ToString();
                            }

                        }
                    }
                    if (View.CurrentObject != null)
                    {
                        IObjectSpace os = Application.CreateObjectSpace();
                        Samplecheckin sample = View.ObjectSpace.GetObject((Samplecheckin)View.CurrentObject);
                        if (sample != null)
                        {
                            btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = false;
                            int sampleno = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", sample.Oid));
                            //CurrentLanguage currentLanguage = ObjectSpace.FindObject<CurrentLanguage>(CriteriaOperator.Parse(""));
                            if (objLanguage.strcurlanguage != "En")
                            {
                                //Sample.Caption = "样品" + "(" + sampleno + ")";
                                Sample.Caption = "样液样品" + "(" + sampleno + ")";
                                if (this.Actions["btnSampleTest"] != null)
                                {
                                    this.Actions["btnSampleTest"].Caption = "Tests" + "(" + View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", sample.Oid)).Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().Count() + ")";
                                }
                                if (this.Actions["btnBottleAllocation"] != null)
                                {
                                    this.Actions["btnBottleAllocation"].Caption = "Containers" + "(" + View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", sample.Oid)).Sum(i => i.Qty) + ")";
                                }
                            }
                            else
                            {
                                Sample.Caption = "Samples" + "(" + sampleno + ")";
                                if (this.Actions["btnSampleTest"] != null)
                                {
                                    this.Actions["btnSampleTest"].Caption = "Tests" + "(" + View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", sample.Oid)).Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().Count() + ")";
                                }
                                if (this.Actions["btnBottleAllocation"] != null)
                                {
                                    this.Actions["btnBottleAllocation"].Caption = "Containers" + "(" + os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", sample.Oid)).Sum(i => i.Qty) + ")";
                                }
                            }
                            os.Dispose();

                            if (objPermissionInfo.SampleRegIsWrite == false)
                            {
                                btnImportSamples.Active["ShowImport"] = false;
                                btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = false;
                            }
                            else
                            {
                                //btnImportSamples.Active["showImport"] = true;
                                btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = true;
                                if (sampleno == 0)
                                {
                                    btnImportSamples.Active["ShowImport"] = true;
                                    SRInfo.ImportToNewJob = false;
                                }
                                else if (sampleno == 1)
                                {
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn samplelogin = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", sample.Oid));
                                    if (samplelogin != null && samplelogin.VisualMatrix != null)
                                    {
                                        btnImportSamples.Active["ShowImport"] = false;
                                    }
                                    else
                                    {
                                        btnImportSamples.Active["ShowImport"] = true;
                                        SRInfo.ImportToNewJob = false;
                                    }
                                }
                                else
                                {
                                    btnImportSamples.Active["ShowImport"] = false;
                                }
                            }
                        }
                        else
                        {
                            if (((Modules.BusinessObjects.Hr.Employee)SecuritySystem.CurrentUser).Roles.FirstOrDefault(i => i.IsAdministrative) == null && objPermissionInfo.SampleRegIsWrite == false)
                            {
                                btnImportSamples.Active["ShowImport"] = false;
                                btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = false;
                            }
                            else
                            {
                                btnImportSamples.Active["ShowImport"] = true;
                                SRInfo.ImportToNewJob = true;
                                btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = true;
                            }
                            //btnImportSamples.Active["ShowImport"] = true;
                        }
                        //os.Dispose();
                    }
                    SRInfo.ViewEditMode = (View as DetailView).ViewEditMode;

                    ICallbackManagerHolder clause = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    clause.CallbackManager.RegisterHandler("MethodChanged", this);
                    foreach (ViewItem item in ((DetailView)View).Items)
                    {
                        if (item.GetType() == typeof(ASPxStringPropertyEditor))
                        {
                            ASPxStringPropertyEditor propertyEditor = item as ASPxStringPropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.BackColor = Color.LightYellow;
                                ASPxEditBase editor = (ASPxEditBase)propertyEditor.Editor;
                                if (editor != null)
                                {
                                    editor.ClientInstanceName = propertyEditor.Model.Id;
                                }
                            }
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxDateTimePropertyEditor))
                        {
                            ASPxDateTimePropertyEditor propertyEditor = item as ASPxDateTimePropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.BackColor = Color.LightYellow;
                                ASPxEditBase editor = (ASPxEditBase)propertyEditor.Editor;
                                if (editor != null)
                                {
                                    editor.ClientInstanceName = propertyEditor.Model.Id;
                                }
                                if (propertyEditor.Id == "DateExpect")
                                {
                                    propertyEditor.Editor.CalendarCustomDisabledDate += Editor_CalendarCustomDisabledDate;
                                }
                            }
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxGridLookupPropertyEditor))
                        {
                            ASPxGridLookupPropertyEditor propertyEditor = item as ASPxGridLookupPropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.BackColor = Color.LightYellow;
                                if (propertyEditor.Control != null)
                                {
                                    AssignClientSideLogic(propertyEditor);
                                }
                                //else
                                //{
                                //    propertyEditor.ControlCreated += new EventHandler<EventArgs>(propertyEditor_ControlCreated);
                                //}
                                if (propertyEditor.PropertyName == "TAT")
                                {
                                    ASPxGridLookup editor = (ASPxGridLookup)propertyEditor.Editor;
                                    if (editor != null)
                                    {
                                        editor.GridView.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                                        editor.GridView.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                                        editor.GridView.Settings.VerticalScrollableHeight = 200;
                                    }
                                }
                                if (propertyEditor.PropertyName == "ClientName")
                                {
                                    ASPxGridLookup editor = (ASPxGridLookup)propertyEditor.Editor;
                                    if (editor != null)
                                    {
                                        editor.GridView.Settings.VerticalScrollableHeight = 270;
                                    }
                                }
                            }
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(FileDataPropertyEditor))
                        {
                            FileDataPropertyEditor propertyEditor = item as FileDataPropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.BackColor = Color.LightYellow;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxEnumPropertyEditor))
                        {
                            ASPxEnumPropertyEditor propertyEditor = item as ASPxEnumPropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.BackColor = Color.LightYellow;
                                ASPxEditBase editor = (ASPxEditBase)propertyEditor.Editor;
                                if (editor != null)
                                {
                                    editor.ClientInstanceName = propertyEditor.Model.Id;
                                }
                            }
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxLookupPropertyEditor))
                        {
                            ASPxLookupPropertyEditor propertyEditor = item as ASPxLookupPropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                if (propertyEditor.FindEdit != null && propertyEditor.FindEdit.Visible)
                                {
                                    propertyEditor.FindEdit.Editor.BackColor = Color.LightYellow;

                                    ASPxEditBase editor = (ASPxEditBase)propertyEditor.Editor;
                                    if (editor != null)
                                    {
                                        editor.ClientInstanceName = propertyEditor.Model.Id;
                                    }
                                }
                                else if (propertyEditor.DropDownEdit != null)
                                {
                                    propertyEditor.DropDownEdit.DropDown.BackColor = Color.LightYellow;
                                }
                                else
                                {
                                    propertyEditor.Editor.BackColor = Color.LightYellow;
                                }
                            }
                            if (propertyEditor != null && propertyEditor.DropDownEdit != null && propertyEditor.DropDownEdit.DropDown != null)
                            {
                                propertyEditor.DropDownEdit.DropDown.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxIntPropertyEditor))
                        {
                            ASPxIntPropertyEditor propertyEditor = item as ASPxIntPropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                if (propertyEditor.Editor is ASPxEditBase)
                                {
                                    ASPxEditBase editor = (ASPxEditBase)propertyEditor.Editor;
                                    if (editor != null)
                                    {
                                        editor.ClientInstanceName = propertyEditor.Model.Id;
                                    }
                                }
                            }
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                                if (propertyEditor.Id == "NoOfSamples")
                                {
                                    if (SRInfo.isNoOfSampleDisable && !SRInfo.BoolReset && !IsReset)
                                    {
                                        propertyEditor.AllowEdit.SetItemValue("stat", false);
                                    }
                                    else
                                    {
                                        propertyEditor.AllowEdit.SetItemValue("stat", true);
                                        propertyEditor.Editor.BackColor = Color.LightYellow;
                                    }
                                    if ((item as ASPxIntPropertyEditor).Editor != null)
                                        (item as ASPxIntPropertyEditor).Editor.Load += Editor_Load;
                                }
                            }
                        }
                        else if (item.GetType() == typeof(ASPxCheckedLookupStringPropertyEditor))
                        {
                            ASPxCheckedLookupStringPropertyEditor propertyEditor = item as ASPxCheckedLookupStringPropertyEditor;
                            if (propertyEditor != null && propertyEditor.AllowEdit && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.BackColor = Color.LightYellow;
                            }
                            ASPxGridLookup lookup = (ASPxGridLookup)propertyEditor.Editor;
                            if (lookup != null && propertyEditor.Id == "SampleMatries")
                            {
                                //lookup.GridViewProperties.Settings.ShowFilterRow = true;
                                lookup.GridView.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                                lookup.GridView.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                                lookup.GridView.Settings.VerticalScrollableHeight = 200;
                                lookup.GridViewProperties.SettingsSearchPanel.Visible = true;
                                foreach (WebColumnBase columns in lookup.GridView.VisibleColumns)
                                {
                                    if (columns.Index == 1)
                                    {
                                        columns.Caption = "Sample Matrix";
                                    }
                                }
                            }
                            else if (lookup != null && propertyEditor.Id == "SampleCategory")
                            {
                                foreach (WebColumnBase columns in lookup.GridView.VisibleColumns)
                                {
                                    if (columns.Index == 1)
                                    {
                                        columns.Caption = "Sample Category";
                                    }
                                }
                            }
                        }

                    }
                    if (Frame != null && Frame is NestedFrame)
                    {
                        NestedFrame nestedFrame = (NestedFrame)Frame;
                        if (nestedFrame != null && nestedFrame.ViewItem != null)
                        {
                            CompositeView cv = nestedFrame.ViewItem.View;
                            if (cv != null && cv.Id == "SampleRegistration")
                            {
                                Sample.Active["ShowSample"] = false;
                            }
                        }
                    }
                    else
                    {
                        Sample.Active["ShowSample"] = true;
                    }
                }
                else if (View.Id == "SampleBottleAllocation_DetailView_SampleTransfer")
                {
                    Samplecheckin sample = View.ObjectSpace.GetObject((SampleBottleAllocation)View.CurrentObject).SampleRegistration.JobID;
                    if (sample != null)
                    {
                        int sampleno = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", sample.Oid));
                        if (objLanguage.strcurlanguage != "En")
                        {
                            Sample.Caption = "样液样品" + "(" + sampleno + ")";
                            if (this.Actions["btnSampleTest"] != null)
                            {
                                this.Actions["btnSampleTest"].Caption = "Tests" + "(" + View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", sample.Oid)).Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().Count() + ")";
                            }
                            if (this.Actions["btnBottleAllocation"] != null)
                            {
                                this.Actions["btnBottleAllocation"].Caption = "Containers" + "(" + View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", sample.Oid)).Sum(i => i.Qty) + ")";
                            }
                        }
                        else
                        {
                            Sample.Caption = "Samples" + "(" + sampleno + ")";
                            if (this.Actions["btnSampleTest"] != null)
                            {
                                this.Actions["btnSampleTest"].Caption = "Tests" + "(" + View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", sample.Oid)).Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().Count() + ")";
                            }
                            if (this.Actions["btnBottleAllocation"] != null)
                            {
                                this.Actions["btnBottleAllocation"].Caption = "Containers" + "(" + View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", sample.Oid)).Sum(i => i.Qty) + ")";
                            }
                        }
                    }
                }
                else if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    ASPxGridView gridView = gridListEditor.Grid;
                    if (gridView != null)
                    {
                        string strscreenwidth = System.Web.HttpContext.Current.Request.Cookies.Get("screenwidth").Value;
                        if (Convert.ToInt32(strscreenwidth) < 1500)
                        {
                            gridView.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
                        }
                    }
                }
                else if (View.Id == "Test" && SRInfo.IsTestcanFilter)
                {
                    SRInfo.IsTestcanFilter = false;
                    List<object> groups = new List<object>();
                    DashboardViewItem TestViewMain = ((DashboardView)View).FindItem("TestViewMain") as DashboardViewItem;
                    DashboardViewItem TestViewSub = ((DashboardView)View).FindItem("TestViewSub") as DashboardViewItem;
                    DashboardViewItem TestViewSubChild = ((DashboardView)View).FindItem("TestViewSubChild") as DashboardViewItem;
                    UnitOfWork uow = new UnitOfWork(((XPObjectSpace)this.ObjectSpace).Session.DataLayer);
                    using (XPView lstview = new XPView(((XPObjectSpace)this.ObjectSpace).Session, typeof(Testparameter)))
                    {
                        string criteria = string.Empty;
                        if (SRInfo.lstdupfilterstr != null && SRInfo.lstdupfilterstr.Count > 0)
                        {
                            foreach (string test in SRInfo.lstdupfilterstr)
                            {
                                var testsplit = test.Split('|');
                                if (testsplit.Length == 4)
                                {
                                    XPClassInfo TestParameterinfo = uow.GetClassInfo(typeof(Testparameter));
                                    IList<Testparameter> testparameters = uow.GetObjects(TestParameterinfo, CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MethodName.MethodNumber] ='" + testsplit[1] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[2] + "' and [Component.Components] ='" + testsplit[3] + "') And TestMethod.GCRecord Is Null And TestMethod.MethodName.GCRecord Is Null And TestMethod.MatrixName.GCRecord Is Null And [QCType.QCTypeName] = 'Sample'"), null, int.MaxValue, false, true).Cast<Testparameter>().ToList();
                                    //IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MethodName.MethodNumber] ='" + testsplit[1] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[2] + "' and [Component.Components] ='" + testsplit[3] + "')"));
                                    //IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MethodName.MethodNumber] ='" + testsplit[1] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[2] + "')"));
                                    //IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MethodName.MethodName] ='" + testsplit[1] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[2] + "')"));
                                    if (criteria == string.Empty)
                                    {
                                        criteria = "Not [Oid] In(" + string.Format("'{0}'", string.Join("','", testparameters.Select(i => i.Oid.ToString().Replace("'", "''")))) + ")";
                                    }
                                    else
                                    {
                                        criteria = criteria + "and Not [Oid] In(" + string.Format("'{0}'", string.Join("','", testparameters.Select(i => i.Oid.ToString().Replace("'", "''")))) + ")";
                                    }
                                }
                                else if (testsplit.Length == 3)
                                {
                                    XPClassInfo TestParameterinfo = uow.GetClassInfo(typeof(Testparameter));
                                    IList<Testparameter> testparameters = uow.GetObjects(TestParameterinfo, CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[1] + "' and [Component.Components] ='" + testsplit[2] + "') And TestMethod.GCRecord Is Null And TestMethod.MethodName.GCRecord Is Null And TestMethod.MatrixName.GCRecord Is Null And [QCType.QCTypeName] = 'Sample'"), null, int.MaxValue, false, true).Cast<Testparameter>().ToList();
                                    //IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[1] + "' and [Component.Components] ='" + testsplit[2] + "')")); /*and [TestMethod.MethodName.MethodNumber] ='" + testsplit[1] + "' */
                                    if (criteria == string.Empty)
                                    {
                                        criteria = "Not [Oid] In(" + string.Format("'{0}'", string.Join("','", testparameters.Select(i => i.Oid.ToString().Replace("'", "''")))) + ")";
                                    }
                                    else
                                    {
                                        criteria = criteria + "and Not [Oid] In(" + string.Format("'{0}'", string.Join("','", testparameters.Select(i => i.Oid.ToString().Replace("'", "''")))) + ")";
                                    }
                                }
                            }
                            //lstview.Criteria= CriteriaOperator.Parse(criteria);
                        }
                        if (!string.IsNullOrEmpty(criteria))
                        {
                            lstview.Criteria = new GroupOperator(GroupOperatorType.And,
                                       CriteriaOperator.Parse(criteria)
                                       , CriteriaOperator.Parse("TestMethod.GCRecord Is Null And TestMethod.MatrixName.GCRecord Is Null And (([IsGroup] = False And [TestMethod.MethodName.GCRecord] Is Null And  [QCType.QCTypeName] = 'Sample') Or [IsGroup] = True) "));
                        }
                        else
                        {
                            lstview.Criteria = CriteriaOperator.Parse("TestMethod.GCRecord Is Null And TestMethod.MatrixName.GCRecord Is Null And (([IsGroup] = False And [TestMethod.MethodName.GCRecord] Is Null And  [QCType.QCTypeName] = 'Sample') Or [IsGroup] = True) ");
                        }
                        lstview.Properties.Add(new ViewProperty("TTestName", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.TestName", true, true));
                        lstview.Properties.Add(new ViewProperty("TMethodName", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.MethodName.MethodNumber", true, true));
                        lstview.Properties.Add(new ViewProperty("TMatrixName", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.MatrixName.MatrixName", true, true));
                        lstview.Properties.Add(new ViewProperty("TComponentName", DevExpress.Xpo.SortDirection.Ascending, "Component.Components", true, true));
                        lstview.Properties.Add(new ViewProperty("TIsGroup", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.IsGroup", true, true));
                        lstview.Properties.Add(new ViewProperty("Toid", DevExpress.Xpo.SortDirection.Ascending, "MAX(Oid)", false, true));
                        foreach (ViewRecord rec in lstview)
                            groups.Add(rec["Toid"]);
                        if (SRInfo.lstTestParameter != null && SRInfo.lstTestParameter.Count > 0)
                        {
                            if (SRInfo.lstdupfilterguid != null && SRInfo.lstdupfilterguid.Count > 0)
                            {
                                foreach (Guid guid in SRInfo.lstdupfilterguid)
                                {
                                    groups.Add(guid);
                                }
                            }
                            ((ListView)TestViewMain.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("Not [Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                            ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                        }
                        else
                        {
                            ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] is null");
                        }
                        ((ListView)TestViewMain.InnerView).CollectionSource.Criteria["dupfilter"] = new InOperator("Oid", groups);
                        ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["dupfilter"] = new InOperator("Oid", groups);
                        ((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] is null");

                        foreach (Testparameter testparameter in ((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().ToList())
                        {
                            SampleParameter objsampleparameter = TestViewSub.InnerView.ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ? And [Testparameter.Oid] = ?", SRInfo.SampleOid, testparameter.Oid));
                            if (objsampleparameter != null)
                            {
                                testparameter.TAT = objsampleparameter.TAT;
                            }
                        }
                    }
                    if (objSLInfo.SLVisualMatrixName != null && staticText != null)
                    {
                        staticText.Text = objSLInfo.SLVisualMatrixName;
                    }
                }
                else if (View.Id == "AnalysisPricing_ListView_Quotes_SampleRegistration")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    gridListEditor.Grid.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
                    gridListEditor.Grid.Load += Grid_Load;
                    //((ListView)View).CollectionSource.Criteria["Filter"] = CriteriaOperator.Parse(string.Format("[CRMQuotes] = '{0}' and [Matrix.MatrixName] in ({1}) and TAT = '{2}'", SRInfo .CurrentJob .QuoteID.Oid, straMatrix, objSample.TAT.Oid));
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = ((Samplecheckin)Application.MainWindow.View.CurrentObject);
                    string straMatrix = string.Empty;
                    if (objsamplecheckin.SampleMatries != null)
                    {
                        strSampleMatrix = objsamplecheckin.SampleMatries.Split(';');

                        List<Matrix> lstSRvisualmat = new List<Matrix>();
                        foreach (string strvmoid in strSampleMatrix.ToList())
                        {
                            VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
                            if (lstvmatobj != null)
                            {
                                lstSRvisualmat.Add(lstvmatobj.MatrixName);
                            }
                        }
                        straMatrix = string.Join("','", lstSRvisualmat.Select(i => i.MatrixName).ToList().ToArray());

                        straMatrix = "'" + straMatrix + "'";
                    }
                    ((ListView)View).CollectionSource.Criteria["Filter"] = CriteriaOperator.Parse(string.Format("[Matrix.MatrixName] in ( {0} )", straMatrix));
                }
                else if (View.Id == "CRMQuotes_QuotesItemChargePrice_ListView_ViewMode")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    gridListEditor.Grid.Load += Grid_Load;
                }
                else if (View.Id == "CRMQuotes_DetailView_Reviewd_History_SampleRegistration")
                {
                    Samplecheckin maincurrentobj = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                    if (maincurrentobj != null)
                    {
                        DevExpress.ExpressApp.Web.PopupWindow nestedFrame = (DevExpress.ExpressApp.Web.PopupWindow)Frame;
                        nestedFrame.View.CurrentObject = View.ObjectSpace.GetObjectByKey<CRMQuotes>(maincurrentobj.QuoteID.Oid);
                        //view = maincurrentobj.QuoteID;
                        //if (view != null && view is DetailView)
                        //{
                        //    CRMQuotes  currentobj = (CRMQuotes)view.CurrentObject;
                        //    currentobj    = maincurrentobj.QuoteID   ;
                        //}
                    }
                }
                if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    //gridListEditor.Grid.SettingsBehavior.AllowSelectSingleRowOnly = true;
                    //gridListEditor.Grid.SettingsBehavior.AllowSelectByRowClick = true;
                    //gridListEditor.Grid.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                    gridListEditor.Grid.SettingsPager.AlwaysShowPager = true;
                    gridListEditor.Grid.SelectionChanged += Grid_SelectionChanged;
                    ICallbackManagerHolder seltest = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    seltest.CallbackManager.RegisterHandler("Subout", this);
                    seltest.CallbackManager.RegisterHandler("Hold", this);
                    uncheckSampleSubout = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    uncheckSampleSubout.CallbackManager.RegisterHandler("uncheckSampleSubout", this);
                    string script = seltest.CallbackManager.GetScript();
                    script = string.Format(CultureInfo.InvariantCulture, @"
                        function(s, e) {{ 
                            var xafCallback = function() {{
                            s.EndCallback.RemoveHandler(xafCallback);
                            {0}
                            }};
                            s.EndCallback.AddHandler(xafCallback);
                        }}
                    ", script);
                    gridListEditor.Grid.ClientSideEvents.SelectionChanged = script;
                    gridListEditor.Grid.ClientSideEvents.Init = @"function(s,e)
                    { 
                    s.SetWidth(470); 
                    s.RowClick.ClearHandlers();
                    if(s.cpCanGridRefresh)
                    {
                        s.Refresh();
                        s.cpCanGridRefresh = false;
                    }
                    }";
                    gridListEditor.Grid.ClientSideEvents.FocusedCellChanging = @"function(s, e) 
                        {
                                if(sessionStorage.getItem('CurrFocusedColumnTest') == null)
                                {
                                    sessionStorage.setItem('PrevFocusedColumnTest', e.cellInfo.column.fieldName);
                                    sessionStorage.setItem('CurrFocusedColumnTest', e.cellInfo.column.fieldName);
                                }
                                else
                                {
                                    var precolumn = sessionStorage.getItem('CurrFocusedColumnTest');
                                    sessionStorage.setItem('PrevFocusedColumnTest', precolumn);                           
                                    sessionStorage.setItem('CurrFocusedColumnTest', e.cellInfo.column.fieldName);
                                }                                 
                        }";

                    gridListEditor.Grid.ClientSideEvents.BatchEditStartEditing = @"function(s,e){
                              if(e.focusedColumn.fieldName == 'SubOut')
                                {
                                   var IsAttched= s.batchEditApi.GetCellValue(e.visibleIndex,'IsSubutAttached');
                                   console.log(IsAttched);
                                   if(IsAttched!=null && IsAttched)
                                     {
                                          e.cancel = true;
                                          alert('Test alredy attached in subout.')
                                     }
                                   
                                }
                 
                      }";

                    gridListEditor.Grid.ClientSideEvents.BatchEditEndEditing = @"function(s, e) 
                                                                                {


                    window.setTimeout(function() {
                    s.UpdateEdit();
                    }, 100);
                                                                                    var fieldName = sessionStorage.getItem('PrevFocusedColumnTest'); 

                                                                                    //var value= s.batchEditApi.GetCellValue(e.visibleIndex,'SubOut');
                                                                                    //alert(value);
                                                                                  if(s.batchEditApi.HasChanges(e.visibleIndex) && fieldName=='SubOut')
                                                                                  {
                                                                                    var value= s.batchEditApi.GetCellValue(e.visibleIndex,'SubOut');
                                                                                    if(value == true)
                                                                                    {
                                                                                        RaiseXafCallback(globalCallbackControl, 'Subout', 'SuboutSelected|'+e.visibleIndex, '', false);  
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        RaiseXafCallback(globalCallbackControl, 'Subout', 'SuboutUnSelected|'+e.visibleIndex, '', false);  
                                                                                      }
                                                                                  }

                                                                                  else if(s.batchEditApi.HasChanges(e.visibleIndex) && fieldName=='Hold')
                                                                                  {
                                                                                         var value= s.batchEditApi.GetCellValue(e.visibleIndex,'Hold');
                                                                                         if(value == true)
                                                                                         {   
                                                                                             RaiseXafCallback(globalCallbackControl, 'Hold', 'HoldSelected|'+e.visibleIndex, '', false);  
                                                                                         }
                                                                                         else
                                                                                         {
                                                                                            RaiseXafCallback(globalCallbackControl, 'Hold', 'HoldUnSelected|'+e.visibleIndex, '', false);  
                                                                                         }
                                                                                    }
                                                                                }";
                    Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                    UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = uow.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.SampleOid));
                    if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Count > 0 && objSamplelogin != null)
                    {
                        //foreach (string test in SRInfo.lstdupfilterSuboutstr)
                        foreach (Guid test in SRInfo.lstSubOutTest)
                        {
                            SampleParameter objsmpltest = View.ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]= ?", objSamplelogin.Oid));
                            //var testsplit = test.Split('|');
                            //IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MethodName.MethodNumber] ='" + testsplit[1] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[2] + "')"));
                            if (objsmpltest != null)
                            {
                                IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.oid] =?", test));
                                foreach (Testparameter obj in ((ListView)View).CollectionSource.List.Cast<Testparameter>().ToList())
                                {
                                    if (testparameters.Contains(obj))
                                    {
                                        obj.SubOut = true;
                                    }
                                }
                            }
                        }
                    }

                    if (SRInfo.lstdupfilterHoldstr != null && SRInfo.lstdupfilterHoldstr.Count > 0)
                    {
                        if (boolHold == false)
                        {
                            foreach (string test in SRInfo.lstdupfilterHoldstr)
                            {
                                var testsplit = test.Split('|');
                                IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("([TestMethod.TestName] ='" + testsplit[0] + "' and [TestMethod.MethodName.MethodNumber] ='" + testsplit[1] + "' and [TestMethod.MatrixName.MatrixName] ='" + testsplit[2] + "')"));
                                foreach (Testparameter obj in ((ListView)View).CollectionSource.List.Cast<Testparameter>().ToList())
                                {
                                    if (testparameters.Contains(obj))
                                    {
                                        obj.Hold = true;
                                    }

                                }
                            }
                        }

                    }


                    gridListEditor.Grid.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
                    gridListEditor.Grid.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                    gridListEditor.Grid.Settings.VerticalScrollableHeight = 300;
                }
                else if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy_Parameter")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    ICallbackManagerHolder selparameter = (ICallbackManagerHolder)WebWindow.CurrentRequestPage;
                    selparameter.CallbackManager.RegisterHandler("Test", this);
                    //gridListEditor.Grid.SettingsPager.Mode = GridViewPagerMode.ShowAllRecords;
                    gridListEditor.Grid.SettingsPager.AlwaysShowPager = true;
                    gridListEditor.Grid.CommandButtonInitialize += Grid_CommandButtonInitialize;
                    gridListEditor.Grid.Load += Grid_Load;
                    gridListEditor.Grid.SettingsBehavior.SortMode = DevExpress.XtraGrid.ColumnSortMode.Custom;
                    gridListEditor.Grid.CustomColumnSort += Grid_CustomColumnSort;
                    gridListEditor.Grid.CustomJSProperties += Grid_CustomJSProperties;
                    gridListEditor.Grid.ClientSideEvents.Init = @"function(s,e){ 
                    s.SetWidth(450); 
                    s.RowClick.ClearHandlers();
                    }";
                    gridListEditor.Grid.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                    gridListEditor.Grid.Settings.VerticalScrollableHeight = 300;
                    gridListEditor.Grid.ClientSideEvents.SelectionChanged = @"function(s,e){
                      if(e.visibleIndex != '-1')
                      {                       
                        if (s.IsRowSelectedOnPage(e.visibleIndex)) {   
                            var value = 'Testselection|Selected|' + s.GetRowKey(e.visibleIndex);
                            RaiseXafCallback(globalCallbackControl, 'Test', value, '', false);    
                        }else{
                            var value = 'Testselection|UNSelected|' + s.GetRowKey(e.visibleIndex);
                            RaiseXafCallback(globalCallbackControl, 'Test', value, '', false);    
                        }
                     }
                     else if(e.visibleIndex == '-1' && s.GetSelectedRowCount() == s.cpVisibleRowCount)
                     {        
                        RaiseXafCallback(globalCallbackControl, 'Test', 'Testselection|Selectall', '', false);                        
                     }   
                     else if(e.visibleIndex == '-1' && s.GetSelectedRowCount() == 0)
                     {
                        RaiseXafCallback(globalCallbackControl, 'Test', 'Testselection|UNSelectall', '', false);                        
                     }
                     else if(e.visibleIndex == '-1' && s.cpFilterRowCount == s.cpVisibleRowCount)
                     {        
                        RaiseXafCallback(globalCallbackControl, 'Test', 'Testselection|Selectall', '', false);                        
                     }   
                     else if(e.visibleIndex == '-1' && s.cpFilterRowCount == 0)
                     {
                        RaiseXafCallback(globalCallbackControl, 'Test', 'Testselection|UNSelectall', '', false);                        
                     }
                    }";
                }
                else if (View.Id == "Samplecheckin_Photos_ListView" || View.Id == "IndoorInspection_Photos_ListView")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null)
                    {
                        NestedFrame nestedFrame = (NestedFrame)Frame;
                        CompositeView cv = nestedFrame.ViewItem.View;
                        if (cv.CurrentObject != null)
                        {
                            if (cv.CurrentObject is Samplecheckin)
                            {
                                Samplecheckin sample = (Samplecheckin)cv.CurrentObject;
                                if (sample != null && sample.Photos != null && sample.Photos.Count > 0)
                                {
                                    gridListEditor.Grid.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                                    gridListEditor.Grid.Settings.VerticalScrollableHeight = 150;
                                }
                            }
                            //else if (cv.CurrentObject is IndoorInspection)
                            //{
                            //    IndoorInspection sample = (IndoorInspection)cv.CurrentObject;
                            //    if (sample != null && sample.Photos != null && sample.Photos.Count > 0)
                            //    {
                            //        gridListEditor.Grid.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                            //        gridListEditor.Grid.Settings.VerticalScrollableHeight = 150;
                            //    }
                            //}
                        }
                    }
                }
                if (objPermissionInfo.SampleRegistrationViewEditMode == ViewEditMode.View && View is DetailView)
                {
                    AddSample.Active["btnAddSample"] = false;
                    TestSelectionAdd.Active["btnAddSample"] = false;
                    TestSelectionRemove.Active["btnAddSample"] = false;
                    TestSelectionSave.Active["btnAddSample"] = false;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active["ShowDelete"] = false;
                    btnQuoteImportSamples.Active["QuoteImport"] = false;
                    //btnCOCImportSamples.Active["COCImport"] = false;
                    btnCOCImport.Active["COCImport"] = false;
                }
                else if (objPermissionInfo.SampleRegIsWrite)
                {
                    AddSample.Active["btnAddSample"] = true;
                    TestSelectionAdd.Active["btnAddSample"] = true;
                    TestSelectionRemove.Active["btnAddSample"] = true;
                    TestSelectionSave.Active["btnAddSample"] = true;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active["ShowDelete"] = true;
                    btnQuoteImportSamples.Active["QuoteImport"] = true;
                    //btnCOCImportSamples.Active["COCImport"] = true;
                    btnCOCImport.Active["COCImport"] = true;
                }
                if (View.Id == "SampleRegistration")
                {
                    DashboardViewItem DVsamlog = ((DashboardView)View).FindItem("SampleLogin") as DashboardViewItem;
                    if (DVsamlog != null && DVsamlog.InnerView != null && DVsamlog.InnerView is ListView)
                    {
                        Frame.GetController<ASPxGridListEditorConfirmUnsavedChangesController>().Active.RemoveItem("DisableUnsavedChangesController");
                    }
                    if (SRInfo.ViewEditMode == ViewEditMode.Edit && objPermissionInfo.SampleRegIsWrite)
                    {

                        SaveSampleRegistration.Active["showSaveAction"] = true;
                        btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = true;
                    }
                    else
                    {
                        SaveSampleRegistration.Active["showSaveAction"] = false;
                        btnImportBasicInformationAction.Active["ShowImportBasicInfo"] = false;
                    }
                    DashboardView dv = (DashboardView)Application.MainWindow.View;
                    DashboardViewItem dviSampleCheckin = (DashboardViewItem)dv.FindItem("SampleCheckin");
                    if (dviSampleCheckin != null)
                    {
                        if (dviSampleCheckin.InnerView == null)
                        {
                            dviSampleCheckin.CreateControl();
                        }
                        Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)dviSampleCheckin.InnerView.CurrentObject;
                        if (objsamplecheckin == null || objsamplecheckin.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                        {
                            SRSubmit.Active["ShowActive"] = false;
                        }
                    }
                }
                else if (View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null && gridListEditor.Grid != null)
                    {
                        gridListEditor.Grid.SettingsBehavior.SortMode = DevExpress.XtraGrid.ColumnSortMode.Custom;
                        gridListEditor.Grid.CustomColumnSort += Grid_CustomColumnSort;
                        gridListEditor.Grid.CommandButtonInitialize += Grid_CommandButtonInitialize;
                        gridListEditor.Grid.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
                        gridListEditor.Grid.Settings.VerticalScrollableHeight = 300;
                        //if (!objPermissionInfo.SampleRegIsDelete)
                        //{
                        //    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active["ShowSampleRegTestsDelete"] = objPermissionInfo.SampleRegIsDelete; 
                        //}
                    }
                }
                else if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {
                    ASPxGridListEditor aSPxGridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    aSPxGridListEditor.Grid.Load += Grid_Load;
                    aSPxGridListEditor.Grid.SelectionChanged += Grid_SelectionChanged;
                    aSPxGridListEditor.Grid.SettingsBehavior.ProcessSelectionChangedOnServer = true;

                }
                else if (View.Id == "InvoicingAnalysisCharge_ListView_PreInvoiceDetails")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor.Grid.Columns["fQty"] != null)
                    {
                        gridListEditor.Grid.Columns["fQty"].Width = 40;
                    }
                    gridListEditor.Grid.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
                }
                else if (View.Id == "Invoicing_DetailView_PreInvoiceDetails")
                {
                    foreach (ViewItem item in ((DetailView)View).Items.Where(i => i.IsCaptionVisible == true))
                    {
                        if (item is ASPxDoublePropertyEditor)
                        {
                            ASPxDoublePropertyEditor propertyEditor = (ASPxDoublePropertyEditor)item;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item is ASPxLookupPropertyEditor)
                        {
                            ASPxLookupPropertyEditor propertyEditor = (ASPxLookupPropertyEditor)item;
                            if (propertyEditor != null && propertyEditor.DropDownEdit != null && propertyEditor.DropDownEdit.DropDown != null)
                            {
                                propertyEditor.DropDownEdit.DropDown.ForeColor = Color.Black;
                            }
                        }
                        else if (item is ASPxDecimalPropertyEditor)
                        {
                            ASPxDecimalPropertyEditor propertyEditor = (ASPxDecimalPropertyEditor)item;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }

                        }
                        else if (item.GetType() == typeof(ASPxStringPropertyEditor))
                        {
                            ASPxStringPropertyEditor propertyEditor = item as ASPxStringPropertyEditor;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxCheckedLookupStringPropertyEditor))
                        {
                            ASPxCheckedLookupStringPropertyEditor propertyEditor = item as ASPxCheckedLookupStringPropertyEditor;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxDateTimePropertyEditor))
                        {
                            ASPxDateTimePropertyEditor propertyEditor = item as ASPxDateTimePropertyEditor;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxGridLookupPropertyEditor))
                        {
                            ASPxGridLookupPropertyEditor propertyEditor = item as ASPxGridLookupPropertyEditor;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxEnumPropertyEditor))
                        {
                            ASPxEnumPropertyEditor propertyEditor = item as ASPxEnumPropertyEditor;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxLookupPropertyEditor))
                        {
                            ASPxLookupPropertyEditor propertyEditor = item as ASPxLookupPropertyEditor;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                        else if (item.GetType() == typeof(ASPxIntPropertyEditor))
                        {
                            ASPxIntPropertyEditor propertyEditor = item as ASPxIntPropertyEditor;
                            if (propertyEditor != null && propertyEditor.Editor != null)
                            {
                                propertyEditor.Editor.ForeColor = Color.Black;
                            }
                        }
                    }
                }

                else if (View.Id == "SampleParameter_ListView_TestEdit")
                {
                    if (Frame is NestedFrame)
                    {
                        NestedFrame nestedFrame = (NestedFrame)Frame;
                        if (nestedFrame != null)
                        {
                            CompositeView view = nestedFrame.ViewItem.View;
                            DashboardViewItem testEditListView = ((DashboardView)view).FindItem("Test_Edit_Form") as DashboardViewItem;
                            if (testEditListView != null && testEditListView.InnerView != null)
                            {
                                Samplecheckin objSamplecheckin = testEditListView.InnerView.CurrentObject as Samplecheckin;
                                if (objSamplecheckin != null && objSamplecheckin.TestEditSampleLogIn != null)
                                {
                                    using (XPView lstview = new XPView(((XPObjectSpace)this.ObjectSpace).Session, typeof(SampleParameter)))
                                    {
                                        lstview.Criteria = CriteriaOperator.Parse("[Samplelogin.Oid] = ?", objSamplecheckin.TestEditSampleLogIn.Oid);
                                        //lstview.Criteria = CriteriaOperator.Parse("[SignOff] = True And [Samplelogin.IsNotTransferred] = false And [GCRecord] IS NULL And [Samplelogin] IS NOT NULL and ([ABID] is Null or ([ABID] is not null))");
                                        lstview.Properties.Add(new ViewProperty("SPMatrix", DevExpress.Xpo.SortDirection.Ascending, "Testparameter.TestMethod.MatrixName.MatrixName", true, true));
                                        lstview.Properties.Add(new ViewProperty("SPTest", DevExpress.Xpo.SortDirection.Ascending, "Testparameter.TestMethod.TestName", true, true));
                                        lstview.Properties.Add(new ViewProperty("SPMethod", DevExpress.Xpo.SortDirection.Ascending, "Testparameter.TestMethod.MethodName.MethodNumber", true, true));
                                        lstview.Properties.Add(new ViewProperty("SPoid", DevExpress.Xpo.SortDirection.Ascending, "MAX(Oid)", false, true));
                                        List<object> groups = new List<object>();
                                        foreach (ViewRecord rec in lstview)
                                            groups.Add(rec["SPoid"]);
                                        ((DevExpress.ExpressApp.ListView)View).CollectionSource.Criteria["TestEditFilter"] = new InOperator("Oid", groups);
                                    }
                                }
                            }
                        }
                    }
                }

                if (View.Id == "SampleLogIn_ListView_SampleRegistration_Bottle")
                {
                    ASPxGridListEditor gridlist = ((ListView)View).Editor as ASPxGridListEditor;
                    if (samplingfirstdefault == true)
                    {
                        Modules.BusinessObjects.SampleManagement.SampleLogIn objsmpl = ((ListView)View).CollectionSource.List.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().FirstOrDefault();
                        if (objsmpl != null)
                        {
                            SRInfo.SamplingGuid = objsmpl.Oid;
                            DashboardViewItem DVBotallocation = ((DashboardView)Application.MainWindow.View).FindItem("BottleAllocation") as DashboardViewItem;
                            if (DVBotallocation != null && DVBotallocation.InnerView != null)
                            {
                                ((ListView)DVBotallocation.InnerView).CollectionSource.Criteria.Clear();
                                ((ListView)DVBotallocation.InnerView).CollectionSource.Criteria["criteria"] = new InOperator("SampleRegistration.Oid", objsmpl.Oid);
                            }
                        }
                        samplingfirstdefault = false;
                    }
                    if (gridlist != null && gridlist.Grid != null)
                    {
                        gridlist.Grid.Load += Grid_Load;
                    }
                }

                if (View.Id == "SampleLogIn_LookupListView_EditTest")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null)
                    {
                        gridListEditor.Grid.SelectionChanged += EditTestSLGrid_SelectionChanged;
                        gridListEditor.Grid.SettingsBehavior.ProcessSelectionChangedOnServer = true;
                    }
                }

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void Editor_CalendarCustomDisabledDate(object sender, CalendarCustomDisabledDateEventArgs e)
        {
            try
            {
                if (e.Date < DateTime.Today)
                {
                    e.IsDisabled = true;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void EditTestSLGrid_SelectionChanged(object sender, EventArgs e)
        {
            try
            {
                ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                if (View.Id == "SampleLogIn_LookupListView_EditTest")
                {
                    IObjectSpace objspace = Application.CreateObjectSpace();
                    //List<Guid> lstSLOid = new List<Guid>();
                    foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSampleLogIn in View.SelectedObjects)
                    {
                        //lstSLOid.Add(objSampleLogIn);
                        IList<SampleParameter> lstSampleParameters = objspace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", objSampleLogIn.Oid));
                        if (lstSampleParameters != null)
                        {
                            //foreach (SampleParameter objSampleResult in lstSampleParameters)
                            //{
                            //    if (!string.IsNullOrEmpty(objSampleResult.Result) || !string.IsNullOrEmpty(objSampleResult.Result) || objSampleResult.PrepMethodCount > 0 || objSampleResult.UQABID != null)
                            //    {
                            //        gridListEditor.Grid.Selection.CancelSelection();
                            //        gridListEditor.Grid.Selection.UnselectRowByKey(objSampleLogIn.Oid);

                            //        if (objSampleResult.PrepMethodCount > 0 && string.IsNullOrEmpty(objSampleResult.Result))
                            //        {
                            //            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "PrepmethodProcessed"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                            //        }
                            //        else if (objSampleResult.UQABID != null && string.IsNullOrEmpty(objSampleResult.Result))
                            //        {
                            //            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "QCBatchCreated"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                            //        }
                            //        else if (!string.IsNullOrEmpty(objSampleResult.Result))
                            //        {
                            //            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "ResultEntered"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                            //        }
                            //        //Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "ItemCannotBeRemoved"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                            //        //Application.ShowViewStrategy.ShowMessage("The test with parameter " + objTestParameter.Parameter.ParameterName + " can not be deleted, since it has referenced already", InformationType.Warning, timer.Seconds, InformationPosition.Top);
                            //    }
                            //}
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void Editor_Load(object sender, EventArgs e)
        {
            try
            {
                DevExpress.Web.ASPxSpinEdit editor = sender as DevExpress.Web.ASPxSpinEdit;
                editor.MinValue = 1;
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void Grid_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
        {
            try
            {
                if (objPermissionInfo.SampleRegIsWrite == true)
                {
                    if (e.DataColumn.FieldName == "Parameter")
                    {
                        e.Cell.Attributes.Add("onclick", string.Format(@"RaiseXafCallback(globalCallbackControl, 'CustomDueDates', '{0}|{1}' , '', false)", e.DataColumn.FieldName, e.VisibleIndex));
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        //private void Grid_BatchUpdate(object sender, DevExpress.Web.Data.ASPxDataBatchUpdateEventArgs e)
        //{

        //    ((XPObjectSpace)ObjectSpace).Session.TrackPropertiesModifications = true;
        //    if (!objCopySampleInfo.isCopySamples)
        //    {
        //        UnitOfWork uow = new UnitOfWork(((XPObjectSpace)this.ObjectSpace).Session.DataLayer);
        //        //ListPropertyEditor objHold = ((ListView)View).FindItem("Hold") as ListPropertyEditor;
        //        List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSampleLogIn = ((ListView)View).CollectionSource.List.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().Where(i => i.Oid != null).ToList();
        //        if (lstSampleLogIn != null)
        //        {
        //            foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objSampleLogIn in lstSampleLogIn)
        //            {


        //                IList<SampleParameter> lstSamplles1 = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSampleLogIn));

        //                SampleStatus objQC = View.ObjectSpace.FindObject<SampleStatus>(CriteriaOperator.Parse("[Oid]=?", objSampleLogIn.SampleHold));
        //                if (lstSamplles1.FirstOrDefault(i => i.Samplelogin.SampleHold != null && i.Samplelogin.SampleHold.Samplestatus == "Hold" && i.Samplelogin.SampleHold.Hold == true) != null)
        //                {
        //                    if (lstSamplles1.FirstOrDefault(i => string.IsNullOrEmpty(i.Result) || i.UQABID == null || i.PrepMethodCount == 0) != null)
        //                    {
        //                        lstSamplles1.ToList().ForEach(i => { i.TestHold = true; });
        //                        objSampleLogIn.Hold = true;
        //                    }
        //                    else
        //{
        //                        Application.ShowViewStrategy.ShowMessage("This sample wasn't set on hold", InformationType.Error, timer.Seconds, InformationPosition.Top);
        //                        objSampleLogIn.SampleHold = null;
        //                        objSampleLogIn.Hold = false;
        //                    }

        //                }

        //                else
        //    {
        //                    IObjectSpace objectSpace = Application.CreateObjectSpace();
        //                    Modules.BusinessObjects.SampleManagement.SampleLogIn check = objectSpace.GetObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSampleLogIn);
        //                    if (check != null && check.Hold)
        //        {
        //                        lstSamplles1.ToList().ForEach(i => { i.TestHold = true; });
        //                        objSampleLogIn.SampleHold = objQC;
        //                        objSampleLogIn.Hold = false;
        //                    }
        //                }















        //                //List<SampleParameter> objsample = uow.Query<SampleParameter>().Where(i => i.Samplelogin != null && i.Samplelogin.Oid == objSampleLogIn.Oid).ToList();
        //                //if (objsample != null && objsample.Count > 0)
        //                //{

        //                //    foreach (SampleParameter sample in objsample.ToList())
        //                //    {
        //                //        SampleStatus objQC = View.ObjectSpace.FindObject<SampleStatus>(CriteriaOperator.Parse("[Oid]=?", objSampleLogIn.SampleHold));
        //                //        //if (e. == "")
        //                //        //{

        //                //        if (sample.Samplelogin != null && sample.Samplelogin.SampleHold != null && sample.Samplelogin.SampleHold.Samplestatus == "Hold" && sample.Samplelogin.SampleHold.Hold == true)
        //                //        {
        //                //            if (sample != null && sample.Status == 0 && (sample.PrepBatchID != null || sample.PrepBatchID == null) && (sample.IsPrepMethodComplete == true || sample.IsPrepMethodComplete == false))
        //                //            {
        //                //                sample.TestHold = true;
        //                //                objSampleLogIn.Hold = true;
        //                //            }
        //                //            else
        //                //            {
        //                //                Application.ShowViewStrategy.ShowMessage("This sample wasn't set on hold", InformationType.Error, timer.Seconds, InformationPosition.Top);
        //                //                objSampleLogIn.SampleHold = null;
        //                //                objSampleLogIn.Hold = false;
        //                //            }
        //                //        }
        //                //        else
        //                //        {
        //                //            IObjectSpace objectSpace = Application.CreateObjectSpace();
        //                //            Modules.BusinessObjects.SampleManagement.SampleLogIn check = objectSpace.GetObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSampleLogIn);
        //                //            if (check != null && check.Hold)
        //                //            {
        //                //                sample.TestHold = false;
        //                //                objSampleLogIn.SampleHold = objQC;
        //                //                objSampleLogIn.Hold = false;
        //                //            }
        //                //        }

        //                //        //}


        //                //        //if (objSampleLogIn.Hold)
        //                //        //{
        //                //        //    if (sample != null && sample.Status == 0 && (sample.PrepBatchID != null || sample.PrepBatchID == null) && (sample.IsPrepMethodComplete == true || sample.IsPrepMethodComplete == false))
        //                //        //    {
        //                //        //        sample.TestHold = true;
        //                //        //        objSampleLogIn.Hold = true;
        //                //        //    }
        //                //        //    else
        //                //        //    {
        //                //        //        Application.ShowViewStrategy.ShowMessage("This sample wasn't set on hold", InformationType.Error, timer.Seconds, InformationPosition.Top);
        //                //        //        objSampleLogIn.SampleHold = null;
        //                //        //        objSampleLogIn.Hold = false;

        //                //        //    }
        //                //        //}
        //                //        //else
        //                //        //{
        //                //        //    IObjectSpace objectSpace = Application.CreateObjectSpace();
        //                //        //    Modules.BusinessObjects.SampleManagement.SampleLogIn check = objectSpace.GetObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSampleLogIn);
        //                //        //    if (check != null && check.Hold)
        //                //        //    {
        //                //        //        sample.TestHold = false;
        //                //        //        objSampleLogIn.SampleHold = objQC;
        //                //        //    }
        //                //        //}


        //                //        ObjectSpace.CommitChanges();
        //                //    }


        //                //}


        //            }
        //        }
        //        uow.CommitChanges();
        //    }



        //}
        private void HideEditValue()
        {
            try
            {
                WebPropertyEditor propertyEditor =
                    ((DetailView)View).FindItem("EMailPassword") as WebPropertyEditor;
                if (propertyEditor != null)
                {
                    if (propertyEditor.Control != null)
                    {
                        SetMask(propertyEditor);
                    }
                    else
                    {
                        propertyEditor.ControlCreated +=
                            new EventHandler<EventArgs>(propertyEditor_ControlCreatedPassword);
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);

            }
        }

        private void propertyEditor_ControlCreatedPassword(object sender, EventArgs e)
        {
            try
            {
                SetMask((WebPropertyEditor)sender);
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void SetMask(WebPropertyEditor propertyEditor)
        {
            try
            {
                if (propertyEditor.ViewEditMode == DevExpress.ExpressApp.Editors.ViewEditMode.Edit)
                {
                    ((ASPxTextBox)propertyEditor.Editor).Password = true;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void Gv_HtmlDataCellPrepared(object sender, ASPxGridViewTableDataCellEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {
                    if (e.DataColumn.FieldName == "Email")
                    {
                        e.Cell.Attributes.Add("ondblclick", string.Format(@"RaiseXafCallback(globalCallbackControl, 'Contact', 'Email|'+{0}, '', false)", e.VisibleIndex));
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void GridView_FillContextMenuItems(object sender, ASPxGridViewContextMenuEventArgs e)
        {
            try
            {
                if (e.MenuType == GridViewContextMenuType.Rows)
                {
                    //CurrentLanguage currentLanguage = ObjectSpace.FindObject<CurrentLanguage>(CriteriaOperator.Parse(""));
                    //if (currentLanguage != null && currentLanguage.Chinese)
                    GridViewContextMenuItem item = null;
                    item = e.Items.FindByName("CopyToAllCell");
                    if (item != null)
                    {
                        e.Items.Remove(item);
                    }
                    if (objLanguage.strcurlanguage != "En")
                    {
                        e.Items.Add("复制到所有单元格", "CopyToAllCell");
                    }
                    else
                    {
                        e.Items.Add("Copy To All Cell", "CopyToAllCell");
                    }
                    GridViewContextMenuItem Edititem = e.Items.FindByName("EditRow");
                    if (Edititem != null)
                        Edititem.Visible = false;
                    item = e.Items.FindByName("CopyToAllCell");
                    if (item != null)
                        item.Image.IconID = "edit_copy_16x16office2013";
                    e.Items.Remove(e.Items.FindByText("Edit"));
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void Grid_CustomJSProperties1(object sender, ASPxGridViewClientJSPropertiesEventArgs e)
        {
            try
            {
                var clientData = new Dictionary<int, object>();
                var grid = sender as ASPxGridView;
                for (int i = grid.VisibleStartIndex; i < grid.VisibleStartIndex + grid.SettingsPager.PageSize; i++)
                {
                    var curOid = grid.GetRowValues(i, "Oid");
                }
                e.Properties["cp_cellsToDisable"] = clientData;
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Grid_CustomColumnSort(object sender, CustomColumnSortEventArgs e)
        {
            try
            {
                if (View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                {
                    if (e.Column != null & e.Column.FieldName == "Parent")
                    {
                        object SampleNo1 = e.GetRow1Value("Samplelogin.SampleNo");
                        object SampleNo2 = e.GetRow2Value("Samplelogin.SampleNo");
                        int res = Comparer.Default.Compare(SampleNo1, SampleNo2);
                        if (res == 0)
                        {
                            object Parent1 = e.Value1;
                            object Parent2 = e.Value2;
                            res = Comparer.Default.Compare(Parent1, Parent2);
                        }
                        e.Result = res;
                        e.Handled = true;
                    }
                }
                else if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy_Parameter" || View.Id == "Testparameter_ListView_Parameter")
                {
                    ASPxGridView grid = sender as ASPxGridView;
                    bool isRow1Selected = grid.Selection.IsRowSelectedByKey(e.GetRow1Value(grid.KeyFieldName));
                    bool isRow2Selected = grid.Selection.IsRowSelectedByKey(e.GetRow2Value(grid.KeyFieldName));
                    e.Handled = isRow1Selected != isRow2Selected;
                    if (e.Handled)
                    {
                        if (e.SortOrder == DevExpress.Data.ColumnSortOrder.Descending)
                            e.Result = isRow1Selected ? 1 : -1;
                        else
                            e.Result = isRow1Selected ? -1 : 1;
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Grid_HtmlCommandCellPrepared(object sender, ASPxGridViewTableCommandCellEventArgs e)
        {
            try
            {
                if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    if (e.CommandCellType == GridViewTableCommandCellType.Data)
                    {
                        if (e.CommandColumn.Name == "Test")
                        {
                            e.Cell.Attributes.Add("onclick", jScript);
                            if (objPermissionInfo.SampleRegIsWrite == false)
                            {
                                ((System.Web.UI.WebControls.WebControl)e.Cell.Controls[0]).Enabled = false;
                            }
                        }
                        else if (e.CommandColumn.Name == "Containers")
                        {
                            e.Cell.Attributes.Add("onclick", jScript);
                            if (objPermissionInfo.SampleRegIsWrite == false)
                            {
                                ((System.Web.UI.WebControls.WebControl)e.Cell.Controls[0]).Enabled = false;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Cell_Init(object sender, EventArgs e)
        {

            throw new NotImplementedException();
        }

        private void AssignClientSideLogic(ASPxGridLookupPropertyEditor propertyEditor)
        {
            try
            {
                //if (propertyEditor.ViewEditMode == DevExpress.ExpressApp.Editors.ViewEditMode.Edit)
                //{
                //    ASPxEditBase editor = (ASPxEditBase)propertyEditor.Editor;
                //    editor.ClientInstanceName = "MethodNumber";
                //    ClientSideEventsHelper.AssignClientHandlerSafe(editor, "ValueChanged", "onMethodNumberValueChanged", "MethodChanged");
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void propertyEditor_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                //AssignClientSideLogic((ASPxGridLookupPropertyEditor)sender);
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Grid_CustomJSProperties(object sender, ASPxGridViewClientJSPropertiesEventArgs e)
        {
            try
            {
                ASPxGridView gridView = sender as ASPxGridView;
                e.Properties["cpVisibleRowCount"] = gridView.VisibleRowCount;
                e.Properties["cpFilterRowCount"] = gridView.Selection.FilteredCount;
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Grid_Load(object sender, EventArgs e)
        {
            try
            {
                ASPxGridView gridView = sender as ASPxGridView;
                if (SRInfo.lstTestParameter != null && SRInfo.lstTestParameter.Count > 0 && SRInfo.strSelectionMode == "Selected")
                {
                    foreach (Guid obj in SRInfo.lstTestParameter)
                    {
                        gridView.Selection.SelectRowByKey(obj);
                    }
                    SRInfo.strSelectionMode = string.Empty;
                }
                else if (View.Id == "Testparameter_ListView_Parameter" && SRInfo.lstSelParameter.Count > 0)
                {
                    foreach (string obj in SRInfo.lstSelParameter)
                    {
                        gridView.Selection.SelectRowByKey(obj);
                    }
                    SRInfo.lstSelParameter.Clear();
                    View.Refresh();
                }
                else if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration" && !objSLInfo.IsColumnsCustomized && !string.IsNullOrEmpty(SRInfo.strJobID))
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    if (gridListEditor != null && gridListEditor.Grid != null)
                    {
                        gridListEditor.Grid.UpdateEdit();
                    }
                    CriteriaOperator cs = CriteriaOperator.Parse("JobID=?", SRInfo.strJobID);
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(cs);
                    if (gridListEditor != null && objsamplecheckin != null)
                    {
                        List<SampleMatrixSetupFields> lstFields = new List<SampleMatrixSetupFields>();
                        if (!string.IsNullOrEmpty(objsamplecheckin.SampleMatries))
                        {
                            List<string> lstSMOid = objsamplecheckin.SampleMatries.Split(';').ToList();
                            //lstFields = objsamplecheckin.SampleMatries.SetupFields.ToList();
                            foreach (string strOid in lstSMOid)
                            {
                                VisualMatrix objVM = ObjectSpace.GetObjectByKey<VisualMatrix>(new Guid(strOid.Trim()));
                                if (objVM != null && objVM.SetupFields.Count > 0)
                                {
                                    foreach (SampleMatrixSetupFields objField in objVM.SetupFields)
                                    {
                                        if (lstFields.FirstOrDefault(i => i.Oid == objField.Oid) == null)
                                        {
                                            lstFields.Add(objField);
                                        }
                                    }
                                }
                            }
                        }
                        foreach (WebColumnBase column in gridView.Columns)
                        {
                            if (column.Name == "SelectionCommandColumn" || column.Name == "Test" || column.Name == "Containers")
                            {
                                //gridView.VisibleColumns[column.Name].FixedStyle = GridViewColumnFixedStyle.Left;
                                //gridView.VisibleColumns[column.Name].Width = 80;
                            }
                            else
                            {
                                IColumnInfo columnInfo = ((IDataItemTemplateInfoProvider)gridListEditor).GetColumnInfo(column);
                                if (columnInfo != null)
                                {
                                    SampleMatrixSetupFields curField = lstFields.FirstOrDefault(i => i.FieldID == columnInfo.Model.Id);
                                    if (curField != null)
                                    {
                                        if (columnInfo.Model.Id == "Containers" || columnInfo.Model.Id == "BottleQty")
                                        {
                                            column.Visible = false;
                                        }
                                        else
                                        {
                                            column.Visible = true;
                                            if (!string.IsNullOrEmpty(curField.FieldCustomCaption))
                                            {
                                                column.Caption = curField.FieldCustomCaption;
                                            }
                                            else
                                            {
                                                column.Caption = curField.FieldCaption;
                                            }
                                            if (curField.SortOrder > 0)
                                            {
                                                column.VisibleIndex = curField.SortOrder + 3;
                                            }
                                            if (curField.Freeze)
                                            {
                                                gridView.VisibleColumns[columnInfo.Model.Id].FixedStyle = GridViewColumnFixedStyle.Left;
                                            }
                                            if (curField.Width > 0)
                                            {
                                                column.Width = curField.Width;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (columnInfo.Model.Id == "SampleID" || columnInfo.Model.Id == "SampleName" || columnInfo.Model.Id == "VisualMatrix" || columnInfo.Model.Id == "RecievedDate"
                                           || columnInfo.Model.Id == "ClientSampleID" || columnInfo.Model.Id == "SamplingLocation" || columnInfo.Model.Id == "CollectDate" || columnInfo.Model.Id == "CollectTimeDisplay")
                                        {
                                            column.Visible = true;
                                        }
                                        else
                                        {
                                            column.Visible = false;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    objSLInfo.IsColumnsCustomized = true;
                }
                else if (View.Id == "SampleLogIn_ListView_SampleRegistration_Bottle")
                {
                    if (((ListView)View).CollectionSource.List.Count == 1)
                    {
                        for (int i = 0; i <= gridView.VisibleRowCount - 1; i++)
                        {
                            gridView.Selection.SelectRow(i);
                        }
                    }
                    else if (((ListView)View).CollectionSource.List.Count > 1)
                    {
                        for (int i = 0; i <= gridView.VisibleRowCount - 1; i++)
                        {
                            if (samplingfirstdefault == true)
                            {
                                i = 1;
                                break;
                                gridView.Selection.SelectRow(i);
                                samplingfirstdefault = false;
                            }
                            //else if (!string.IsNullOrEmpty(gridView.GetRowValues(i, "SampleID").ToString()))
                            //{
                            //    string strbottleid = gridView.GetRowValues(i, "SampleID").ToString();
                            //    Sampling objsmpling = ObjectSpace.FindObject<Sampling>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.SamplingGuid));
                            //    if (objsmpling != null && objsmpling.SampleID == strbottleid)
                            //    {
                            //        gridView.Selection.SelectRow(i);
                            //    }
                            //}
                        }
                    }
                    gridView.Selection.SelectRowByKey(SRInfo.SamplingGuid);
                }

                else if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {
                    foreach (WebColumnBase column in gridView.Columns)
                    {
                        if (column.Name == "MailContent")
                        {
                            column.Width = 80;
                        }
                        else if (column.Name == "COC")
                        {
                            column.Width = 70;
                        }
                        else if (column.Name == "PreInvoice")
                        {
                            column.Width = 80;
                        }
                        else if (column.Name == "SampleReceipt")
                        {
                            column.Width = 100;
                            column.Caption = "SampleReceipt";
                        }

                    }
                }
                else if (View.Id == "AnalysisPricing_ListView_Quotes_SampleRegistration")
                {
                    //ASPxGridView gridview = (ASPxGridView)sender as ASPxGridView;
                    //// gridview.Selection.SelectAll();
                    //if (objquotesinfo.Analysispopupwindow)
                    //    gridview.Selection.SelectAll();
                    //objquotesinfo.Analysispopupwindow = false;

                    ASPxGridView gridview = (ASPxGridView)sender as ASPxGridView;
                    gridview.Selection.SelectAll();
                    foreach (WebColumnBase column in gridView.Columns)
                    {
                        if (column.Name == "SelectionCommandColumn")
                        {
                            column.Visible = false;
                        }
                    }

                }
                else if (View.Id == "CRMQuotes_QuotesItemChargePrice_ListView_ViewMode")
                {
                    ASPxGridView gridview = (ASPxGridView)sender as ASPxGridView;
                    // gridview.Selection.SelectAll();
                    if (objquotesinfo.Itempopupwindow)
                        gridview.Selection.SelectAll();
                    objquotesinfo.Itempopupwindow = false;
                }

                if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    if (gridView.Columns["SelectionCommandColumn"] != null)
                    {
                        gridView.VisibleColumns["SelectionCommandColumn"].FixedStyle = GridViewColumnFixedStyle.Left;
                    }
                    if (gridView.Columns["Test"] != null)
                    {
                        gridView.VisibleColumns["Test"].FixedStyle = GridViewColumnFixedStyle.Left;
                        gridView.VisibleColumns["Test"].Width = 60;
                    }
                    if (gridView.Columns["Containers"] != null)
                    {
                        gridView.VisibleColumns["Containers"].FixedStyle = GridViewColumnFixedStyle.Left;
                        gridView.VisibleColumns["Containers"].Width = 60;
                    }
                    if (gridView.VisibleColumns["SampleID"] != null)
                    {
                        gridView.VisibleColumns["SampleID"].FixedStyle = GridViewColumnFixedStyle.Left;
                    }
                }
                else if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy_Parameter")
                {
                    if (IsDisableCheckBox)
                    {
                        var selectionBoxColumn = gridView.Columns.OfType<GridViewCommandColumn>().Where(i => i.ShowSelectCheckbox).FirstOrDefault();
                        if (selectionBoxColumn != null)
                        {
                            selectionBoxColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.None;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Grid_SelectionChanged(object sender, EventArgs e)
        {
            try
            {
                ASPxGridView gridView = sender as ASPxGridView;
                if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy")
                {
                    bool chksubout = false;
                    IsDisableCheckBox = false;
                    if (Frame != null && Frame is NestedFrame)
                    {
                        NestedFrame nestedFrame = (NestedFrame)Frame;
                        if (nestedFrame != null && nestedFrame.ViewItem != null && nestedFrame.ViewItem.View != null)
                        {
                            CompositeView cv = nestedFrame.ViewItem.View;
                            if (cv != null && cv is DashboardView)
                            {
                                DashboardViewItem SLListView = (DashboardViewItem)cv.FindItem("SampleLogin");
                            }
                        }
                    }
                    //Testparameter testparameter = (Testparameter)View.CurrentObject;
                    DashboardViewItem TestViewSubChild = ((NestedFrame)Frame).ViewItem.View.FindItem("TestViewSubChild") as DashboardViewItem;
                    DashboardViewItem TestViewSub = ((NestedFrame)Frame).ViewItem.View.FindItem("TestViewSub") as DashboardViewItem;
                    ////DashboardViewItem dvsamplelogin = ((DashboardView)Application.MainWindow.View).FindItem("SampleLogin") as DashboardViewItem;
                    ////ListView lvsamplelogin = dvsamplelogin.InnerView as ListView;
                    ////Modules.BusinessObjects.SampleManagement.SampleLogIn objssamplelogin = (Modules.BusinessObjects.SampleManagement.SampleLogIn)lvsamplelogin.CurrentObject;
                    if (TestViewSubChild != null && TestViewSub != null && SRInfo.UseSelchanged)
                    {
                        if (TestViewSub.InnerView.SelectedObjects.Count > 0)
                        {
                            List<Guid> lstTestOid = new List<Guid>();
                            foreach (Testparameter testparameter in TestViewSub.InnerView.SelectedObjects.Cast<Testparameter>().ToList().Where(i => i.IsGroup == false))
                            {
                                IList<Testparameter> listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MethodName.MethodNumber]=? and [TestMethod.MatrixName.MatrixName] = ? and Component.Components=? And TestMethod.GCRecord Is Null And TestMethod.MethodName.GCRecord Is Null And TestMethod.MatrixName.GCRecord Is Null And [QCType.QCTypeName] = 'Sample'", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName, testparameter.Component.Components));
                                foreach (Guid obj in listseltest.ToList().Select(i => i.Oid))
                                {
                                    if (!lstTestOid.Contains(obj))
                                    {
                                        lstTestOid.Add(obj);
                                    }
                                }
                            }
                          ((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = new InOperator("Oid", lstTestOid);
                        }
                        else
                        {
                            ((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] is null");
                        }
                        //if (testparameter != null && testparameter.TestMethod != null && testparameter.TestMethod.MethodName != null && !string.IsNullOrEmpty(testparameter.TestMethod.TestName) && testparameter.TestMethod.MatrixName != null && testparameter.Component != null)
                        //{
                        //    ((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[TestMethod.TestName] = ? And [TestMethod.MethodName.MethodNumber] = ? And [TestMethod.MatrixName.MatrixName] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components]=?", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName, testparameter.Component.Components);
                        //}
                        //((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[TestMethod.TestName] = ? And [TestMethod.MethodName.MethodNumber] = ? And [TestMethod.MatrixName.MatrixName] = ? And [QCType.QCTypeName] = 'Sample'", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName);
                        //((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[TestMethod.TestName] = ? And [TestMethod.MethodName.MethodName] = ? And [TestMethod.MatrixName.MatrixName] = ? And [QCType.QCTypeName] = 'Sample'", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodName, testparameter.TestMethod.MatrixName.MatrixName);
                        //if (((ListView)TestViewSubChild.InnerView).CollectionSource.List.Count > 0)
                        //{
                        //    IList<CustomDueDate> chkcdd = ObjectSpace.GetObjects<CustomDueDate>(CriteriaOperator.Parse("[TestMethod.TestName] = ? And [TestMethod.MatrixName.MatrixName] = ? and [SampleCheckin.Oid] = ?", testparameter.TestMethod.TestName, testparameter.TestMethod.MatrixName.MatrixName, objssamplelogin.JobID.Oid));
                        //    foreach (CustomDueDate objcdd in chkcdd.ToList())
                        //    {
                        //        chksubout = objcdd.Subout;
                        //    }
                        //    foreach (Testparameter objtp in ((ListView)TestViewSubChild.InnerView).CollectionSource.List)
                        //    {
                        //        objtp.SubOut = chksubout;
                        //    }
                        //}
                        SRInfo.strSelectionMode = "Selected";
                    }
                    else
                    {
                        SRInfo.UseSelchanged = true;
                    }
                }
                else if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {
                    ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                    var selected = gridListEditor.GetSelectedObjects();
                    foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin ObjCheckIn in ((ListView)View).CollectionSource.List)
                    {
                        if (selected.Contains(ObjCheckIn))
                        {
                            ObjCheckIn.SendDate = DateTime.Now;
                            ObjCheckIn.SendBy = ObjectSpace.GetObjectByKey<Modules.BusinessObjects.Hr.Employee>(SecuritySystem.CurrentUserId);

                            Samplecheckin objchkin = View.ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", ObjCheckIn.Oid));
                            if (objchkin != null && objchkin.ClientName != null && (ObjCheckIn.Email == null || ObjCheckIn.Email.Trim().Length == 0))
                            {
                                IList<Contact> objconEmail = View.ObjectSpace.GetObjects<Contact>(CriteriaOperator.Parse("Not IsNullOrEmpty([Email]) And [Customer.Oid] = ? And SampleReceiptNotification = true", objchkin.ClientName.Oid));
                                if (objconEmail != null && objconEmail.Count > 0)
                                {
                                    string lstmail = string.Empty;
                                    foreach (Contact objContact in objconEmail)
                                    {
                                        if (!string.IsNullOrEmpty(objContact.Email))
                                        {
                                            if (string.IsNullOrEmpty(lstmail))
                                            {
                                                lstmail = objContact.Email;
                                            }
                                            else if (!string.IsNullOrEmpty(lstmail))
                                            {
                                                lstmail = lstmail + ", " + objContact.Email;
                                            }
                                        }
                                    }
                                    ObjCheckIn.Email = lstmail;
                                }
                            }

                        }
                        else
                        {
                            ObjCheckIn.SendDate = null;
                            ObjCheckIn.SendBy = null;
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Grid_CommandButtonInitialize(object sender, ASPxGridViewCommandButtonEventArgs e)
        {
            try
            {
                ASPxGridView gridView = sender as ASPxGridView;
                if (e.ButtonType == ColumnCommandButtonType.SelectCheckbox)
                {
                    if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration" || View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                    {
                        if (objPermissionInfo.SampleRegIsWrite == false && objPermissionInfo.SampleRegIsDelete == false)
                        {
                            e.Enabled = false;
                            IsDisableCheckBox = true;
                        }
                    }
                    else
                    {
                        Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = View.ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.SampleOid));
                        var curOid = gridView.GetRowValues(e.VisibleIndex, "Oid");
                        if (objSamplelogin != null && curOid != null)
                        {
                            SampleParameter objsmpltest = View.ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? And [Samplelogin.Oid]= ?", curOid, objSamplelogin.Oid));
                            if (objNavigationViewSingOff != null && objNavigationViewSingOff.Select)
                            {
                                if (SRInfo != null && SRInfo.lstSavedTestParameter != null && SRInfo.lstSavedTestParameter.Count > 0 && e.VisibleIndex != -1 && SRInfo.lstSavedTestParameter.Contains((Guid)curOid) && objsmpltest != null && objsmpltest.SignOff == true)
                                {
                                    e.Enabled = false;
                                    IsDisableCheckBox = true;
                                }
                            }
                            else
                            {
                                if (SRInfo != null && SRInfo.lstSavedTestParameter != null && SRInfo.lstSavedTestParameter.Count > 0 && e.VisibleIndex != -1 && SRInfo.lstSavedTestParameter.Contains((Guid)curOid) && objsmpltest != null && (!string.IsNullOrEmpty(objsmpltest.PrepBatchID) || !string.IsNullOrEmpty(objsmpltest.ResultNumeric)))
                                {
                                    e.Enabled = false;
                                    IsDisableCheckBox = true;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        protected override void OnDeactivated()
        {
            try
            {
                base.OnDeactivated();
                boolListview = false;
                boolTestListView = false;
                SRInfo.BoolReset = false;
                if (View is DashboardView)
                {
                    DashboardViewItem SCDetailView = ((DashboardView)View).FindItem("SampleCheckIn_DetailView") as DashboardViewItem;
                    DashboardViewItem SLDetailView = ((DashboardView)View).FindItem("SampleLogIn_DetailView") as DashboardViewItem;
                    DashboardViewItem TestEditDetailView = ((DashboardView)View).FindItem("Test_Edit_Form") as DashboardViewItem;
                    DashboardViewItem TestEditSampleLoginDetailView = ((DashboardView)View).FindItem("TestEdit_SampleLogin_Form") as DashboardViewItem;
                    DashboardViewItem SLListView = ((DashboardView)View).FindItem("SampleLogIn_ListView") as DashboardViewItem;
                    if (SCDetailView != null)
                    {
                        SCDetailView.ControlCreated -= SCDetailView_ControlCreated;
                    }
                    if (SLDetailView != null)
                    {
                        SLDetailView.ControlCreated -= SLDetailView_ControlCreated;
                    }
                    if (SLListView != null)
                    {
                        SLListView.ControlCreated -= SLListView_ControlCreated;
                    }
                    if (TestEditDetailView != null)
                    {
                        TestEditDetailView.ControlCreated -= TestEditDetailView_ControlCreated;
                    }
                    if (TestEditSampleLoginDetailView != null)
                    {
                        TestEditSampleLoginDetailView.ControlCreated -= TestEditSampleLoginDetailView_ControlCreated;
                    }
                }
                if (View.Id == "Contact_ListView_Invoice" || View.Id == "Contact_ListView_Report")
                {
                    //Frame.GetController<NewObjectViewController>().NewObjectAction.Executing -= NewObjectAction_Executing;
                    Frame.GetController<NewObjectViewController>().NewObjectAction.Executed -= NewObjectAction_Executed;
                }
                //if (View is DashboardView)
                //{
                //    DashboardViewItem SCRegDetailView = ((DashboardView)View).FindItem("SampleCheckin") as DashboardViewItem;
                //    DashboardViewItem SLRegListView = ((DashboardView)View).FindItem("SampleLogin") as DashboardViewItem;
                //    DashboardViewItem SLTestRegListView = ((DashboardView)View).FindItem("Tests") as DashboardViewItem;
                //    if (SCRegDetailView != null)
                //    {
                //        SCRegDetailView.ControlCreated -= SCRegDetailView_ControlCreated;
                //    }
                //    if (SLRegListView != null)
                //    {
                //        SLRegListView.ControlCreated -= SLRegListView_ControlCreated;
                //    }
                //    //if (SLTestRegListView != null)
                //    //{
                //    //    SLTestRegListView.ControlCreated -= SLTestRegListView_ControlCreated;
                //    //}
                //    if (View.Id != "Test")
                //    {
                //        SRInfo.strJobID = null;
                //    }
                //    GetDispositionNavigationItemCount();
                //}
                //if (Frame is NestedFrame)
                //{
                //    NestedFrame nestedFrame = (NestedFrame)Frame;
                //    if (nestedFrame != null && nestedFrame.ViewItem != null)
                //    {
                //        CompositeView cv = nestedFrame.ViewItem.View;
                //        if (cv != null && cv.Id == "SampleRegistration_SampleLogin")
                //        {
                //            DashboardViewItem SLRegListView = ((DashboardView)cv).FindItem("SampleLogin") as DashboardViewItem;
                //            DashboardViewItem SLTestRegListView = ((DashboardView)cv).FindItem("Tests") as DashboardViewItem;
                //            if (SLRegListView != null)
                //            {
                //                SLRegListView.ControlCreated -= SLRegListView_ControlCreated;
                //            }
                //            //if (SLTestRegListView != null)
                //            //{
                //            //    SLTestRegListView.ControlCreated -= SLTestRegListView_ControlCreated;
                //            //}
                //        }
                //        SRInfo.strJobID = null;
                //    }
                //}
                if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration" || View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                {
                    SRInfo.strJobID = null;
                }
                if (View.Id == "eNotificationContentTemplate_DetailView")
                {
                    Frame.GetController<ModificationsController>().SaveAction.Executing -= SaveAction_Executing;
                    Frame.GetController<ModificationsController>().SaveAndCloseAction.Executing -= SaveAction_Executing;
                    Frame.GetController<ModificationsController>().SaveAndNewAction.Executing -= SaveAction_Executing;
                }
                if (View != null && (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History"))
                {
                    SRInfo.IsSampling = false;
                    SRInfo.bolNewJobID = false;
                    objInfo.ClientName = null;
                    objInfo.ProjectName = null;
                    SRInfo.NewClient = null;
                    SRInfo.NewProject = null;
                    CNInfo.SCJobId = null;
                    CNInfo.SCSampleMatries = null;
                    //SRInfo.NewInspectCategory = null;
                    ObjectSpace.Committed -= ObjectSpace_Committed;
                    ObjectSpace.Committing -= ObjectSpace_Committing;
                    if (View != null && (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"))
                    {
                        ModificationsController modificationController = Frame.GetController<ModificationsController>();
                        if (modificationController != null)
                        {
                            modificationController.SaveAction.Execute -= SaveAction_Execute;
                            modificationController.SaveAndCloseAction.Executing -= SaveAndCloseAction_Executing;
                            modificationController.SaveAndNewAction.Executing -= SaveAndNewAction_Executing;
                        }
                    }
                    if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                    {
                        DevExpress.Persistent.Validation.RuleSet.CustomNeedToValidateRule -= RuleSet_CustomNeedToValidateRule;
                        if (collector != null)
                        {
                            collector.ValueRead -= Collector_ValueRead;
                            collector = null;
                        }
                        Frame.GetController<NewObjectViewController>().NewObjectAction.Executing -= NewObjectAction_Executing;
                    }
                }
                if (View != null && View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    objSLInfo.IsColumnsCustomized = false;
                    ObjectSpace.Committing -= ObjectSpace_Committing;
                    SRInfo.canGridRefresh = false;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executing -= DeleteAction_Executing;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executed -= DeleteAction_Executed;
                    if (Application.MainWindow.View.Id != "SampleBottleAllocation_DetailView_SampleTransfer")
                    {
                        WebWindow.CurrentRequestWindow.PagePreRender -= CurrentRequestWindow_PagePreRender;
                    }
                    ((XPObjectSpace)View.ObjectSpace).Session.TrackPropertiesModifications = false;

                }
                if (View.Id == "SampleRegistration")
                {
                    if (SRSubmit.Active.Contains("ShowActive"))
                    {
                        SRSubmit.Active.RemoveItem("ShowActive");
                    }
                    objPermissionInfo.SampleRegistrationViewEditMode = ViewEditMode.Edit;
                }
                else if (View.Id == "Samplecheckin_ListView_Copy_Registration_History")
                {
                    strviewid.strtempviewid = string.Empty;
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executed -= DeleteAction_Executed;
                }
                else if (View.Id == "DataSource_ListView")
                {
                    ListViewProcessCurrentObjectController grid = Frame.GetController<ListViewProcessCurrentObjectController>();
                    grid.CustomProcessSelectedItem -= Grid_CustomProcessSelectedItem;

                }
                else if (View != null && View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_ListView_SampleReceiptNotification" || View.Id == "Samplecheckin_ListView_SampleReceiptNotification_History")
                {
                    sampleRegistrationDateFilterAction.SelectedItemChanged -= SampleRegistrationDateFilterAction_SelectedItemChanged;
                    if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                    {
                        Frame.GetController<NewObjectViewController>().NewObjectAction.Executing -= NewObjectAction_Executing;
                    }
                }
                else if (View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                {
                    Frame.GetController<DeleteObjectsViewController>().DeleteAction.Executing -= DeleteAction_Executing;
                    SRInfo.strJobID = null;
                }
                else if (View.Id == "SampleRegistration_SampleLogin")
                {
                    View.Closing -= View_Closing;
                    View.Closed -= View_Closed;
                }
                else if (View.Id == "InvoicingAnalysisCharge_ListView_PreInvoiceDetails" || View.Id == "Invoicing_ItemCharges_ListView_PreinvoiceDetails")
                {
                    View.ControlsCreated -= View_ControlsCreated;
                }
                 ((WebApplication)Application).PopupWindowManager.PopupShowing -= PopupWindowManager_PopupShowing;
                if (View is ListView || View is DetailView)
                {
                    if (Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active.Contains("ShowDelete"))
                    {
                        Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active.RemoveItem("ShowDelete");
                    }
                    if (Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active.Contains("Deletebtn"))
                    {
                        Frame.GetController<DeleteObjectsViewController>().DeleteAction.Active.RemoveItem("Deletebtn");
                    }
                }

                if (View.Id == "TestEdit_DashboardView" || View.Id == "Samplecheckin_DetailView_TestEdit" || View.Id == "SampleParameter_ListView_TestEdit" || View.Id == "SampleLogIn_DetailView_EditTest")
                {
                    Frame.GetController<RefreshController>().RefreshAction.Active.SetItemValue("DisableRefresh", true);
                    Frame.GetController<WebExportController>().ExportAction.Active.SetItemValue("DisableExport", true);

                    if (View is ListView)
                    {
                        Frame.GetController<ASPxGridListEditorConfirmUnsavedChangesController>().Active.RemoveItem("DisableUnsavedChangesListView");
                    }
                    if (View is DetailView)
                    {
                        Frame.GetController<WebConfirmUnsavedChangesDetailViewController>().Active.RemoveItem("DisableUnsavedChangesDetailView");
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        ////private void SLTestRegListView_ControlCreated(object sender, EventArgs e)
        ////{
        ////    try
        ////    {
        ////        if (Frame != null && Frame is NestedFrame)
        ////        {
        ////            NestedFrame nestedFrame = (NestedFrame)Frame;
        ////            if (nestedFrame != null && nestedFrame.ViewItem != null && nestedFrame.ViewItem.View != null)
        ////            {
        ////                CompositeView cv = nestedFrame.ViewItem.View;
        ////                if (cv != null && cv is DashboardView)
        ////                {
        ////                    DashboardViewItem SLListView = (DashboardViewItem)cv.FindItem("Tests");
        ////                    if (SLListView != null && boolTestListView == false)
        ////                    {
        ////                        boolTestListView = true;
        ////                        ((ListView)SLListView.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Samplelogin.JobID.JobID] = ? AND [Samplelogin.JobID.GCRecord] is NULL", SRInfo.strJobID);
        ////                    }
        ////                }
        ////            }
        ////        }
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        ////        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        ////    }
        ////}

        ////private void SLRegListView_ControlCreated(object sender, EventArgs e)
        ////{
        ////    try
        ////    {
        ////        if (Frame != null && Frame is NestedFrame)
        ////        {
        ////            NestedFrame nestedFrame = (NestedFrame)Frame;
        ////            if (nestedFrame != null && nestedFrame.ViewItem != null && nestedFrame.ViewItem.View != null)
        ////            {
        ////                CompositeView cv = nestedFrame.ViewItem.View;
        ////                if (cv != null && cv is DashboardView)
        ////                {
        ////                    DashboardViewItem SLListView = (DashboardViewItem)cv.FindItem("SampleLogin");
        ////                    if (SLListView != null && boolListview == false)
        ////                    {
        ////                        boolListview = true;
        ////                        objSLInfo.JobID = SRInfo.strJobID;
        ////                        ((ListView)SLListView.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[JobID.JobID] = ? AND [JobID.GCRecord] is NULL", SRInfo.strJobID);
        ////                    }
        ////                }
        ////            }
        ////        }
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        ////        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        ////    }

        ////}

        private void SCRegDetailView_ControlCreated(object sender, EventArgs e)
        {
            try
            {
                DashboardView dv = (DashboardView)Application.MainWindow.View;
                DashboardViewItem SLListView = (DashboardViewItem)dv.FindItem("SampleCheckin");
                if (SLListView != null && !string.IsNullOrEmpty(SRInfo.strJobID))
                {
                    CriteriaOperator cs = CriteriaOperator.Parse("JobID=?", SRInfo.strJobID);
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(cs);
                    if (((DetailView)SLListView.InnerView).CurrentObject == null)
                    {
                        ((DetailView)SLListView.InnerView).CurrentObject = ((DetailView)SLListView.InnerView).ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(objsamplecheckin);
                    }
                    ((DetailView)SLListView.InnerView).ViewEditMode = SRInfo.ViewEditMode;
                    ((DetailView)SLListView.InnerView).Refresh();
                }

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SampleRegistrationSC_Save_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View is DashboardView)
                {
                    DashboardViewItem SCDetailView = ((DashboardView)View).FindItem("SampleCheckIn_DetailView") as DashboardViewItem;
                    if (SCDetailView != null && SCDetailView.InnerView != null && SCDetailView.InnerView.CurrentObject != null)
                    {
                        SCDetailView.InnerView.ObjectSpace.CommitChanges();
                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\SuccessfulMessage", "Savesuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);

                        DashboardViewItem SLDetailView = ((DashboardView)View).FindItem("SampleLogIn_DetailView") as DashboardViewItem;
                        if (SLDetailView != null)
                        {
                            Modules.BusinessObjects.SampleManagement.Samplecheckin SCObj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)SCDetailView.InnerView.CurrentObject;
                            if (SCObj.JobID != null)
                            {
                                ((DetailView)SLDetailView.InnerView).ViewEditMode = ViewEditMode.Edit;
                                (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = false;
                                if (SLDetailView.InnerView != null && SLDetailView.InnerView.CurrentObject == null)
                                {
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn SLCurrentObject = SLDetailView.InnerView.ObjectSpace.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                                    if (SLCurrentObject != null)
                                    {
                                        SLCurrentObject.JobID = SLDetailView.InnerView.ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj); //detailView.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj.Oid);
                                        objSCInfo.JobID = SCObj.JobID;
                                        SLDetailView.InnerView.CurrentObject = SLCurrentObject;
                                    }
                                }
                                else if (SLDetailView.InnerView != null && SLDetailView.InnerView.CurrentObject != null)
                                {
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn SLCurrentObject = (Modules.BusinessObjects.SampleManagement.SampleLogIn)SLDetailView.InnerView.CurrentObject;
                                    SLCurrentObject.JobID = SLDetailView.InnerView.ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj); //detailView.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj.Oid);
                                    objSCInfo.JobID = SCObj.JobID;
                                }
                                (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = true;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void SampleRegistrationViewController_ViewControlsCreated(object sender, EventArgs e)
        {
            try
            {
                if (View is DashboardView)
                {
                    DashboardViewItem SCDetailView = ((DashboardView)View).FindItem("SampleCheckIn_DetailView") as DashboardViewItem;
                    if (SCDetailView != null && SCDetailView.InnerView != null)
                    {
                        DetailView detailview = (DetailView)SCDetailView.InnerView;
                        if (detailview.CurrentObject == null)
                        {
                            (SCDetailView).Frame.GetController<ModificationsController>().Active["not in dashboard"] = false;

                            detailview.ViewEditMode = ViewEditMode.Edit;
                            detailview.CurrentObject = detailview.ObjectSpace.CreateObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>();
                            (SCDetailView).Frame.GetController<ModificationsController>().Active["not in dashboard"] = true;
                        }
                        if (detailview.CurrentObject != null)
                        {
                            Modules.BusinessObjects.SampleManagement.Samplecheckin SCObj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)detailview.CurrentObject;
                            if (SCObj.JobID == null)
                            {
                                SelectedData sproc = ((XPObjectSpace)ObjectSpace).Session.ExecuteSproc("GetJobID", new OperandValue("Normal"));
                                SCObj.JobID = sproc.ResultSet[1].Rows[0].Values[0].ToString();
                            }
                        }
                    }
                }
                if (View.Id != null && View.Id == "SampleLogin")
                {
                    DashboardView dv = (DashboardView)Application.MainWindow.View;
                    //  DashboardViewItem SCDetailView = (DashboardViewItem)dv.FindItem("SampleCheckIn_DetailView");
                    //DashboardViewItem SLDetailView = (DashboardViewItem)dv.FindItem("SampleLogIn_DetailView");
                    DashboardViewItem SLListView = (DashboardViewItem)dv.FindItem("SampleLogIn");
                    ((ListView)SLListView.InnerView).CollectionSource.Criteria["filter"] = new BinaryOperator("JobID.JobID", SRInfo.strJobID);
                }

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SampleRegistrationSL_Save_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View is DetailView && View.Id == "SampleLogIn_DetailView")
                {
                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSL = (Modules.BusinessObjects.SampleManagement.SampleLogIn)View.CurrentObject;
                    View.ObjectSpace.CommitChanges();
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\SuccessfulMessage", "Savesuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);

                    //SRInfo.lstObjectsToShow.Add(objSL.Oid);
                    DashboardView dv = (DashboardView)Application.MainWindow.View;
                    DashboardViewItem SCDetailView = (DashboardViewItem)dv.FindItem("SampleCheckIn_DetailView");
                    DashboardViewItem SLDetailView = (DashboardViewItem)dv.FindItem("SampleLogIn_DetailView");
                    DashboardViewItem SLListView = (DashboardViewItem)dv.FindItem("SampleLogIn_ListView");

                    if (SCDetailView != null && SCDetailView.InnerView != null)
                    {
                        Modules.BusinessObjects.SampleManagement.Samplecheckin SCObj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)SCDetailView.InnerView.CurrentObject;
                        if (SLListView != null && SLListView.InnerView != null)
                        {
                            //((ListView)SLListView.InnerView).CollectionSource.Criteria["filter"] = new InOperator("Oid", SRInfo.lstObjectsToShow);
                            ((ListView)SLListView.InnerView).CollectionSource.Criteria["filter"] = new BinaryOperator("JobID.JobID", SCObj.JobID);
                        }
                        if (SLDetailView != null)
                        {
                            if (SCObj.JobID != null)
                            {
                                ((DetailView)SLDetailView.InnerView).ViewEditMode = ViewEditMode.Edit;
                                (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = false;
                                Modules.BusinessObjects.SampleManagement.SampleLogIn SLCurrentObject = SLDetailView.InnerView.ObjectSpace.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                                if (SLCurrentObject != null)
                                {
                                    SLCurrentObject.JobID = SLDetailView.InnerView.ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj); //detailView.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj.Oid);
                                    objSCInfo.JobID = SCObj.JobID;
                                    SelectedData sproc = ((XPObjectSpace)SLDetailView.InnerView.ObjectSpace).Session.ExecuteSproc("GetSampleID", new OperandValue(SLCurrentObject.JobID.JobID));
                                    if (sproc.ResultSet[1].Rows[0].Values[0].ToString() != null)
                                    {
                                        SLCurrentObject.SampleNo = Convert.ToInt32(sproc.ResultSet[1].Rows[0].Values[0].ToString());
                                        SLCurrentObject.SampleID = string.Format("{0}{1}{2}", SLCurrentObject.JobID.JobID, "-", SLCurrentObject.SampleNo.ToString());
                                    }
                                    SLDetailView.InnerView.CurrentObject = SLCurrentObject;
                                    (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = true;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SLListViewEdit_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration" && e.CurrentObject != null)
                {
                    DashboardView dv = (DashboardView)Application.MainWindow.View;
                    DashboardViewItem SLDetailView = (DashboardViewItem)dv.FindItem("SampleLogIn_DetailView");
                    DashboardViewItem SLListView = (DashboardViewItem)dv.FindItem("SampleLogIn_ListView");
                    if (SLListView != null && SLListView.InnerView != null && SLListView.InnerView.CurrentObject != null)
                    {
                        Modules.BusinessObjects.SampleManagement.SampleLogIn SLObj = (Modules.BusinessObjects.SampleManagement.SampleLogIn)e.CurrentObject;
                        if (SLObj.JobID != null)
                        {
                            (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = false;
                            ((DetailView)SLDetailView.InnerView).ViewEditMode = ViewEditMode.Edit;
                            ((DetailView)SLDetailView.InnerView).ObjectSpace.Rollback();//there is an current object is already active in Detailview so before changing the unsaved object to new object we must rollback the ObjectSpace otherwise it will check the old object validation rules.
                            ((DetailView)SLDetailView.InnerView).CurrentObject = ((DetailView)SLDetailView.InnerView).ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(SLObj);
                            (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = true;
                            ((DetailView)SLDetailView.InnerView).Refresh();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SLDetailViewNew_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "SampleLogIn_DetailView" && e.CurrentObject != null)
                {
                    DashboardView dv = (DashboardView)Application.MainWindow.View;
                    DashboardViewItem SCDetailView = (DashboardViewItem)dv.FindItem("SampleCheckIn_DetailView");
                    DashboardViewItem SLDetailView = (DashboardViewItem)dv.FindItem("SampleLogIn_DetailView");

                    if (SLDetailView != null && SLDetailView.InnerView != null)
                    {
                        Modules.BusinessObjects.SampleManagement.Samplecheckin SCObj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)SCDetailView.InnerView.CurrentObject; //SCDetailView.InnerView.ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>();
                        Modules.BusinessObjects.SampleManagement.SampleLogIn SLObj = SLDetailView.InnerView.ObjectSpace.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                        if (SCObj != null)
                        {
                            (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = false;
                            ((DetailView)SLDetailView.InnerView).ViewEditMode = ViewEditMode.Edit;
                            ((DetailView)SLDetailView.InnerView).CurrentObject = ((DetailView)SLDetailView.InnerView).ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(SLObj);
                            SLObj.JobID = SLDetailView.InnerView.ObjectSpace.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(SCObj);
                            (SLDetailView).Frame.GetController<ModificationsController>().Active["SL"] = true;
                            ((DetailView)SLDetailView.InnerView).Refresh();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void AddSample_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                CriteriaOperator cs = CriteriaOperator.Parse("JobID=?", SRInfo.strJobID);
                Session currentSession = ((XPObjectSpace)this.ObjectSpace).Session;
                UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = uow.FindObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(cs);
                //Modules.BusinessObjects.SampleManagement.SampleLogIn objcheckin = ((ListView)View).ObjectSpace.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                Modules.BusinessObjects.SampleManagement.SampleLogIn objcheckin = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                objcheckin.JobID = objsamplecheckin;
                //Session currentsession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                int sampleno = 0;
                SelectedData sproc = currentSession.ExecuteSproc("GetSampleID", new OperandValue(objsamplecheckin.JobID));
                if (sproc.ResultSet[1].Rows[0].Values[0].ToString() != null)
                {
                    sampleno = (int)sproc.ResultSet[1].Rows[0].Values[0];
                }
                if (objsamplecheckin.DateCollected != null && objsamplecheckin.DateCollected != DateTime.MinValue)
                {
                    objcheckin.CollectDate = (DateTime)objsamplecheckin.DateCollected;
                }
                if (objsamplecheckin.Collector != null)
                {
                    objcheckin.Collector = uow.GetObjectByKey<Collector>(objsamplecheckin.Collector.Oid);
                }
                //CriteriaOperator co = CriteriaOperator.Parse("Oid IS NOT  NULL ");
                //VisualMatrix vs = ObjectSpace.FindObject<VisualMatrix>(co);
                if (objsamplecheckin != null && !string.IsNullOrEmpty(objsamplecheckin.SampleMatries) && !objsamplecheckin.SampleMatries.Contains(";"))
                {
                    VisualMatrix vs = uow.GetObjectByKey<VisualMatrix>(new Guid(objsamplecheckin.SampleMatries.Trim()));
                    objcheckin.VisualMatrix = vs;
                }
                objcheckin.SampleNo = sampleno;
                //if (objsamplecheckin.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                //{
                //    objsamplecheckin.Status = SampleRegistrationSignoffStatus.PendingSubmit;
                //}
                //if (!string.IsNullOrEmpty(objsamplecheckin.NPTest) && objcheckin.VisualMatrix != null)
                //{
                //    List<CustomDueDate> lstcustomrequest = uow.Query<CustomDueDate>().Where(i => i.SampleCheckin.Oid == objsamplecheckin.Oid).ToList();
                //    VisualMatrix objVisualMatrix = uow.GetObjectByKey<VisualMatrix>(objcheckin.VisualMatrix.Oid);
                //    List<string> lstTestNames = objsamplecheckin.NPTest.Split(';').ToList();

                //    foreach (string objTest in lstTestNames.ToList())
                //    {
                //        List<string> lstTestMethodCompo = objTest.Split('|').ToList();
                //        if (lstTestMethodCompo.Count == 2)
                //        {
                //            CustomDueDate custom = lstcustomrequest.Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MethodName != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.TestName == lstTestMethodCompo[0] && i.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1]).FirstOrDefault();
                //            List<Testparameter> lstTestParam = uow.Query<Testparameter>().Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MethodName != null && i.Component != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.TestName == lstTestMethodCompo[0] && i.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1] && i.Component.Components == "Default" && i.QCType != null && i.QCType.QCTypeName == "Sample").ToList();
                //            if (lstTestParam.Count > 0 && custom != null)
                //            {
                //                if (custom.Parameter == null || custom.Parameter == "AllParam")
                //                {
                //                    foreach (Testparameter objTestParam in lstTestParam.ToList())
                //                    {
                //                        SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objcheckin.Oid));
                //                        if (objsp == null)
                //{
                //                            SampleParameter newsample = new SampleParameter(uow);
                //                            newsample.Samplelogin = objcheckin;
                //                            newsample.Testparameter = objTestParam;
                //                            newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                //                            objcheckin.Test = true;
                //                            //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                //                            //{
                //                            //    newsample.SubOut = true;
                //                            //}
                //                            newsample.Save();
                //}
                //                        else
                //{
                //                            //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                //                            //{
                //                            //    objsp.SubOut = true;
                //                            //}
                //                            //else
                //                            //{
                //                            //    if (objsp.SuboutSample == null)
                //                            //    {
                //                            //        objsp.SubOut = false;
                //                            //    }
                //                            //}
                //                            objsp.Save();
                //                        }

                //                    }
                //}
                //else
                //{
                //                    string[] param = custom.ParameterDetails.Split(',');
                //                    foreach (Testparameter objTestParam in lstTestParam.ToList())
                //    {
                //                        if (param.Contains(objTestParam.Oid.ToString()))
                //                        {
                //                            SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objcheckin.Oid));
                //                            if (objsp == null)
                //                            {
                //                                SampleParameter newsample = new SampleParameter(uow);
                //                                newsample.Samplelogin = objcheckin;
                //                                newsample.Testparameter = objTestParam;
                //                                newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                //                                objcheckin.Test = true;
                //                                //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                //                                //{
                //                                //    newsample.SubOut = true;
                //                                //}
                //                                newsample.Save();
                //                            }
                //                            else
                //                            {
                //                                //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(objTestParam.TestMethod.Oid))
                //                                //{
                //                                //    objsp.SubOut = true;
                //                                //}
                //                                //else
                //                                //{
                //                                //    if (objsp.SuboutSample == null)
                //                                //    {
                //                                //        objsp.SubOut = false;
                //                                //    }
                //                                //}
                //                                objsp.Save();
                //                            }
                //                        }
                //    }
                //}
                //            }
                //        }
                //        else if (lstTestMethodCompo.Count == 1)
                //        {
                //            TestMethod objTm = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup]=true And [MethodName.GCRecord] Is Null", lstTestMethodCompo[0]));
                //            if (objTm != null)
                //            {
                //                IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", objTm.Oid));
                //                foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                //                {
                //                    CustomDueDate custom = lstcustomrequest.Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && i.TestMethod.Oid == objgtm.TestMethod.Oid).FirstOrDefault();
                //                    IList<Testparameter> lsttestpara = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objgtm.TestParameter.TestMethod.Oid));
                //                    if (custom != null && (custom.Parameter == null || custom.Parameter == "AllParam"))
                //                    {
                //                        foreach (Testparameter param1 in lsttestpara.ToList())
                //{
                //                            SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, objcheckin.Oid));
                //                            if (objsp == null)
                //{
                //                                SampleParameter newsample = new SampleParameter(uow);
                //                                newsample.Samplelogin = objcheckin;
                //                                newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                //                                newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                //                                newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                //                                newsample.IsGroup = true;
                //                                //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                //                                //{
                //                                //    newsample.SubOut = true;
                //                                //}
                //                                newsample.Save();
                //                                uow.CommitChanges();
                //}
                //else
                //{
                //                                SampleParameter sample = uow.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid]=? And [Samplelogin.Oid]=? And [Testparameter.Parameter.Oid] = ?", param1.TestMethod.Oid, objcheckin.Oid, param1.Parameter.Oid));
                //                                if (sample != null)
                //    {
                //                                    //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                //                                    //{
                //                                    //    sample.SubOut = true;
                //                                    //}
                //                                    //else
                //                                    //{
                //                                    //    if (sample.SuboutSample == null)
                //                                    //    {
                //                                    //        sample.SubOut = false;
                //                                    //    }
                //                                    //}
                //                                    sample.Save();
                //    }
                //}
                //}
                //}
                //else
                //{
                //                        if (custom != null && custom.ParameterDetails != null)
                //                        {
                //                            string[] param = custom.ParameterDetails.Split(',');
                //                            foreach (Testparameter param1 in lsttestpara.ToList())
                //    {
                //                                if (param.Contains(param1.Oid.ToString()))
                //{
                //                                    SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, objcheckin.Oid));
                //                                    if (objsp == null)
                //{
                //                                        SampleParameter newsample = new SampleParameter(uow);
                //                                        newsample.Samplelogin = objcheckin;
                //                                        newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                //                                        newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                //                                        newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                //                                        newsample.IsGroup = true;
                //                                        //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                //                                        //{
                //                                        //    newsample.SubOut = true;
                //                                        //}
                //                                        newsample.Save();
                //                                        uow.CommitChanges();
                //}
                //else
                //{
                //                                        SampleParameter sample = uow.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid]=? And [Samplelogin.Oid]=? And [Testparameter.Parameter.Oid] = ?", param1.TestMethod.Oid, objcheckin.Oid, param1.Parameter.Oid));
                //                                        if (sample != null)
                //    {
                //                                            //if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                //                                            //{
                //                                            //    sample.SubOut = true;
                //                                            //}
                //                                            //else
                //                                            //{
                //                                            //    if (sample.SuboutSample == null)
                //                                            //    {
                //                                            //        sample.SubOut = false;
                //                                            //    }
                //                                            //}
                //                                            sample.Save();
                //                                        }
                //                                    }
                //                                }
                //                            }
                //                        }
                //                    }
                //                }
                //            }
                //        }
                //    }
                //}
                objcheckin.Save();
                if (objcheckin.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                {
                    Frame.GetController<AuditlogViewController>().insertauditdata(uow, objcheckin.JobID.Oid, OperationType.Created, "Sample Registration", objcheckin.JobID.JobID, "Samples", "", objcheckin.SampleID, "");
                }
                uow.CommitChanges();
                //if (!string.IsNullOrEmpty(objsamplecheckin.NPTest) && objcheckin.VisualMatrix != null)
                //{
                //    //AssignBottlesToSamples(uow, SRInfo.strJobID, objcheckin.Oid);
                //    AssignBottleAllocationToSamples(uow, objcheckin.Oid);
                //    uow.CommitChanges();
                //    //BottleIDUpdate(uow);
                //    //Application.MainWindow.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();
                //}
                //uow.CommitChanges();
                ((ListView)View).CollectionSource.Add(((ListView)View).ObjectSpace.GetObject(objcheckin));
                View.Refresh();
                UpdateStatusInJobID();
            }

            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        public void ProcessAction(string parameter)
        {
            try
            {
                if (parameter != "error")
                {
                    string[] values = parameter.Split('|');
                    if (values[0] == "Testselection")
                    {
                        if (values[1] == "Selected")
                        {
                            Guid curguid = new Guid(values[2]);
                            //SRInfo.strSelectionMode = values[1];
                            if (!SRInfo.lstTestParameter.Contains(curguid))
                            {
                                SRInfo.lstTestParameter.Add(curguid);
                                if (SRInfo.lstRemoveTestParameter.Contains(curguid))
                                {
                                    SRInfo.lstRemoveTestParameter.Remove(curguid);
                                }
                            }
                            NestedFrame nestedFrame = (NestedFrame)Frame;
                            CompositeView view = nestedFrame.ViewItem.View;
                            Testparameter testparameter = ObjectSpace.GetObjectByKey<Testparameter>(curguid);
                            DashboardViewItem TestViewMain = ((DashboardView)view).FindItem("TestViewMain") as DashboardViewItem;
                            DashboardViewItem TestViewSub = ((DashboardView)view).FindItem("TestViewSub") as DashboardViewItem;
                            DashboardViewItem TestViewSubChild = ((DashboardView)view).FindItem("TestViewSubChild") as DashboardViewItem;
                            bool Oidchange = true;
                            Guid curusedguid = new Guid();
                            Guid tatoid = new Guid();
                            foreach (Testparameter objtestparameter in ((ListView)TestViewSub.InnerView).CollectionSource.List)
                            {
                                if (objtestparameter.Oid == testparameter.Oid)
                                {
                                    Oidchange = false;
                                }
                                if (Oidchange && objtestparameter.TestMethod.TestName == testparameter.TestMethod.TestName && objtestparameter.TestMethod.MethodName.MethodNumber == testparameter.TestMethod.MethodName.MethodNumber)
                                {
                                    curusedguid = objtestparameter.Oid;
                                    if (objtestparameter.TAT != null && objtestparameter.TAT.Oid != null)
                                    {
                                        tatoid = objtestparameter.TAT.Oid;
                                    }
                                }
                            }
                            if (Oidchange && TestViewSubChild != null && TestViewSubChild.InnerView.SelectedObjects.Count == 1)
                            {
                                Testparameter addnewtestparameter = (Testparameter)TestViewSubChild.InnerView.SelectedObjects[0];
                                TurnAroundTime tat = ((ListView)TestViewSub.InnerView).ObjectSpace.GetObjectByKey<TurnAroundTime>(tatoid);
                                //((ListView)TestViewMain.InnerView).CollectionSource.Criteria["dupfilter"] = ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["dupfilter"] =
                                //CriteriaOperator.Parse(((ListView)TestViewMain.InnerView).CollectionSource.Criteria["dupfilter"].ToString().Replace(curusedguid.ToString(), addnewtestparameter.Oid.ToString()));
                                //((ListView)TestViewMain.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("Not [Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                                //((ListView)TestViewSub.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                                foreach (Testparameter lobjtestparameter in ((ListView)TestViewSub.InnerView).CollectionSource.List)
                                {
                                    if (lobjtestparameter != null)
                                    {
                                        if (testparameter.Oid == lobjtestparameter.Oid)
                                            lobjtestparameter.TAT = tat;
                                    }
                                }
                                ASPxGridListEditor gridListEditor = ((ListView)TestViewSub.InnerView).Editor as ASPxGridListEditor;
                                if (gridListEditor != null && gridListEditor.Grid != null)
                                {

                                    SRInfo.UseSelchanged = false;
                                    gridListEditor.Grid.Selection.SelectRowByKey(addnewtestparameter.Oid);
                                    //  Testparameter lgettat = (Testparameter)TestViewSub.InnerView.ObjectSpace.GetObjectByKey<Testparameter>(addnewtestparameter.TAT);

                                }
                            }
                        }
                        else if (values[1] == "UNSelected")
                        {
                            Guid curguid = new Guid(values[2]);
                            //SRInfo.strSelectionMode = values[1];
                            if (SRInfo.lstTestParameter.Contains(curguid))
                            {
                                SRInfo.lstTestParameter.Remove(curguid);
                                if (!SRInfo.lstRemoveTestParameter.Contains(curguid))
                                {
                                    SRInfo.lstRemoveTestParameter.Add(curguid);
                                }
                            }
                            //NestedFrame nestedFrame = (NestedFrame)Frame;
                            //CompositeView view = nestedFrame.ViewItem.View;
                            //Testparameter testparameter = ObjectSpace.GetObjectByKey<Testparameter>(curguid);
                            //DashboardViewItem TestViewMain = ((DashboardView)view).FindItem("TestViewMain") as DashboardViewItem;
                            //DashboardViewItem TestViewSub = ((DashboardView)view).FindItem("TestViewSub") as DashboardViewItem;
                            //DashboardViewItem TestViewSubChild = ((DashboardView)view).FindItem("TestViewSubChild") as DashboardViewItem;
                            //Testparameter addnewtestparameter = null;
                            //foreach (Testparameter objtestparameter in ((ListView)TestViewSub.InnerView).CollectionSource.List)
                            //{
                            //    if (testparameter != null && objtestparameter.Oid == testparameter.Oid)
                            //    {
                            //        if (TestViewSubChild != null && TestViewSubChild.InnerView.SelectedObjects.Count > 0)
                            //        {
                            //            addnewtestparameter = (Testparameter)TestViewSubChild.InnerView.SelectedObjects[0];
                            //        }
                            //    }
                            //}
                            //if (addnewtestparameter != null)
                            //{
                            //    ((ListView)TestViewMain.InnerView).CollectionSource.Criteria["dupfilter"] = ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["dupfilter"] =
                            //    CriteriaOperator.Parse(((ListView)TestViewMain.InnerView).CollectionSource.Criteria["dupfilter"].ToString().Replace(curguid.ToString(), addnewtestparameter.Oid.ToString()));
                            //    ((ListView)TestViewMain.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("Not [Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                            //    ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                            //    ASPxGridListEditor gridListEditor = ((ListView)TestViewSub.InnerView).Editor as ASPxGridListEditor;
                            //    if (gridListEditor != null && gridListEditor.Grid != null)
                            //    {
                            //        SRInfo.UseSelchanged = false;
                            //        gridListEditor.Grid.Selection.SelectRowByKey(addnewtestparameter.Oid);
                            //    }
                            //}
                        }
                        else if (values[1] == "Selectall")
                        {
                            ASPxGridListEditor editor = ((ListView)View).Editor as ASPxGridListEditor;
                            if (editor != null && editor.Grid != null)
                            {
                                for (int i = 0; i < editor.Grid.VisibleRowCount; i++)
                                {
                                    Guid curguid = new Guid(editor.Grid.GetRowValues(i, "Oid").ToString());
                                    //SRInfo.strSelectionMode = "Selected";
                                    if (!SRInfo.lstTestParameter.Contains(curguid))
                                    {
                                        SRInfo.lstTestParameter.Add(curguid);
                                    }
                                    if (SRInfo.lstRemoveTestParameter.Contains(curguid))
                                    {
                                        SRInfo.lstRemoveTestParameter.Remove(curguid);
                                    }
                                }
                            }
                        }
                        else if (values[1] == "UNSelectall")
                        {
                            ASPxGridListEditor editor = ((ListView)View).Editor as ASPxGridListEditor;
                            if (editor != null && editor.Grid != null)
                            {
                                for (int i = 0; i < editor.Grid.VisibleRowCount; i++)
                                {
                                    Guid curguid = new Guid(editor.Grid.GetRowValues(i, "Oid").ToString());
                                    //SRInfo.strSelectionMode = "UNSelected";
                                    if (SRInfo.lstTestParameter.Contains(curguid) /*&& !SRInfo.lstSavedTestParameter.Contains(curguid)*/)
                                    {
                                        SRInfo.lstTestParameter.Remove(curguid);
                                    }
                                    if (!SRInfo.lstRemoveTestParameter.Contains(curguid))
                                    {
                                        SRInfo.lstRemoveTestParameter.Add(curguid);
                                    }
                                }
                            }
                        }
                    }
                    else if (values[0] == "true")
                    {
                        if (SRInfo.BoolReset == false)
                        {
                            string samplematrices = string.Empty;
                            if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                            {
                                Samplecheckin currentobj = View.CurrentObject as Samplecheckin;
                                if (currentobj != null)
                                {
                                    // currentobj.jobidreset = "yee";
                                    // Jobidreset = "Yes";
                                    samplematrices = currentobj.SampleMatries;
                                    currentobj.SampleMatries = string.Empty;
                                    currentobj.Test = string.Empty;
                                    List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstcurrentsamplelogin = ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", currentobj.Oid)).ToList();
                                    if (lstcurrentsamplelogin.Count > 0)
                                    {
                                        foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn currentsamplelogin in lstcurrentsamplelogin)
                                        {
                                            List<SampleParameter> sampleParameters = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", currentsamplelogin.Oid)).ToList();
                                            if (sampleParameters.Count > 0)
                                            {
                                                foreach (SampleParameter currentsp in sampleParameters)
                                                {
                                                    currentsp.Delete();
                                                }
                                            }
                                            //   var testparametr = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[Oid] = ?", sampleParameters)).Select(i => i.TestMethod.Oid).Distinct().ToList();


                                            if (currentsamplelogin.SampleID != null)
                                            {
                                                currentsamplelogin.Delete();

                                            }
                                        }
                                    }
                                    currentobj.NumberOfSample = 0;
                                    currentobj.NPTest = null;
                                    ////View.ObjectSpace.ReloadObject(currentobj.NPTest);
                                    //currentobj.Test = null;
                                    //currentobj.SampleMatries =
                                    //;
                                    //customduedate finding and remove
                                    ListPropertyEditor liscustomeduedate = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                                    if (liscustomeduedate != null && currentobj.Oid != null)
                                    {
                                        //IList<CustomDueDate> currentcustomDueDates = liscustomeduedate.ListView.CollectionSource.List.Cast<CustomDueDate>().ToList().Where(i => i.SampleCheckin.Oid == currentobj.Oid).ToList();
                                        List<CustomDueDate> currentcustomDueDates = ObjectSpace.GetObjects<CustomDueDate>(CriteriaOperator.Parse("[SampleCheckin] = ? ", currentobj.Oid)).ToList();

                                        if (currentcustomDueDates.Count > 0)
                                        {
                                            View.ObjectSpace.Delete(currentcustomDueDates);
                                        }
                                        //CollectionSource collectionSource = new CollectionSource(ObjectSpace, typeof(CustomDueDate));
                                        //collectionSource.Add(liscustomeduedate.ListView.CollectionSource);
                                        //foreach (CustomDueDate currentcutomduedate in liscustomeduedate.ListView.CollectionSource.List.wher)
                                        //{
                                        //    currentcutomduedate.SampleCheckin = null;
                                        // //   currentcutomduedate.Delete();
                                        //    liscustomeduedate.ListView.CollectionSource.Remove(currentcutomduedate);
                                        //}

                                    }

                                    //Bottles Areremoved

                                    List<SampleBottleAllocation> lstbottleAllocation = ObjectSpace.GetObjects<SampleBottleAllocation>(CriteriaOperator.Parse("SampleRegistration=?", currentobj.Oid)).ToList();
                                    if (lstbottleAllocation.Count > 0)
                                    {
                                        foreach (SampleBottleAllocation objSamplebottleAll in lstbottleAllocation.ToList())
                                        {

                                            objSamplebottleAll.Delete();
                                        }
                                    }
                                    currentobj.SampleMatries = samplematrices;
                                    // Jobidreset = "yes";
                                    // testremove
                                    // Aspxgridlookupeditor liscustomeduedate = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                                    //  List<SampleParameter> lstsampleParameters=ObjectSpace.GetObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?",))

                                    ObjectSpace.CommitChanges();
                                    if (currentobj != null)
                                    {
                                        int sampleno = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", currentobj.Oid));
                                        if (objLanguage.strcurlanguage != "En")
                                        {
                                            Sample.Caption = "样液样品" + "(" + sampleno + ")";
                                            if (this.Actions["btnSampleTest"] != null)
                                            {
                                                this.Actions["btnSampleTest"].Caption = "Tests" + "(" + View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", currentobj.Oid)).Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().Count() + ")";
                                            }
                                            if (this.Actions["btnBottleAllocation"] != null)
                                            {
                                                this.Actions["btnBottleAllocation"].Caption = "Containers" + "(" + View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", currentobj.Oid)).Sum(i => i.Qty) + ")";
                                            }
                                        }
                                        else
                                        {
                                            Sample.Caption = "Samples" + "(" + sampleno + ")";
                                            if (this.Actions["btnSampleTest"] != null)
                                            {
                                                this.Actions["btnSampleTest"].Caption = "Tests" + "(" + View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", currentobj.Oid)).Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().Count() + ")";
                                            }
                                            if (this.Actions["btnBottleAllocation"] != null)
                                            {
                                                this.Actions["btnBottleAllocation"].Caption = "Containers" + "(" + View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", currentobj.Oid)).Sum(i => i.Qty) + ")";
                                            }
                                        }
                                        //ObjectSpace.Dispose();                                   

                                    }
                                    //View.ObjectSpace.Refresh();
                                    //Application.MainWindow.View.ObjectSpace.Refresh();

                                    //getconnection string and passing stored procedure for set null values in NpTest
                                    string connectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                                    var connectionStringBuilder = new SqlConnectionStringBuilder(connectionString);
                                    string serverName = connectionStringBuilder.DataSource.Trim();
                                    string databaseName = connectionStringBuilder.InitialCatalog.Trim();
                                    string userID = connectionStringBuilder.UserID.Trim();
                                    string password = connectionStringBuilder.Password.Trim();
                                    SqlConnection sqlConnection = new SqlConnection(connectionStringBuilder.ToString());
                                    // using (SqlConnection connection = new SqlConnection(connectionString))

                                    sqlConnection.Open();

                                    using (SqlCommand command = new SqlCommand("Resetjobid", sqlConnection))
                                    {
                                        command.CommandType = CommandType.StoredProcedure;

                                        // Add parameters
                                        command.Parameters.AddWithValue("@ljobid", currentobj.JobID);

                                        // Execute the stored procedure
                                        command.ExecuteNonQuery();
                                    }
                                    sqlConnection.Close();
                                    Application.ShowViewStrategy.ShowMessage("The Job ID has been successfully reset.", InformationType.Success, 3000, InformationPosition.Top);
                                    SRInfo.BoolReset = true;
                                    IsReset = false;
                                }
                            }
                        }
                        if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy")
                        {
                            ListView listView = null;

                            if (View is ListView)
                            {
                                listView = View as ListView;
                            }
                            if (listView != null && listView.CollectionSource.GetCount() > 0)
                            {
                                Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                                UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                                Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = uow.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.SampleOid));
                                ASPxGridListEditor editor = (ASPxGridListEditor)listView.Editor;
                                if (editor != null)
                                {
                                    object curoid = SRInfo.indexOfCurrentObject;
                                    Testparameter param = ObjectSpace.GetObjectByKey<Testparameter>(curoid);
                                    if (param != null && param.TestMethod != null)
                                    {
                                        if (SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid))
                                        {
                                            if (SRInfo.lstdupfilterSuboutstr.Contains(param.TestMethod.TestName + "|" + param.TestMethod.MethodName.MethodNumber + "|" + param.TestMethod.MatrixName.MatrixName + "|" + param.Component.Components))
                                            {
                                                SRInfo.lstdupfilterSuboutstr.Remove(param.TestMethod.TestName + "|" + param.TestMethod.MethodName.MethodNumber + "|" + param.TestMethod.MatrixName.MatrixName + "|" + param.Component.Components);
                                            }
                                            SRInfo.lstSubOutTest.Remove(param.TestMethod.Oid);
                                            if (!SRInfo.lstOfUncheckedSubout.Contains(param.TestMethod.Oid))
                                            {
                                                SRInfo.lstOfUncheckedSubout.Add(param.TestMethod.Oid);
                                            }
                                        }
                                        if (objSamplelogin != null && SRInfo.lstOfUncheckedSubout != null && SRInfo.lstOfUncheckedSubout.Count > 0)
                                        {
                                            foreach (Guid uncheckedSubout in SRInfo.lstOfUncheckedSubout)
                                            {
                                                SampleParameter objsmpltest = View.ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]= ?", objSamplelogin.Oid));
                                                if (objsmpltest != null)
                                                {
                                                    IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.oid] =?", uncheckedSubout));
                                                    foreach (Testparameter obj in ((ListView)View).CollectionSource.List.Cast<Testparameter>().ToList())
                                                    {
                                                        if (testparameters.Contains(obj))
                                                        {
                                                            obj.SubOut = false;
                                                            SRInfo.isConfirmedToUncheckSubout = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (values[0] == "Parameter")
                    {
                        ASPxGridListEditor editor = ((ListView)View).Editor as ASPxGridListEditor;
                        if (editor != null && editor.Grid != null)
                        {
                            HttpContext.Current.Session["rowid"] = editor.Grid.GetRowValues(int.Parse(values[1]), "Oid");
                            if (HttpContext.Current.Session["rowid"] != null)
                            {
                                SRInfo.lstSelParameter = new List<string>();
                                CustomDueDate objsampling = ((ListView)View).CollectionSource.List.Cast<CustomDueDate>().Where(a => a.Oid == new Guid(HttpContext.Current.Session["rowid"].ToString())).First();
                                if (objsampling != null)
                                {
                                    List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSamples = View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("JobID.Oid=?", objsampling.SampleCheckin.Oid)).ToList();
                                    //IList<SampleParameter> parameters = View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("Samplelogin.JobID.Oid=?", objsampling.SampleCheckin.Oid));
                                    if (lstSamples.Count == 0)
                                    {
                                        CollectionSource cs = new CollectionSource(ObjectSpace, typeof(Testparameter));
                                        cs.Criteria["filter"] = CriteriaOperator.Parse("[TestMethod.Oid]=? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objsampling.TestMethod.Oid);
                                        SRInfo.Totparam = cs.GetCount();
                                        if (objsampling.Parameter == "AllParam")
                                        {
                                            foreach (Testparameter strbotid in cs.List)
                                            {
                                                SRInfo.lstSelParameter.Add(strbotid.Oid.ToString());
                                            }
                                        }
                                        else if (objsampling.ParameterDetails != null)
                                        {
                                            string[] strbottleid = objsampling.ParameterDetails.Split(',');
                                            foreach (var strbotid in strbottleid)
                                            {
                                                SRInfo.lstSelParameter.Add(strbotid.Trim());
                                            }
                                        }
                                        ListView lv = Application.CreateListView("Testparameter_ListView_Parameter", cs, false);
                                        ShowViewParameters showViewParameters = new ShowViewParameters(lv);
                                        showViewParameters.Context = TemplateContext.PopupWindow;
                                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                                        showViewParameters.CreatedView.Caption = "Parameter";
                                        DialogController dc = Application.CreateController<DialogController>();
                                        dc.SaveOnAccept = false;
                                        dc.CloseOnCurrentObjectProcessing = false;
                                        dc.Accepting += Dc_Accepting2;
                                        showViewParameters.Controllers.Add(dc);
                                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                                    }
                                }
                            }
                        }
                    }
                    else if (values[0] == "Registration")
                    {
                        objSLInfo.TestJobID = values[1];
                    }
                    else if (values[0] == "QCCategory")
                    {
                        //if (base.View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                        //{
                        //    ASPxGridListEditor editor = ((ListView)View).Editor as ASPxGridListEditor;
                        //    if (editor != null && editor.Grid != null && values != null && values.Count() > 1)
                        //    {
                        //        //object currentOid = editor.Grid.GetRowValues(int.Parse(values[1]), "Oid");
                        //        Guid currentOid = new Guid(values[1]);
                        //        if (currentOid != null)
                        //        {
                        //            Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = View.ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", new Guid(currentOid.ToString())));

                        //            if (values[2] != "null")
                        //            {
                        //                QCCategory objQC = View.ObjectSpace.GetObjectByKey<QCCategory>(new Guid(values[2]));
                        //                if (objSamplelogin != null)
                        //                {
                        //                    if (objQC != null)
                        //                    {
                        //                        if (objQC != null && (objQC.QCCategoryName == "DOC" || objQC.QCCategoryName == "PT" || objQC.QCCategoryName == "MDL"))
                        //                        {
                        //                            objSamplelogin.ExcludeInvoice = true;
                        //                            objSamplelogin.QCCategory = objQC;
                        //                        }
                        //                        else
                        //                        {
                        //                            objSamplelogin.ExcludeInvoice = false;
                        //                        }
                        //                    }

                        //                }
                        //            }
                        //            else
                        //            {
                        //                objSamplelogin.ExcludeInvoice = false;
                        //            }

                        //        }
                        //    }
                        //}
                    }

                    //else if (values[0] == "MethodChanged")
                    //{
                    //    if (!string.IsNullOrEmpty(values[1]) && values[1] != "null")
                    //    {
                    //        Guid curguid = new Guid(values[1]);
                    //        Modules.BusinessObjects.Setting.Method objMethodNumber = View.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.Setting.Method>(curguid);
                    //        Samplecheckin objsamplecheckin = (Samplecheckin)View.CurrentObject;
                    //        if (objsamplecheckin != null)
                    //        {
                    //            if (objMethodNumber != null)
                    //            {
                    //                objsamplecheckin.MethodNumber = objMethodNumber;
                    //                if (objsamplecheckin.MethodNumber.ClauseInspectionSettings != null && objsamplecheckin.MethodNumber.ClauseInspectionSettings.Count > 0)
                    //                {
                    //                    if (SRInfo.lstAddedClause == null)
                    //                    {
                    //                        SRInfo.lstAddedClause = new List<ClauseInspectionSettings>();
                    //                    }
                    //                    foreach (ClauseInspectionSettings setting in objsamplecheckin.MethodNumber.ClauseInspectionSettings)
                    //                    {
                    //                        if (objsamplecheckin.Clauses.FirstOrDefault(i => i.Oid == setting.Oid) == null)
                    //                        {
                    //                            objsamplecheckin.Clauses.Add(setting);
                    //                        }
                    //                    }
                    //                    foreach (ClauseInspectionSettings setting in objsamplecheckin.Clauses.ToList())
                    //                    {
                    //                        if (SRInfo.lstAddedClause.FirstOrDefault(i => i.Oid == setting.Oid) == null && objsamplecheckin.MethodNumber.ClauseInspectionSettings.FirstOrDefault(i => i.Oid == setting.Oid) == null)
                    //                        {
                    //                            objsamplecheckin.Clauses.Remove(setting);
                    //                        }
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    if (objsamplecheckin.Clauses != null && objsamplecheckin.Clauses.Count > 0)
                    //                    {
                    //                        foreach (ClauseInspectionSettings setting in objsamplecheckin.Clauses.ToList())
                    //                        {
                    //                            if (SRInfo.lstAddedClause.FirstOrDefault(i => i.Oid == setting.Oid) == null)
                    //                            {
                    //                                objsamplecheckin.Clauses.Remove(setting);
                    //                            }
                    //                        }
                    //                    }
                    //                }
                    //                View.Refresh();
                    //            }
                    //            else
                    //            {
                    //                if (objsamplecheckin.Clauses != null && objsamplecheckin.Clauses.Count > 0)
                    //                {
                    //                    if (SRInfo.lstAddedClause != null && SRInfo.lstAddedClause.Count > 0)
                    //                    {
                    //                        SRInfo.lstAddedClause.Clear();
                    //                    }
                    //                    foreach (ClauseInspectionSettings setting in objsamplecheckin.Clauses.ToList())
                    //                    {
                    //                        objsamplecheckin.Clauses.Remove(setting);
                    //                    }
                    //                    View.Refresh();
                    //                }
                    //            }
                    //        }
                    //    }
                    //    else
                    //    {
                    //        Samplecheckin objsamplecheckin = (Samplecheckin)View.CurrentObject;
                    //        if (objsamplecheckin != null && objsamplecheckin.Clauses != null && objsamplecheckin.Clauses.Count > 0)
                    //        {
                    //            foreach (ClauseInspectionSettings setting in objsamplecheckin.Clauses.ToList())
                    //            {
                    //                if (SRInfo.lstAddedClause.FirstOrDefault(i => i.Oid == setting.Oid) == null)
                    //                {
                    //                    objsamplecheckin.Clauses.Remove(setting);
                    //                }
                    //            }
                    //            View.Refresh();
                    //        }
                    //    }
                    //    //else
                    //    //{
                    //    //    Samplecheckin objsamplecheckin = (Samplecheckin)View.CurrentObject;
                    //    //    if (objsamplecheckin != null && objsamplecheckin.Clauses != null && objsamplecheckin.Clauses.Count > 0)
                    //    //    {
                    //    //        foreach (ClauseInspectionSettings setting in objsamplecheckin.Clauses.ToList())
                    //    //        {
                    //    //            if (SRInfo.lstAddedClause.FirstOrDefault(i => i.Oid == setting.Oid) == null)
                    //    //            {
                    //    //                objsamplecheckin.Clauses.Remove(setting);
                    //    //            }
                    //    //        }
                    //    //        View.Refresh();
                    //    //    }
                    //    //}
                    //}
                    //else if (values[0] == "TestMethodChanged")
                    //{

                    //}
                    else if (values[0] == "SampleStatus")
                    {
                        if (base.View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                        {
                            ASPxGridListEditor editor = ((ListView)View).Editor as ASPxGridListEditor;
                            if (editor != null && editor.Grid != null && values != null && values.Count() > 1)
                            {
                                //object currentOid = editor.Grid.GetRowValues(int.Parse(values[1]), "Oid");
                                Guid curguid = new Guid(values[1]);

                                if (curguid != null)
                                {
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(curguid);

                                    //Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = View.ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", new Guid(currentOid.ToString())));

                                    if (values[2] != "null")
                                    {
                                        SampleStatus objQC = View.ObjectSpace.GetObjectByKey<SampleStatus>(new Guid(values[2]));
                                        if (objSamplelogin != null)
                                        {
                                            if (objQC != null)
                                            {
                                                if (objQC.Samplestatus == "Hold")
                                                {
                                                    IList<SampleParameter> objsp = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", objSamplelogin.Oid)).Where(i => i.Status > 0 || !string.IsNullOrEmpty(i.PrepBatchID) || i.QCBatchID != null).ToList();
                                                    if (objsp.Count > 0)
                                                    {
                                                        Application.ShowViewStrategy.ShowMessage("This sample wasn't set on hold", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                                        objSamplelogin.Hold = false;
                                                        objSamplelogin.SampleStatus = null;
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        objSamplelogin.Hold = true;
                                                        objSamplelogin.SampleStatus = objQC;
                                                    }
                                                }
                                                else
                                                {
                                                    objSamplelogin.Hold = false;
                                                    objSamplelogin.SampleStatus = objQC;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        objSamplelogin.Hold = false;
                                        objSamplelogin.SampleStatus = null;
                                    }

                                }

                            }

                        }
                    }
                    else if (values[0] == "Hold")
                    {

                        Guid curguid = new Guid(values[1]);
                        Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLog = ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(curguid);
                        if (sampleLog != null)
                        {
                            if (values[2] == "true")
                            {
                                if (sampleLog != null && (sampleLog.SampleParameter.Where(i => i.Status > 0 || !string.IsNullOrEmpty(i.PrepBatchID) || i.QCBatchID != null).Count() > 0))
                                {
                                    Application.ShowViewStrategy.ShowMessage("This test wasn't set on hold", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    sampleLog.Hold = false;
                                    return;
                                }
                                else
                                {
                                    sampleLog.Hold = true;
                                }
                            }
                            else
                            {
                                sampleLog.Hold = false;
                                if (sampleLog.SampleStatus != null && sampleLog.SampleStatus.Hold)
                                {
                                    sampleLog.SampleStatus = null;
                                }
                            }
                        }

                    }
                    else if (values[0] == "DueDate")
                    {
                        ASPxGridListEditor editor = ((ListView)View).Editor as ASPxGridListEditor;
                        if (editor != null && editor.Grid != null)
                        {
                            object currentOid = editor.Grid.GetRowValues(int.Parse(values[1]), "Oid");
                            CustomDueDate objDueDate = View.ObjectSpace.FindObject<CustomDueDate>(CriteriaOperator.Parse("Oid=?", new Guid(currentOid.ToString())));
                            //IObjectSpace os = Application.CreateObjectSpace();
                            //CustomDueDate objDueDate = ObjectSpace.GetObjectByKey<CustomDueDate>(currentOid);
                            //if (objDueDate != null)
                            //{
                            //    objDueDate.DueDate = DateTime.ParseExact(values[2], "yyyy-MM-dd", null);
                            //    ObjectSpace.CommitChanges();
                            //}
                            //else
                            //{
                            //    objDueDate = ((ListView)View).CollectionSource.List.Cast<CustomDueDate>().FirstOrDefault(i => i.Oid == new Guid(currentOid.ToString()));
                            //    if (objDueDate != null)
                            //    {
                            //        objDueDate.DueDate = DateTime.ParseExact(values[2], "yyyy-MM-dd", null);
                            //        ((ListView)View).ObjectSpace.CommitChanges();
                            //    }
                            //    ObjectSpace.CommitChanges();
                            //}
                            Samplecheckin objTask = null;
                            if (Application.MainWindow.View is DetailView)
                            {
                                objTask = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                            }
                            else if (Application.MainWindow.View is DashboardView)
                            {
                                DashboardViewItem SCRegDetailView = ((DashboardView)Application.MainWindow.View).FindItem("SampleCheckin") as DashboardViewItem;
                                if (SCRegDetailView != null && SCRegDetailView.InnerView != null)
                                {
                                    objTask = (Samplecheckin)SCRegDetailView.InnerView.CurrentObject;
                                }
                            }
                            if (objDueDate != null)
                            {
                                if (objDueDate.DueDate != DateTime.MinValue && objDueDate.DueDate < DateTime.Today)
                                {
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "validduedate"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    objDueDate.DueDate = null;
                                    return;
                                }
                                else if (objDueDate.DueDate != DateTime.MinValue && objTask != null && objDueDate.DueDate > objTask.DueDate)
                                {
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "ValidateDuedateless"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    objDueDate.DueDate = null;
                                    return;
                                }
                                else if (objDueDate.DueDate >= DateTime.Today)
                                {
                                    IObjectSpace os = Application.CreateObjectSpace();
                                    IList<Holidays> objHoliday = os.GetObjects<Holidays>(CriteriaOperator.Parse("Oid is Not Null"));
                                    var TAT = ((DateTime)objDueDate.DueDate).Subtract(DateTime.Today).Days;
                                    var dic = new Dictionary<DateTime, DayOfWeek>();
                                    for (int i = 0; i < TAT + 1; i++)
                                    {
                                        if (!objHoliday.Any(x => x.HolidayDate == DateTime.Today.AddDays(i)))
                                            // dic.Add(start.AddDays(i), start.AddDays(i).DayOfWeek);
                                            dic.Add(DateTime.Today.AddDays(i), DateTime.Now.AddDays(i).DayOfWeek);
                                    }
                                    int CountExceptHolidays = dic.Where(x => x.Value != DayOfWeek.Saturday && x.Value != DayOfWeek.Sunday).Count();
                                    if (CountExceptHolidays > 1)
                                    {
                                        int TATdays = Convert.ToInt32(CountExceptHolidays - 1);
                                        var days = 0;
                                        var years = 0;
                                        var weeks = 0;
                                        var months = 0;
                                        string temptat = string.Empty;
                                        string stryears = string.Empty;
                                        string strmonths = string.Empty;
                                        string strweeks = string.Empty;
                                        string strdays = string.Empty;
                                        years = (TATdays / 365);
                                        months = (TATdays % 365) / 30;
                                        weeks = (TATdays % 365) / 7;
                                        days = TATdays - ((years * 365) + (weeks * 7));
                                        //years
                                        if (years == 1)
                                        {
                                            stryears = years + " " + "Year";
                                        }
                                        else if (years > 1)
                                        {
                                            stryears = years + " " + "Years";
                                        }
                                        //months
                                        if (months == 1)
                                        {
                                            strmonths = months + " " + "Month";
                                        }
                                        else if (months > 1)
                                        {
                                            strmonths = months + " " + "Months";
                                        }
                                        //week
                                        if (weeks == 1)
                                        {
                                            strweeks = weeks + " " + "Week";
                                        }
                                        else if (weeks > 1)
                                        {
                                            strweeks = weeks + " " + "Weeks";
                                        }
                                        //Days
                                        if (TATdays == 1)
                                        {
                                            strdays = TATdays + " " + "Day";
                                        }
                                        else if (TATdays > 1)
                                        {
                                            strdays = TATdays + " " + "Days";
                                        }

                                        if (years > 0 && months <= 12 && weeks <= 4 && days == 0)
                                        {
                                            temptat = stryears;
                                        }
                                        else
                                        if (months > 0 && weeks <= 4 && years == 0 && days <= 3)
                                        {
                                            temptat = strmonths;
                                        }
                                        else
                                        if (weeks > 0 && months == 0 && years == 0 && days == 0)
                                        {
                                            temptat = strweeks;
                                        }
                                        else
                                        {
                                            temptat = strdays;
                                        }

                                        TurnAroundTime objTAT = os.FindObject<TurnAroundTime>(CriteriaOperator.Parse("TAT=?", temptat));
                                        if (objTAT == null)
                                        {
                                            objTAT = os.CreateObject<TurnAroundTime>();
                                            //objTAT.TAT = CountExceptHolidays.ToString();
                                            objTAT.Count = TATdays * 24;
                                            objTAT.TAT = temptat;

                                            os.CommitChanges();
                                        }
                                        objDueDate.TAT = View.ObjectSpace.GetObjectByKey<TurnAroundTime>(objTAT.Oid);
                                    }
                                    else
                                    {
                                        string sameDay;
                                        //CurrentLanguage currentLanguage = os.FindObject<CurrentLanguage>(CriteriaOperator.Parse(""));
                                        //if (currentLanguage != null && currentLanguage.Chinese)
                                        if (objLanguage.strcurlanguage != "En")
                                        {
                                            sameDay = "同一天";
                                        }
                                        else
                                        {
                                            sameDay = "Same Day";
                                        }

                                        TurnAroundTime objTAT = os.FindObject<TurnAroundTime>(CriteriaOperator.Parse("TAT=?", sameDay));
                                        if (objTAT == null)
                                        {
                                            objTAT = os.CreateObject<TurnAroundTime>();
                                            objTAT.TAT = sameDay;
                                            os.CommitChanges();
                                        }
                                        objDueDate.TAT = View.ObjectSpace.GetObjectByKey<TurnAroundTime>(objTAT.Oid);
                                    }
                                    ((ListView)View).Refresh();
                                    //ObjectSpace.CommitChanges();
                                }
                            }
                        }
                    }
                    else if (values[0] == "HoldSelected" || values[0] == "HoldUnSelected")
                    {
                        ListView listView = null;
                        if (View is DashboardView)
                        {
                            DashboardViewItem TestViewSub = ((DashboardView)View).FindItem("TestViewSub") as DashboardViewItem;
                            if (TestViewSub != null && TestViewSub.InnerView != null)
                            {
                                listView = TestViewSub.InnerView as ListView;
                            }
                        }
                        else if (View is ListView)
                        {
                            if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy")
                            {
                                listView = View as ListView;
                            }
                            else
                            {
                                if (Frame != null && Frame is NestedFrame)
                                {
                                    NestedFrame nestedFrame = (NestedFrame)Frame;
                                    if (nestedFrame != null && nestedFrame.ViewItem != null && nestedFrame.ViewItem.View != null)
                                    {
                                        CompositeView cv = nestedFrame.ViewItem.View;
                                        if (cv != null && cv is DashboardView)
                                        {
                                            DashboardViewItem TestViewSub = ((DashboardView)cv).FindItem("TestViewSub") as DashboardViewItem;
                                            if (TestViewSub != null && TestViewSub.InnerView != null)
                                            {
                                                listView = TestViewSub.InnerView as ListView;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (listView != null && listView.CollectionSource.GetCount() > 0)
                        {
                            ASPxGridListEditor editor = (ASPxGridListEditor)listView.Editor;
                            if (editor != null)
                            {
                                object curoid = editor.Grid.GetRowValues(int.Parse(values[1]), "Oid");
                                Testparameter param = ObjectSpace.GetObjectByKey<Testparameter>(curoid);
                                if (param != null && param.TestMethod != null)
                                {
                                    if (SRInfo.lstHoldTest == null)
                                    {
                                        SRInfo.lstHoldTest = new List<Guid>();
                                    }
                                    if (values[0] == "HoldSelected")
                                    {

                                        if (!SRInfo.lstHoldTest.Contains(param.TestMethod.Oid))
                                        {
                                            SRInfo.lstHoldTest.Add(param.TestMethod.Oid);
                                        }
                                    }
                                    else
                                    {
                                        if (SRInfo.lstHoldTest.Contains(param.TestMethod.Oid))
                                        {
                                            SRInfo.lstHoldTest.Remove(param.TestMethod.Oid);
                                        }
                                    }
                                }
                            }
                            boolHold = true;

                        }
                    }

                    else if (values[0] == "SuboutSelected" || values[0] == "SuboutUnSelected")
                    {
                        ListView listView = null;
                        if (View is DashboardView)
                        {
                            DashboardViewItem TestViewSub = ((DashboardView)View).FindItem("TestViewSub") as DashboardViewItem;
                            if (TestViewSub != null && TestViewSub.InnerView != null)
                            {
                                listView = TestViewSub.InnerView as ListView;
                            }
                        }
                        else if (View is ListView)
                        {
                            if (View.Id == "Testparameter_LookupListView_Copy_SampleLogin_Copy")
                            {
                                listView = View as ListView;
                            }
                            else
                            {
                                if (Frame != null && Frame is NestedFrame)
                                {
                                    NestedFrame nestedFrame = (NestedFrame)Frame;
                                    if (nestedFrame != null && nestedFrame.ViewItem != null && nestedFrame.ViewItem.View != null)
                                    {
                                        CompositeView cv = nestedFrame.ViewItem.View;
                                        if (cv != null && cv is DashboardView)
                                        {
                                            DashboardViewItem TestViewSub = ((DashboardView)cv).FindItem("TestViewSub") as DashboardViewItem;
                                            if (TestViewSub != null && TestViewSub.InnerView != null)
                                            {
                                                listView = TestViewSub.InnerView as ListView;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (listView != null && listView.CollectionSource.GetCount() > 0)
                        {
                            ASPxGridListEditor editor = (ASPxGridListEditor)listView.Editor;
                            if (editor != null)
                            {
                                object curoid = editor.Grid.GetRowValues(int.Parse(values[1]), "Oid");
                                SRInfo.indexOfCurrentObject = curoid;
                                Testparameter param = ObjectSpace.GetObjectByKey<Testparameter>(curoid);
                                if (param != null && param.TestMethod != null)
                                {
                                    if (SRInfo.lstSubOutTest == null)
                                    {
                                        SRInfo.lstSubOutTest = new List<Guid>();
                                    }
                                    if (SRInfo.lstOfUncheckedSubout == null)
                                    {
                                        SRInfo.lstOfUncheckedSubout = new List<Guid>();
                                    }
                                    if (values[0] == "SuboutSelected")
                                    {
                                        if (!SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid) && param.SubOut == false)
                                        {
                                            SRInfo.lstSubOutTest.Add(param.TestMethod.Oid);
                                            if (SRInfo.lstOfUncheckedSubout.Contains(param.TestMethod.Oid))
                                            {
                                                SRInfo.lstOfUncheckedSubout.Remove(param.TestMethod.Oid);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid))
                                        {
                                            Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                                            UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                                            Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = uow.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.SampleOid));
                                            if (objSamplelogin != null && objSamplelogin.SubOut == true && SRInfo.isConfirmedToUncheckSubout == false)
                                            {
                                                WebWindow.CurrentRequestWindow.RegisterClientScript("Openspreadsheet", string.Format(CultureInfo.InvariantCulture, @"var openconfirm = confirm('Unchecking the SubOut from tests will uncheck the Subout from sample too. And still the tests that are checked SubOut will go through the procedure. Do you still want to continue?'); {0}", uncheckSampleSubout.CallbackManager.GetScript("uncheckSampleSubout", "openconfirm")));
                                            }
                                            else if (objSamplelogin != null && objSamplelogin.SubOut == true && SRInfo.isConfirmedToUncheckSubout == true)
                                            {
                                                if (SRInfo.lstdupfilterSuboutstr.Contains(param.TestMethod.TestName + "|" + param.TestMethod.MethodName.MethodNumber + "|" + param.TestMethod.MatrixName.MatrixName + "|" + param.Component.Components))
                                                {
                                                    SRInfo.lstdupfilterSuboutstr.Remove(param.TestMethod.TestName + "|" + param.TestMethod.MethodName.MethodNumber + "|" + param.TestMethod.MatrixName.MatrixName + "|" + param.Component.Components);
                                                }
                                                SRInfo.lstSubOutTest.Remove(param.TestMethod.Oid);
                                                if (!SRInfo.lstOfUncheckedSubout.Contains(param.TestMethod.Oid))
                                                {
                                                    SRInfo.lstOfUncheckedSubout.Add(param.TestMethod.Oid);
                                                }
                                                if (SRInfo.lstOfUncheckedSubout != null && SRInfo.lstOfUncheckedSubout.Count > 0)
                                                {
                                                    foreach (Guid uncheckedSubout in SRInfo.lstOfUncheckedSubout)
                                                    {
                                                        SampleParameter objsmpltest = View.ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]= ?", objSamplelogin.Oid));
                                                        if (objsmpltest != null)
                                                        {
                                                            IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.oid] =?", uncheckedSubout));
                                                            foreach (Testparameter obj in ((ListView)View).CollectionSource.List.Cast<Testparameter>().ToList())
                                                            {
                                                                if (testparameters.Contains(obj))
                                                                {
                                                                    obj.SubOut = false;
                                                                    SRInfo.isConfirmedToUncheckSubout = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else if (objSamplelogin != null && objSamplelogin.SubOut == false)
                                            {
                                                if (SRInfo.lstdupfilterSuboutstr.Contains(param.TestMethod.TestName + "|" + param.TestMethod.MethodName.MethodNumber + "|" + param.TestMethod.MatrixName.MatrixName + "|" + param.Component.Components))
                                                {
                                                    SRInfo.lstdupfilterSuboutstr.Remove(param.TestMethod.TestName + "|" + param.TestMethod.MethodName.MethodNumber + "|" + param.TestMethod.MatrixName.MatrixName + "|" + param.Component.Components);
                                                }
                                                SRInfo.lstSubOutTest.Remove(param.TestMethod.Oid);
                                                if (!SRInfo.lstOfUncheckedSubout.Contains(param.TestMethod.Oid))
                                                {
                                                    SRInfo.lstOfUncheckedSubout.Add(param.TestMethod.Oid);
                                                }
                                                if (SRInfo.lstOfUncheckedSubout != null && SRInfo.lstOfUncheckedSubout.Count > 0)
                                                {
                                                    foreach (Guid uncheckedSubout in SRInfo.lstOfUncheckedSubout)
                                                    {
                                                        SampleParameter objsmpltest = View.ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]= ?", objSamplelogin.Oid));
                                                        if (objsmpltest != null)
                                                        {
                                                            IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.oid] =?", uncheckedSubout));
                                                            foreach (Testparameter obj in ((ListView)View).CollectionSource.List.Cast<Testparameter>().ToList())
                                                            {
                                                                if (testparameters.Contains(obj))
                                                                {
                                                                    obj.SubOut = false;
                                                                    SRInfo.isConfirmedToUncheckSubout = true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else if (values[0] == "BottleAllocationQtyUpdate")
                    {
                        if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                        {
                            NestedFrame nestedFrame = (NestedFrame)Frame;
                            CompositeView view = nestedFrame.ViewItem.View;
                            foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                            {
                                if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
                                {
                                    frameContainer.Frame.View.ObjectSpace.Refresh();
                                }
                            }
                        }
                    }
                    else if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                    {
                        if (values[0] == "Email")
                        {
                            string[] param = parameter.Split('|');
                            ASPxGridListEditor editor = ((ListView)View).Editor as ASPxGridListEditor;
                            HttpContext.Current.Session["rowid"] = editor.Grid.GetRowValues(int.Parse(param[1]), "Oid");
                            IObjectSpace objectSpace = Application.CreateObjectSpace();
                            CollectionSource cs = new CollectionSource(objectSpace, typeof(Contact));
                            Samplecheckin objchkin = View.ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", new Guid(HttpContext.Current.Session["rowid"].ToString())));
                            if (objchkin != null && objchkin.ClientName != null)
                            {
                                cs.Criteria["Filter"] = CriteriaOperator.Parse("Not IsNullOrEmpty([Email]) And [Customer.Oid] = ? And SampleReceiptNotification = true", objchkin.ClientName.Oid);
                            }

                            ListView lvcontact = Application.CreateListView("Contact_LookupListView_Samplereceipt_EmailList", cs, false);
                            ShowViewParameters showViewParameters = new ShowViewParameters(lvcontact);
                            showViewParameters.CreatedView = lvcontact;
                            showViewParameters.Context = TemplateContext.PopupWindow;
                            showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                            DialogController dc = Application.CreateController<DialogController>();
                            dc.SaveOnAccept = false;
                            dc.CloseOnCurrentObjectProcessing = false;
                            dc.Accepting += Dc_Acceptingmailselection;
                            showViewParameters.Controllers.Add(dc);
                            Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                        }
                    }
                    else if (values[0] == "TAT")
                    {
                        ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                        if (gridListEditor != null)
                        {
                            object Guid = gridListEditor.Grid.GetRowValues(int.Parse(values[1]), "Oid");
                            if (Guid != null)
                            {
                                CustomDueDate objDate = View.ObjectSpace.FindObject<CustomDueDate>(CriteriaOperator.Parse("Oid=?", new Guid(Guid.ToString())));
                                Samplecheckin objsamplecheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                                if (objDate != null && objsamplecheckin != null && objsamplecheckin.TAT != null && !objsamplecheckin.IsSampling)
                                {
                                    if (objDate.TAT.Count <= objsamplecheckin.TAT.Count)
                                    {
                                        int tatHour = objDate.TAT.Count;
                                        int Day = 0;
                                        if (tatHour >= 24)
                                        {
                                            Day = tatHour / 24;
                                            objDate.DueDate = AddWorkingDays(objsamplecheckin.RecievedDate, Day);
                                        }
                                        else
                                        {
                                            objDate.DueDate = AddWorkingHours(objsamplecheckin.RecievedDate, tatHour);
                                        }
                                         ((ListView)View).Refresh();
                                    }
                                    else if (objDate.TAT.Count != objsamplecheckin.TAT.Count)
                                    {
                                        TurnAroundTime objTAT = View.ObjectSpace.GetObjectByKey<TurnAroundTime>(objsamplecheckin.TAT.Oid);
                                        objDate.TAT = objTAT;
                                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "CRDueDate"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        ((ListView)View).Refresh();
                                        return;
                                    }

                                }
                            }
                        }
                    }
                    else
                    {
                        if (View is ListView)
                        {
                            ((ASPxGridListEditor)((ListView)View).Editor).Grid.UpdateEdit();
                        }
                        if (values[0] == "Delete" && !string.IsNullOrEmpty(values[1]))
                        {
                            IObjectSpace objspace = Application.CreateObjectSpace();
                            IList<SampleParameter> objsample = objspace.GetObjects<SampleParameter>(CriteriaOperator.Parse("Samplelogin=?", new Guid(values[1])));
                            Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLog = objspace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("Oid=?", new Guid(values[1])));
                            objspace.Delete(objsample);
                            sampleLog.Test = false;
                            objspace.CommitChanges();
                            NestedFrame nestedFrame = (NestedFrame)Frame;
                            CompositeView view = nestedFrame.ViewItem.View;
                            foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                            {
                                if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
                                {
                                    //frameContainer.Frame.View.ObjectSpace.Refresh();
                                    if (frameContainer.Frame.View is DetailView)
                                    {
                                        frameContainer.Frame.View.ObjectSpace.ReloadObject(frameContainer.Frame.View.CurrentObject);
                                    }
                                    else
                                    {
                                        (frameContainer.Frame.View as DevExpress.ExpressApp.ListView).CollectionSource.Reload();
                                    }
                                    frameContainer.Frame.View.Refresh();
                                }
                            }
                        }
                        else
                        {
                            if (values[0] != "VisualMatrix")
                            {
                                SRInfo.strSampleID = values[0].Substring(values[0].IndexOf("-") + 1);
                            }
                            else
                            {
                                SRInfo.strSampleID = null;
                            }
                            //IObjectSpace objspace = Application.CreateObjectSpace();
                            //Samplecheckin objsmplcheckin = View.CurrentObject as Samplecheckin;
                            //Guid objguid = objsmplcheckin.Oid;
                            //VisualMatrix objitempVM = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", objguid));
                            //if (objitempVM != null)
                            //{
                            //    objSLInfo.SLVisualMatrixName = objitempVM.MatrixName.MatrixName;
                            //}
                        }
                    }
                }
                else
                {
                    SRInfo.strSampleID = "error";
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Dc_Accepting2(object sender, DialogControllerAcceptingEventArgs e)
        {
            CustomDueDate objsampling = ((ListView)View).CollectionSource.List.Cast<CustomDueDate>().Where(a => a.Oid == new Guid(HttpContext.Current.Session["rowid"].ToString())).First();
            if (objsampling != null)
            {
                if (e.AcceptActionArgs.SelectedObjects.Count > 0)
                {
                    objsampling.ParameterDetails = string.Join(",", e.AcceptActionArgs.SelectedObjects.Cast<Testparameter>().OrderBy(a => a.Sort).Select(a => a.Oid));
                }
                else
                {
                    //objsampling.ParameterDetails = null;
                    e.Cancel = true;
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectparameter"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                    return;
                }
                if (e.AcceptActionArgs.SelectedObjects.Count > 0)
                {
                    if (e.AcceptActionArgs.SelectedObjects.Count == SRInfo.Totparam)
                    {
                        objsampling.Parameter = "AllParam";
                    }
                    else
                    {
                        objsampling.Parameter = "Customised";
                    }
                }
                else
                {
                    objsampling.Parameter = null;
                }
            }
        }

        private void Dc_Acceptingmailselection(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                if (sender != null)
                {
                    DialogController dc = (DialogController)sender;
                    if (dc.Window.View != null && dc.Window.View.SelectedObjects.Count == 1)
                    {
                        Samplecheckin objchkin = ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", new Guid(HttpContext.Current.Session["rowid"].ToString())));
                        if (objchkin != null)
                        {
                            foreach (Contact objcontact in dc.Window.View.SelectedObjects)
                            {
                                objchkin.EmailList = ObjectSpace.GetObject(objcontact);
                                objchkin.Email = objcontact.Email;
                                ObjectSpace.CommitChanges();
                            }
                        }
                    }
                    else if (dc.Window.View != null && dc.Window.View.SelectedObjects.Count > 1)
                    {
                        Samplecheckin objchkin = View.ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid] = ?", new Guid(HttpContext.Current.Session["rowid"].ToString())));
                        if (objchkin != null)
                        {
                            string lstmail = string.Empty;
                            foreach (Contact objContact in dc.Window.View.SelectedObjects)
                            {
                                if (!string.IsNullOrEmpty(objContact.Email))
                                {
                                    if (string.IsNullOrEmpty(lstmail))
                                    {
                                        lstmail = objContact.Email;
                                    }
                                    else if (!string.IsNullOrEmpty(lstmail))
                                    {
                                        lstmail = lstmail + ", " + objContact.Email;
                                    }
                                }
                            }
                            objchkin.Email = lstmail;
                            View.ObjectSpace.CommitChanges();
                            View.ObjectSpace.Refresh();

                        }
                    }
                    else if (dc.Window.View != null && dc.Window.View.SelectedObjects.Count == 0)
                    {
                        e.Cancel = true;
                        Application.ShowViewStrategy.ShowMessage("Select email id to continue", InformationType.Error, timer.Seconds, InformationPosition.Top);
                    }
                }
                //string strEmail = string.Empty;
                //foreach(string stremail in)
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        public void GetDispositionNavigationItemCount()
        {
            try
            {
                //ShowNavigationController = Application.MainWindow.GetController<ShowNavigationItemController>();
                //if (ShowNavigationController != null)
                //{
                //    ChoiceActionItem parent = ShowNavigationController.ShowNavigationItemAction.Items.FirstOrDefault(i => i.Id == "SampleManagement");
                //    if (parent != null)
                //    {
                //        ChoiceActionItem childPendingDisposal = parent.Items.FirstOrDefault(i => i.Id == "SampleDisposition");
                //        if (childPendingDisposal != null && childPendingDisposal.Active==true)
                //        {
                //            IObjectSpace objSpace = Application.CreateObjectSpace();
                //            Session currentsession = ((XPObjectSpace)objSpace).Session;
                //            int count = Convert.ToInt32(currentsession.ExecuteScalar("GetPendingDisposalSamplesCount"));
                //            var cap = childPendingDisposal.Caption.Split(new string[] { " (" }, StringSplitOptions.None);
                //            if (count > 0)
                //            {
                //                childPendingDisposal.Caption = cap[0] + " (" + count + ")";
                //            }
                //            else
                //            {
                //                childPendingDisposal.Caption = cap[0];
                //            }
                //        }
                //    }
                //}
            }

            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Test_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                //((ASPxGridListEditor)((ListView)View).Editor).Grid.UpdateEdit();
                //((ListView)View).ObjectSpace.CommitChanges();
                if (View.ObjectSpace.ModifiedObjects.Count > 0)
                {
                    View.ObjectSpace.CommitChanges();
                }
                UnitOfWork uow = new UnitOfWork(((XPObjectSpace)this.ObjectSpace).Session.DataLayer);
                Modules.BusinessObjects.SampleManagement.SampleLogIn samplelogIn = (Modules.BusinessObjects.SampleManagement.SampleLogIn)e.CurrentObject;
                if (samplelogIn != null && samplelogIn.VisualMatrix != null)
                //if (SRInfo.strSampleID != "error")
                {
                    SRInfo.IsTestAssignmentClosed = false;
                    objSLInfo.SLVisualMatrixName = samplelogIn.VisualMatrix.MatrixName.MatrixName;
                    DashboardView dashboard = Application.CreateDashboardView(ObjectSpace, "Test", false);
                    ShowViewParameters showViewParameters = new ShowViewParameters(dashboard);
                    showViewParameters.Context = TemplateContext.NestedFrame;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    showViewParameters.CreatedView.Closed += CreatedView_Closed;
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.AcceptAction.Active.SetItemValue("disable", false);
                    dc.CancelAction.Active.SetItemValue("disable", false);
                    dc.CloseOnCurrentObjectProcessing = false;
                    //dc.Accepting += Dc_Accepting;
                    showViewParameters.Controllers.Add(dc);
                    //CurrentLanguage currentLanguage = ObjectSpace.FindObject<CurrentLanguage>(CriteriaOperator.Parse(""));
                    if (objLanguage.strcurlanguage != "En")
                    {
                        showViewParameters.CreatedView.Caption = "选择检测项目 - " + samplelogIn.SampleID;
                    }
                    else
                    {
                        showViewParameters.CreatedView.Caption = "Test Assignment - " + samplelogIn.SampleID;
                    }
                    SRInfo.SampleOid = samplelogIn.Oid;
                    SRInfo.lstTestParameter = new List<Guid>();
                    SRInfo.lstSavedTestParameter = new List<Guid>();
                    SRInfo.lstdupfilterguid = new List<Guid>();
                    SRInfo.lstdupfilterstr = new List<string>();
                    SRInfo.lstSubOutTest = new List<Guid>();
                    SRInfo.lstHoldTest = new List<Guid>();
                    SRInfo.lstdupfilterHoldstr = new List<string>();
                    SRInfo.lstdupfilterSuboutstr = new List<string>();
                    SRInfo.lstRemoveTestParameter = new List<Guid>();
                    //SRInfo.lstOfUncheckedSubout = new List<Guid>();
                    SRInfo.isConfirmedToUncheckSubout = false;

                    List<SampleParameter> objsample = uow.Query<SampleParameter>().Where(i => i.Samplelogin != null && i.Samplelogin.Oid == samplelogIn.Oid).ToList();
                    //IList<SampleParameter> objsample = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("Samplelogin=?", samplelogIn.Oid));
                    //List<Guid> lstSuboutTestOids = samplelogIn.JobID.CustomDueDates.Where(i => i.TestMethod != null && i.Subout).Select(i => i.TestMethod.Oid).ToList();
                    if (objsample != null && objsample.Count > 0)
                    {
                        foreach (SampleParameter sample in objsample.ToList())
                        {
                            if (!SRInfo.lstTestParameter.Contains(sample.Testparameter.Oid))
                            {
                                if (sample.IsGroup != true)
                                {
                                    if (sample.Testparameter.TestMethod != null && sample.Testparameter.TestMethod.MethodName != null && sample.Testparameter.TestMethod.MatrixName != null && sample.Testparameter.Component != null)
                                    {
                                        if (!SRInfo.lstdupfilterstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                        {
                                            SRInfo.lstdupfilterstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                            SRInfo.lstdupfilterguid.Add(sample.Testparameter.Oid);
                                        }
                                    }
                                    else if (sample.Testparameter.TestMethod != null && sample.Testparameter.TestMethod.MatrixName != null && sample.Testparameter.Component != null)
                                    {
                                        if (!SRInfo.lstdupfilterstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                        {
                                            SRInfo.lstdupfilterstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                            SRInfo.lstdupfilterguid.Add(sample.Testparameter.Oid);
                                        }
                                    }
                                    SRInfo.lstSavedTestParameter.Add(sample.Testparameter.Oid);
                                    SRInfo.lstTestParameter.Add(sample.Testparameter.Oid);
                                    if (sample.SubOut == true)
                                    {
                                        if (!SRInfo.lstSubOutTest.Contains(sample.Testparameter.TestMethod.Oid))
                                        {
                                            if (!SRInfo.lstdupfilterSuboutstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                            {
                                                SRInfo.lstdupfilterSuboutstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                            }
                                            SRInfo.lstSubOutTest.Add(sample.Testparameter.TestMethod.Oid);
                                        }
                                    }
                                    else if (sample.Samplelogin.SubOut == true && SRInfo.lstOfUncheckedSubout == null)
                                    {
                                        if (!SRInfo.lstdupfilterSuboutstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                        {
                                            SRInfo.lstdupfilterSuboutstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                        }
                                        SRInfo.lstSubOutTest.Add(sample.Testparameter.TestMethod.Oid);
                                    }
                                    if (sample.TestHold == true)
                                    {
                                        if (!SRInfo.lstHoldTest.Contains(sample.Testparameter.TestMethod.Oid))
                                        {
                                            if (!SRInfo.lstdupfilterHoldstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                            {
                                                SRInfo.lstdupfilterHoldstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                            }
                                            SRInfo.lstHoldTest.Add(sample.Testparameter.TestMethod.Oid);
                                        }
                                    }
                                    else if (sample.Testparameter.Hold == true)
                                    {
                                        if (!SRInfo.lstdupfilterHoldstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                        {
                                            SRInfo.lstdupfilterHoldstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                        }
                                        SRInfo.lstHoldTest.Add(sample.Testparameter.TestMethod.Oid);
                                    }

                                }
                                else
                                {
                                    GroupTestMethod objgtm = uow.FindObject<GroupTestMethod>(CriteriaOperator.Parse("[Oid] =?", sample.GroupTest.Oid));
                                    if (objgtm != null && objgtm.TestMethod != null && objgtm.TestMethod.Oid != null)
                                    {
                                        List<Testparameter> testparameters = uow.Query<Testparameter>().Where(i => i.TestMethod != null && i.TestMethod.Oid == objgtm.TestMethod.Oid).ToList();
                                        //IList<Testparameter> testparameters = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", objgtm.TestMethod.Oid));
                                        foreach (Testparameter objtp in testparameters.ToList())
                                        {
                                            if (!SRInfo.lstdupfilterguid.Contains(objtp.Oid))
                                            {
                                                SRInfo.lstdupfilterguid.Add(objtp.Oid);
                                            }
                                            if (!SRInfo.lstSavedTestParameter.Contains(objtp.Oid))
                                            {
                                                SRInfo.lstSavedTestParameter.Add(objtp.Oid);
                                            }
                                            if (!SRInfo.lstTestParameter.Contains(objtp.Oid))
                                            {
                                                SRInfo.lstTestParameter.Add(objtp.Oid);
                                            }
                                        }
                                    }
                                    if (sample.SubOut == true)
                                    {
                                        if (!SRInfo.lstSubOutTest.Contains(sample.Testparameter.TestMethod.Oid))
                                        {
                                            if (!SRInfo.lstdupfilterSuboutstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                            {
                                                SRInfo.lstdupfilterSuboutstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                            }
                                            SRInfo.lstSubOutTest.Add(sample.Testparameter.TestMethod.Oid);
                                        }
                                    }
                                    if (sample.TestHold == true)
                                    {
                                        if (!SRInfo.lstHoldTest.Contains(sample.Testparameter.TestMethod.Oid))
                                        {
                                            if (!SRInfo.lstdupfilterHoldstr.Contains(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components))
                                            {
                                                SRInfo.lstdupfilterHoldstr.Add(sample.Testparameter.TestMethod.TestName + "|" + sample.Testparameter.TestMethod.MethodName.MethodNumber + "|" + sample.Testparameter.TestMethod.MatrixName.MatrixName + "|" + sample.Testparameter.Component.Components);
                                            }
                                            SRInfo.lstHoldTest.Add(sample.Testparameter.TestMethod.Oid);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    SRInfo.IsTestcanFilter = true;
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));

                }
                else
                {
                    SRInfo.strSampleID = "error";
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectmatrix"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Dc_Accepting(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLog = (Modules.BusinessObjects.SampleManagement.SampleLogIn)View.CurrentObject;
                IObjectSpace objSpace = this.ObjectSpace;
                Session currentSession = ((XPObjectSpace)(objSpace)).Session;
                Samplecheckin objSampleCheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                foreach (Testparameter objtestparameter in e.AcceptActionArgs.SelectedObjects)
                {
                    SampleParameter objsample = objSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("Samplelogin=? And Testparameter=?", sampleLog.Oid, objtestparameter.Oid));
                    if (objsample == null)
                    {
                        SampleParameter newsample = new SampleParameter(currentSession);
                        //SampleParameter newsample = ObjectSpace.CreateObject<SampleParameter>();
                        newsample.Samplelogin = sampleLog;
                        newsample.Testparameter = objtestparameter;
                        sampleLog.Test = true;
                    }
                }
                objSpace.CommitChanges();
                ObjectSpace.CommitChanges();
                NestedFrame nestedFrame = (NestedFrame)Frame;
                CompositeView view = nestedFrame.ViewItem.View;
                foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                {
                    if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
                    {
                        //frameContainer.Frame.View.ObjectSpace.Refresh();
                        if (frameContainer.Frame.View is DetailView)
                        {
                            frameContainer.Frame.View.ObjectSpace.ReloadObject(frameContainer.Frame.View.CurrentObject);
                        }
                        else
                        {
                            (frameContainer.Frame.View as DevExpress.ExpressApp.ListView).CollectionSource.Reload();
                        }
                        frameContainer.Frame.View.Refresh();
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SaveSampleRegistration_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                DashboardView dv = (DashboardView)Application.MainWindow.View;
                DashboardViewItem SLListView = (DashboardViewItem)dv.FindItem("SampleCheckin");
                DashboardViewItem SampleloginListView = (DashboardViewItem)dv.FindItem("SampleLogin");
                Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;

                CriteriaOperator cs = CriteriaOperator.Parse("JobID=?", SRInfo.strJobID);
                Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(cs);
                DetailView detailview = (DetailView)SLListView.InnerView;
                if (detailview != null)
                {
                    detailview.ObjectSpace.CommitChanges();
                }

                CriteriaOperator csSample = CriteriaOperator.Parse("JobID =?", objsamplecheckin.Oid);
                Modules.BusinessObjects.SampleManagement.SampleLogIn objsamplelogin = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(csSample);
                ListView SampleLoginView = (ListView)SampleloginListView.InnerView;
                ((ASPxGridListEditor)((ListView)SampleloginListView.InnerView).Editor).Grid.UpdateEdit();
                if (objsamplelogin != null)
                {
                    if (SampleLoginView != null)
                    {
                        SelectedData sproc = currentSession.ExecuteSproc("StatusUpdate_SP", new OperandValue(objsamplelogin.Oid));
                        boolsaveaction = true;
                        UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                        uow.CommitChanges();
                    }
                }
                else
                {
                    Application.ShowViewStrategy.ShowMessage("Samples not available, add Samples", InformationType.Error, 3000, InformationPosition.Top);
                }
                IList<Modules.BusinessObjects.SampleManagement.SampleLogIn> objsl = ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.JobID] =?", objSLInfo.focusedJobID));

                if (objsl.FirstOrDefault(i => i.SubOut == true) != null)
                {
                    foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLogIn in objsl)
                    {
                        if (sampleLogIn != null)
                        {
                            IList<SampleParameter> objsp = sampleLogIn.SampleParameter;
                            if (sampleLogIn.SubOut == true)
                            {
                                foreach (SampleParameter sp in objsp)
                                {
                                    if (sp != null && sp.SubOut != true)
                                    {
                                        sp.SubOut = true;
                                    }
                                }
                            }

                        }
                    }
                }

                //SLListView.View.ObjectSpace.CommitChanges();
                ObjectSpace.CommitChanges();

                //dv.ObjectSpace.CommitChanges();
                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\SuccessfulMessage", "Savesuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                //ShowNavigationItemController ShowNavigationController = Application.MainWindow.GetController<ShowNavigationItemController>();
                //ChoiceActionItem parentSubout = ShowNavigationController.ShowNavigationItemAction.Items.FirstOrDefault(i => i.Id == "SampleSubOutTracking");
                //if (parentSubout!=null && parentSubout.Id == "SampleSubOutTracking" && parentSubout.Active==true)
                //{
                //    ChoiceActionItem childSubout = parentSubout.Items.FirstOrDefault(i => i.Id == "SuboutSampleRegistration");
                //    if (childSubout != null && childSubout.Active==true)
                //    {
                //        IObjectSpace objectSpace = Application.CreateObjectSpace();
                //        IList<SampleParameter> objParam = objectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[SubOut] = True And [SuboutSample] Is Null And [Samplelogin] Is Not Null And [Testparameter] Is Not Null And [Testparameter.Parameter] Is Not Null And Not IsNullOrEmpty([Testparameter.Parameter.ParameterName])"));
                //        if (objParam != null && objParam.Count > 0)
                //        {
                //            var count = objParam.Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).GroupBy(i => i.Testparameter.TestMethod.Oid).Distinct().Count();
                //            var cap = childSubout.Caption.Split(new string[] { " (" }, StringSplitOptions.None);
                //            if (count > 0)
                //            {
                //                childSubout.Caption = cap[0] + " (" + count + ")";
                //            }
                //            else
                //            {
                //                childSubout.Caption = cap[0];
                //            }
                //        }
                //        objectSpace.Dispose();
                //    }
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void TestGroup_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                //if (SRInfo.strSampleID != "error")
                //{
                //    ((ASPxGridListEditor)((ListView)View).Editor).Grid.UpdateEdit();
                //    IObjectSpace objspace = Application.CreateObjectSpace();
                //    //object objToShow = objspace.CreateObject(typeof(GroupTest));
                //    //if (objToShow != null)
                //    //{
                //    CollectionSource cs = new CollectionSource(objspace, typeof(GroupTest));
                //    cs.Criteria.Clear();
                //    List<object> GroupTestName = new List<object>();
                //    using (XPView lstview = new XPView(((XPObjectSpace)this.ObjectSpace).Session, typeof(GroupTestMethod)))
                //    {
                //        lstview.Criteria = CriteriaOperator.Parse("[TestMethods.MatrixName.MatrixName]='" + objSLInfo.SLVisualMatrixName + "'");
                //        lstview.Properties.Add(new ViewProperty("GroupTestName", DevExpress.Xpo.SortDirection.Ascending, "GroupTests.TestGroupName", true, true));
                //        foreach (ViewRecord Vrec in lstview)
                //            GroupTestName.Add(Vrec["GroupTestName"]);
                //    }
                //    cs.Criteria["filter"] = new InOperator("TestGroupName", GroupTestName); ;
                //    ListView CreateListView = Application.CreateListView("GroupTest_ListView_Copy_Samplelogin", cs, false);
                //    //}
                //    ShowViewParameters showViewParameters = new ShowViewParameters(CreateListView);
                //    showViewParameters.Context = TemplateContext.PopupWindow;
                //    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                //    DialogController dc = Application.CreateController<DialogController>();
                //    dc.SaveOnAccept = false;
                //    dc.Accepting += Dc_Accepting1;
                //    showViewParameters.Controllers.Add(dc);
                //    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                //}
                //else
                //{
                //    //Application.ShowViewStrategy.ShowMessage("Select the VisualMatrix", InformationType.Error, timer.Seconds, InformationPosition.Top);
                //    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectmatrix"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Dc_Accepting1(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                Guid TestGroupName;
                Guid SLOid = new Guid();
                Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                //if (View != null)
                //{
                //    foreach (GroupTest obj in e.AcceptActionArgs.SelectedObjects)
                //    {
                //        if (obj != null)
                //        {
                //            TestGroupName = obj.Oid;
                //            CriteriaOperator criteria = CriteriaOperator.Parse("[Oid]='" + objSLInfo.SLOid + "'");
                //            Modules.BusinessObjects.SampleManagement.SampleLogIn objSL = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(criteria);
                //            CriteriaOperator criteria1 = CriteriaOperator.Parse("[Oid]='" + TestGroupName + "'");
                //            IList<GroupTest> objTP = ObjectSpace.GetObjects<GroupTest>(criteria1);
                //            SLOid = objSL.Oid;
                //            if (objTP != null)
                //            {
                //                foreach (GroupTest tp in objTP)
                //                {
                //                    foreach (TestMethod testmethod in tp.TestMethods)
                //                    {
                //                        if ((testmethod.RetireDate == DateTime.MinValue || testmethod.RetireDate > DateTime.Now) && (testmethod.MethodName.RetireDate == DateTime.MinValue || testmethod.MethodName.RetireDate > DateTime.Now))
                //                        {
                //                            foreach (Testparameter testparam in testmethod.TestParameter)
                //                            {
                //                                if (objSL != null && !objSL.Testparameters.Contains(testparam))
                //                                {
                //                                    if (testparam.TestMethod.MatrixName.MatrixName == objSLInfo.SLVisualMatrixName)
                //                                    {
                //                                        testparam.TestGroup = tp.TestGroupName;
                //                                        objSL.Testparameters.Add(testparam);
                //                                        objSL.Test = true;
                //                                    }
                //                                }
                //                            }
                //                        }
                //                    }
                //                }
                //            }
                //        }
                //    }
                //    ObjectSpace.CommitChanges();
                //}
                NestedFrame nestedFrame = (NestedFrame)Frame;
                CompositeView view = nestedFrame.ViewItem.View;
                foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                {
                    if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
                    {
                        //frameContainer.Frame.View.ObjectSpace.Refresh();
                        if (frameContainer.Frame.View is DetailView)
                        {
                            frameContainer.Frame.View.ObjectSpace.ReloadObject(frameContainer.Frame.View.CurrentObject);
                        }
                        else
                        {
                            (frameContainer.Frame.View as DevExpress.ExpressApp.ListView).CollectionSource.Reload();
                        }
                        frameContainer.Frame.View.Refresh();
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestDescription_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                IObjectSpace objspace = Application.CreateObjectSpace();
                TestDescription objToShow = objspace.CreateObject<TestDescription>();
                Samplecheckin objsamplecheckin = objspace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[JobID] =?", objSLInfo.TestJobID));
                if (objsamplecheckin != null && objsamplecheckin.TestDescription != null)
                {
                    objToShow.Description = objsamplecheckin.TestDescription;
                    DetailView CreateDetailView = Application.CreateDetailView(objspace, objToShow);
                    CreateDetailView.ViewEditMode = ViewEditMode.View;
                    Application.ShowViewStrategy.ShowViewInPopupWindow(CreateDetailView);
                }
                else if (objsamplecheckin != null && objsamplecheckin.TestDescription == null)
                {
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "testdescriptionempty"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void CreatedView_Closed(object sender, EventArgs e)
        {
            try
            {
                SRInfo.lstOfUncheckedSubout = null;
                SRInfo.isConfirmedToUncheckSubout = false;
                if (Frame is NestedFrame)
                {
                    NestedFrame nestedFrame = (NestedFrame)Frame;
                    if (nestedFrame != null)
                    {
                        CompositeView view = nestedFrame.ViewItem.View;
                        foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                        {
                            if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
                            {
                                //frameContainer.Frame.View.ObjectSpace.Refresh();
                                if (frameContainer.Frame.View is DetailView)
                                {
                                    frameContainer.Frame.View.ObjectSpace.ReloadObject(frameContainer.Frame.View.CurrentObject);
                                }
                                else
                                {
                                    (frameContainer.Frame.View as DevExpress.ExpressApp.ListView).CollectionSource.Reload();
                                    //frameContainer.Frame.View.ObjectSpace.Refresh();
                                    //frameContainer.Frame.GetController<RefreshController>().RefreshAction.DoExecute();
                                }
                                frameContainer.Frame.View.Refresh();
                            }
                        }
                        SRInfo.IsTestAssignmentClosed = true;
                    }
                }


                IObjectSpace os = Application.CreateObjectSpace();
                CriteriaOperator cs = CriteriaOperator.Parse("JobID=?", SRInfo.strJobID);
                Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = os.FindObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>(cs);
                if (objsamplecheckin != null)
                {
                    IList<Modules.BusinessObjects.SampleManagement.SampleParameter> lstSamples = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", objsamplecheckin.Oid));
                    if (lstSamples != null && lstSamples.Count > 0)
                    {
                        //if (lstSamples.FirstOrDefault(i => i.SignOff == false) == null)
                        //{
                        //    objsamplecheckin.Status = Modules.BusinessObjects.Hr.SampleRegistrationSignoffStatus.Signedoff;
                        //    os.CommitChanges();
                        //}
                        //else
                        if (lstSamples.Where(i => i.SignOff).Count() == 0)
                        {
                            objsamplecheckin.Status = Modules.BusinessObjects.Hr.SampleRegistrationSignoffStatus.PendingSubmit;
                            os.CommitChanges();
                        }
                        else
                        if (lstSamples.Where(i => i.SignOff).Count() < lstSamples.Count)
                        {
                            objsamplecheckin.Status = Modules.BusinessObjects.Hr.SampleRegistrationSignoffStatus.PartiallySignedOff;
                            os.CommitChanges();
                        }
                    }
                }

                //Frame.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();

                //ShowNavigationItemController ShowNavigationController = Application.MainWindow.GetController<ShowNavigationItemController>();
                //if (ShowNavigationController != null)
                //{
                //    ChoiceActionItem parent = ShowNavigationController.ShowNavigationItemAction.Items.FirstOrDefault(i => i.Id == "SamplePreparationRootNode");
                //    if (parent != null)
                //    {
                //        //ChoiceActionItem child = parent.Items.FirstOrDefault(i => i.Id == "SamplePreparation");
                //        //if (child != null)
                //        //{
                //        //    IObjectSpace objectSpace = Application.CreateObjectSpace();
                //        //    int objperpCount = objectSpace.GetObjects<TestMethod>().ToList().Where(i => i.NoOfPrepSamples > 0).Count();
                //        //    var cap = child.Caption.Split(new string[] { " (" }, StringSplitOptions.None);
                //        //    if (objperpCount > 0)
                //        //    {
                //        //        child.Caption = cap[0] + " (" + objperpCount + ")";
                //        //    }
                //        //    else
                //        //    {
                //        //        child.Caption = cap[0];
                //        //    }
                //        //    //int count = 0;
                //        //    //IObjectSpace objSpace = Application.CreateObjectSpace();
                //        //    //using (XPView lstview = new XPView(((XPObjectSpace)objSpace).Session, typeof(SampleParameter)))
                //        //    //{
                //        //    //    lstview.Criteria = CriteriaOperator.Parse("[Testparameter.TestMethod.PrepMethods][].Count() > 0 And [Samplelogin] Is Not Null And [SamplePrepBatchID] Is Null And [Status] = 'PendingEntry'");
                //        //    //    lstview.Properties.Add(new ViewProperty("TestOid", DevExpress.Xpo.SortDirection.Ascending, "Testparameter.TestMethod.Oid", true, true));
                //        //    //    List<object> jobid = new List<object>();
                //        //    //    if (lstview != null)
                //        //    //    {
                //        //    //        foreach (ViewRecord rec in lstview)
                //        //    //            jobid.Add(rec["TestOid"]);
                //        //    //    }

                //        //    //    count = jobid.Count;
                //        //    //}
                //        //    //var cap = child.Caption.Split(new string[] { " (" }, StringSplitOptions.None);
                //        //    //if (count > 0)
                //        //    //{
                //        //    //    child.Caption = cap[0] + " (" + count + ")";
                //        //    //}
                //        //    //else
                //        //    //{
                //        //    //    child.Caption = cap[0];
                //        //    //}
                //        //}
                //    }
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestSelectionAdd_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                DashboardViewItem TestViewMain = ((DashboardView)View).FindItem("TestViewMain") as DashboardViewItem;
                DashboardViewItem TestViewSub = ((DashboardView)View).FindItem("TestViewSub") as DashboardViewItem;
                DashboardViewItem TestViewSubChild = ((DashboardView)View).FindItem("TestViewSubChild") as DashboardViewItem;
                if (TestViewMain != null && ((ListView)TestViewMain.InnerView).SelectedObjects.Count > 0)
                {
                    List<Guid> lstSubOutTestOid = new List<Guid>();
                    List<Guid> lstHoldTestOid = new List<Guid>();
                    if (SRInfo.lstSubOutTest == null)
                    {
                        SRInfo.lstSubOutTest = new List<Guid>();
                    }
                    if (SRInfo.lstdupfilterSuboutstr == null)
                    {
                        SRInfo.lstdupfilterSuboutstr = new List<string>();
                    }

                    if (SRInfo.lstHoldTest == null)
                    {
                        SRInfo.lstHoldTest = new List<Guid>();
                    }
                    if (SRInfo.lstdupfilterHoldstr == null)
                    {
                        SRInfo.lstdupfilterHoldstr = new List<string>();
                    }
                    Samplecheckin objJobID = ObjectSpace.FindObject<Samplecheckin>(CriteriaOperator.Parse("[JobID] = ? AND [GCRecord] is NULL", SRInfo.strJobID));
                    //if (objJobID != null && objJobID.CustomDueDates.FirstOrDefault(i => i.TestMethod != null && i.Subout) != null)
                    //{
                    //    lstSubOutTestOid = objJobID.CustomDueDates.Where(i => i.TestMethod != null && i.Subout).Select(i => i.TestMethod.Oid).ToList();
                    //}                    
                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSL = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ? AND [GCRecord] is NULL", SRInfo.SampleOid));
                    foreach (Testparameter testparameter in ((ListView)TestViewMain.InnerView).SelectedObjects)
                    {
                        if (testparameter.IsGroup == false)
                        {
                            IList<Testparameter> listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MethodName.MethodNumber]=? and [TestMethod.MatrixName.MatrixName] = ? and Component.Components=? And TestMethod.GCRecord Is Null And TestMethod.MethodName.GCRecord Is Null And TestMethod.MatrixName.GCRecord Is Null And [QCType.QCTypeName] = 'Sample'", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName, testparameter.Component.Components));
                            //IList<Testparameter> listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MethodName.MethodNumber]=? and [TestMethod.MatrixName.MatrixName] = ?", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName));
                            //IList<Testparameter> listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MethodName.MethodName]=? and [TestMethod.MatrixName.MatrixName] = ?", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodName, testparameter.TestMethod.MatrixName.MatrixName));
                            //IList<Testparameter> listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MethodName.MethodName]=? and [QCType.QCTypeName] = 'Sample'", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodName));
                            foreach (Testparameter test in listseltest)
                            {
                                if (lstSubOutTestOid != null && lstSubOutTestOid.Contains(test.TestMethod.Oid))
                                {

                                    if (!SRInfo.lstSubOutTest.Contains(test.TestMethod.Oid))
                                    {
                                        SRInfo.lstSubOutTest.Add(test.TestMethod.Oid);
                                        //if (!SRInfo.lstdupfilterSuboutstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName))
                                        //{
                                        //    SRInfo.lstdupfilterSuboutstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName);
                                        //}
                                        if (!SRInfo.lstdupfilterSuboutstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component))
                                        {
                                            SRInfo.lstdupfilterSuboutstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component);
                                        }
                                    }
                                }
                                if (lstHoldTestOid != null && lstHoldTestOid.Contains(test.TestMethod.Oid))
                                {

                                    if (!SRInfo.lstHoldTest.Contains(test.TestMethod.Oid))
                                    {
                                        SRInfo.lstHoldTest.Add(test.TestMethod.Oid);
                                        //if (!SRInfo.lstdupfilterSuboutstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName))
                                        //{
                                        //    SRInfo.lstdupfilterSuboutstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName);
                                        //}
                                        if (!SRInfo.lstdupfilterHoldstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component))
                                        {
                                            SRInfo.lstdupfilterHoldstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component);
                                        }
                                    }
                                }




                                if (!SRInfo.lstTestParameter.Contains(test.Oid))
                                {
                                    SRInfo.lstTestParameter.Add(test.Oid);
                                    if (SRInfo.lstRemoveTestParameter.Contains(test.Oid))
                                    {
                                        SRInfo.lstRemoveTestParameter.Remove(test.Oid);
                                    }
                                }
                                if (objJobID != null && objSL.SubOut == true)
                                {
                                    if (!SRInfo.lstdupfilterSuboutstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component.Components))
                                    {
                                        SRInfo.lstdupfilterSuboutstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component.Components);
                                    }
                                    SRInfo.lstSubOutTest.Add(test.TestMethod.Oid);
                                }

                                if (objJobID != null && objSL.Hold == true)
                                {
                                    if (!SRInfo.lstdupfilterHoldstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component.Components))
                                    {
                                        SRInfo.lstdupfilterHoldstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component.Components);
                                    }
                                    SRInfo.lstHoldTest.Add(test.TestMethod.Oid);
                                }
                            }
                        }
                        else
                        {
                            IList<Testparameter> listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MatrixName.MatrixName] = ? ", testparameter.TestMethod.TestName, testparameter.TestMethod.MatrixName.MatrixName));
                            foreach (Testparameter test in listseltest)
                            {
                                if (lstSubOutTestOid != null && lstSubOutTestOid.Contains(test.TestMethod.Oid))
                                {

                                    if (!SRInfo.lstSubOutTest.Contains(test.TestMethod.Oid))
                                    {
                                        SRInfo.lstSubOutTest.Add(test.TestMethod.Oid);
                                        //if (!SRInfo.lstdupfilterSuboutstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName))
                                        //{
                                        //    SRInfo.lstdupfilterSuboutstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName.MethodNumber + "|" + test.TestMethod.MatrixName.MatrixName);
                                        //}
                                        if (!SRInfo.lstdupfilterSuboutstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component))
                                        {
                                            SRInfo.lstdupfilterSuboutstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component);
                                        }
                                    }
                                }
                                if (lstHoldTestOid != null && lstHoldTestOid.Contains(test.TestMethod.Oid))
                                {

                                    if (!SRInfo.lstHoldTest.Contains(test.TestMethod.Oid))
                                    {
                                        SRInfo.lstHoldTest.Add(test.TestMethod.Oid);
                                        if (!SRInfo.lstdupfilterHoldstr.Contains(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component))
                                        {
                                            SRInfo.lstdupfilterHoldstr.Add(test.TestMethod.TestName + "|" + test.TestMethod.MethodName + "|" + test.TestMethod.MatrixName.MatrixName + "|" + test.Component);
                                        }
                                    }
                                }
                                if (!SRInfo.lstTestParameter.Contains(test.Oid))
                                {
                                    SRInfo.lstTestParameter.Add(test.Oid);
                                }
                            }
                        }
                    }
                    if (TestViewSub != null && SRInfo.lstTestParameter != null && SRInfo.lstTestParameter.Count > 0)
                    {
                        ((ListView)TestViewMain.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("Not [Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                        ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                        ((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] is null");
                    }
                    if (objSL != null && objSL.SubOut == true)
                    {
                        foreach (Testparameter obj in ((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().ToList())
                        {
                            obj.SubOut = true;
                        }
                    }
                    if (objJobID.TAT != null)
                    {
                        TurnAroundTime tat = ((ListView)TestViewSub.InnerView).ObjectSpace.GetObjectByKey<TurnAroundTime>(objJobID.TAT.Oid);
                        if (TestViewSub != null)
                        {
                            IObjectSpace currentObjectSpace = View.ObjectSpace;
                            if (TestViewSub.InnerView is ListView innerListView)
                            {
                                foreach (Testparameter testparameter in innerListView.CollectionSource.List.Cast<Testparameter>().ToList().Where(i => i.TAT == null))
                                {
                                    if (testparameter.TAT == null)
                                        testparameter.TAT = tat;
                                }
                            }
                        }
                    }
                    ((ASPxGridListEditor)((ListView)TestViewSub.InnerView).Editor).Grid.JSProperties["cpCanGridRefresh"] = false;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestSelectionRemove_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                bool IsRemoved = true;
                DashboardViewItem TestViewMain = ((DashboardView)View).FindItem("TestViewMain") as DashboardViewItem;
                DashboardViewItem TestViewSub = ((DashboardView)View).FindItem("TestViewSub") as DashboardViewItem;
                DashboardViewItem TestViewSubChild = ((DashboardView)View).FindItem("TestViewSubChild") as DashboardViewItem;
                if (TestViewMain != null && TestViewSub != null && ((ListView)TestViewSub.InnerView).SelectedObjects.Count > 0)
                {
                    if (SRInfo.lstRemoveTestParameter == null)
                    {
                        SRInfo.lstRemoveTestParameter = new List<Guid>();
                    }
                    foreach (Testparameter testparameter in ((ListView)TestViewSub.InnerView).SelectedObjects)
                    {
                        IList<Testparameter> listseltest = new List<Testparameter>();
                        Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLog = TestViewSub.InnerView.ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(SRInfo.SampleOid);
                        if (sampleLog != null)
                        {
                            IList<SampleParameter> lstSample = null;
                            if (testparameter.IsGroup != true)
                            {
                                lstSample = TestViewSub.InnerView.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=? And [Testparameter.TestMethod.TestName]=? and [Testparameter.TestMethod.MethodName.MethodNumber]=? and [Testparameter.TestMethod.MatrixName.MatrixName] = ? and [Testparameter.Component.Components]=?", sampleLog.Oid, testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName, testparameter.Component.Components));
                            }
                            else
                            {
                                lstSample = TestViewSub.InnerView.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=? And [Testparameter.TestMethod.TestName]=?  and [Testparameter.TestMethod.MatrixName.MatrixName] = ? And [IsGroup]=true And [GroupTest.TestMethod.Oid]=? ", sampleLog.Oid, testparameter.TestMethod.TestName, testparameter.TestMethod.MatrixName.MatrixName, testparameter.TestMethod.Oid));
                            }
                            if ((lstSample != null && lstSample.Count > 0 && lstSample.FirstOrDefault(i => i.SignOff == true) == null) || lstSample.Count == 0)
                            {
                                if (testparameter.IsGroup != true)
                                {
                                    listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MethodName.MethodNumber]=? and [TestMethod.MatrixName.MatrixName] = ? and [Component.Components]=?", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName, testparameter.Component.Components));
                                }
                                else
                                {
                                    if (SRInfo.lstTestParameter.Contains(testparameter.Oid))
                                    {
                                        SRInfo.lstTestParameter.Remove(testparameter.Oid);
                                    }
                                    IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", testparameter.TestMethod.Oid));
                                    foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                                    {
                                        IList<Testparameter> lsttestpara = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objgtm.TestParameter.TestMethod.Oid));
                                        foreach (Testparameter paramgtm in lsttestpara.ToList())
                                        {
                                            listseltest.Add(paramgtm);
                                        }
                                    }
                                }
                                foreach (Testparameter test in listseltest)
                                {
                                    if (SRInfo.lstTestParameter.Contains(test.Oid))
                                    {
                                        SRInfo.lstTestParameter.Remove(test.Oid);
                                    }
                                    if (!SRInfo.lstRemoveTestParameter.Contains(test.Oid))
                                    {
                                        if (((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().FirstOrDefault(i => i.Oid == test.Oid) != null)
                                        {
                                            ((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().FirstOrDefault(i => i.Oid == test.Oid).Hold = false;
                                        }
                                        //test.Hold = false;
                                        SRInfo.lstRemoveTestParameter.Add(test.Oid);
                                    }
                                }
                            }
                            else
                            {
                                DefaultSetting objNavigationView = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));
                                DefaultSetting objSamplePreparation = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("[NavigationItemNameID]='SamplePreparationRootNode'"));
                                if (objNavigationView != null && objNavigationView.Select)
                                {
                                    IsRemoved = false;
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "testcannotremove"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    return;
                                }
                                if (objSamplePreparation != null && objSamplePreparation.Select)
                                {
                                    if (lstSample.FirstOrDefault(i => !string.IsNullOrEmpty(i.PrepBatchID)) != null)
                                    {
                                        IsRemoved = false;
                                        Application.ShowViewStrategy.ShowMessage("Already used in samplepreparation cannot be removed.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                        return;
                                    }
                                }
                                if (lstSample.FirstOrDefault(i => !string.IsNullOrEmpty(i.ResultNumeric)) != null)
                                {
                                    IsRemoved = false;
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletetest"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    return;
                                }
                                if (lstSample.FirstOrDefault(i => i.UQABID != null) != null)
                                {
                                    IsRemoved = false;
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "cannotdeletesample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                    return;
                                }
                                if (IsRemoved)
                                {
                                    if (testparameter.IsGroup != true)
                                    {
                                        listseltest = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.TestName]=? and [TestMethod.MethodName.MethodNumber]=? and [TestMethod.MatrixName.MatrixName] = ? and [Component.Components]=?", testparameter.TestMethod.TestName, testparameter.TestMethod.MethodName.MethodNumber, testparameter.TestMethod.MatrixName.MatrixName, testparameter.Component.Components));
                                    }
                                    else
                                    {
                                        if (SRInfo.lstTestParameter.Contains(testparameter.Oid))
                                        {
                                            SRInfo.lstTestParameter.Remove(testparameter.Oid);
                                        }
                                        IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", testparameter.TestMethod.Oid));
                                        foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                                        {
                                            IList<Testparameter> lsttestpara = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objgtm.TestParameter.TestMethod.Oid));
                                            foreach (Testparameter paramgtm in lsttestpara.ToList())
                                            {
                                                listseltest.Add(paramgtm);
                                            }
                                        }
                                    }
                                    foreach (Testparameter test in listseltest)
                                    {
                                        if (SRInfo.lstTestParameter.Contains(test.Oid))
                                        {
                                            SRInfo.lstTestParameter.Remove(test.Oid);
                                        }
                                        if (!SRInfo.lstRemoveTestParameter.Contains(test.Oid))
                                        {
                                            if (((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().FirstOrDefault(i => i.Oid == test.Oid) != null)
                                            {
                                                ((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().FirstOrDefault(i => i.Oid == test.Oid).Hold = false;
                                            }
                                            SRInfo.lstRemoveTestParameter.Add(test.Oid);
                                        }
                                    }
                                }
                            }

                        }



                    }
                    if (SRInfo.lstTestParameter.Count != 0 && TestViewSubChild != null)
                    {
                        ((ListView)TestViewMain.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("Not [Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                        ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] In(" + string.Format("'{0}'", string.Join("','", SRInfo.lstTestParameter.Select(i => i.ToString().Replace("'", "''")))) + ")");
                        ((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] is null");
                    }
                    else
                    {
                        ((ListView)TestViewMain.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("");
                        ((ListView)TestViewSub.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] is null");
                        ((ListView)TestViewSubChild.InnerView).CollectionSource.Criteria["filter"] = CriteriaOperator.Parse("[Oid] is null");
                    }
                }

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        //private void TestSelectionSave_Execute(object sender, SimpleActionExecuteEventArgs e)
        //{
        //    try
        //    {
        //        DashboardViewItem TestViewMain = ((DashboardView)View).FindItem("TestViewMain") as DashboardViewItem;
        //        DashboardViewItem TestViewSub = ((DashboardView)View).FindItem("TestViewSub") as DashboardViewItem;
        //        if (SRInfo.lstTestParameter != null && SRInfo.lstTestParameter.Count > 0)
        //        {
        //            Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLog = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.SampleOid));
        //            foreach (Guid objtestparameter in SRInfo.lstTestParameter)
        //            {
        //                Testparameter param = ObjectSpace.GetObjectByKey<Testparameter>(objtestparameter);
        //                if (!SRInfo.lstSavedTestParameter.Contains(objtestparameter) && param != null && param.QCType != null && param.QCType.QCTypeName == "Sample")
        //                {
        //                    SampleParameter newsample = ObjectSpace.CreateObject<SampleParameter>();
        //                    newsample.Samplelogin = sampleLog;
        //                    newsample.Testparameter = param;
        //                    newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
        //                    sampleLog.Test = true;
        //                    if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid))
        //                    {
        //                        newsample.SubOut = true;
        //                    }
        //                }
        //                else
        //                {
        //                    SampleParameter sample = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid]=? And [Samplelogin.Oid]=? And [Testparameter.Parameter.Oid] = ?", param.TestMethod.Oid, sampleLog.Oid,param.Parameter.Oid));
        //                    if (sample != null)
        //                    {
        //                        if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid))
        //                        {
        //                            sample.SubOut = true;
        //                        }
        //                        else
        //                        {
        //                            if(sample.SuboutSample==null)
        //                            {
        //                                sample.SubOut = false;
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //            if (SRInfo.lstRemoveTestParameter != null && SRInfo.lstRemoveTestParameter.Count > 0)
        //            {
        //                Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.JobID] = ?", SRInfo.strJobID));
        //                foreach (Guid objTestParameter in SRInfo.lstRemoveTestParameter)
        //                {
        //                    Testparameter param = ObjectSpace.GetObjectByKey<Testparameter>(objTestParameter);
        //                    if (SRInfo.lstRemoveTestParameter.Contains(objTestParameter) && param != null)
        //                    {
        //                        objSamplelogin.Testparameters.Remove(param);
        //                    }
        //                }
        //                SRInfo.lstRemoveTestParameter.Clear();
        //            }
        //            TestViewMain.InnerView.ObjectSpace.CommitChanges();
        //            TestViewSub.InnerView.ObjectSpace.CommitChanges();
        //            ObjectSpace.CommitChanges();
        //            AssignBottlesToSamples();
        //            (Frame as DevExpress.ExpressApp.Web.PopupWindow).Close(true);
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    }
        //}

        private void TestSelectionSave_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                DashboardViewItem TestViewMain = ((DashboardView)View).FindItem("TestViewMain") as DashboardViewItem;
                DashboardViewItem TestViewSub = ((DashboardView)View).FindItem("TestViewSub") as DashboardViewItem;
                DefaultSetting objNavigationView = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));

                if (SRInfo.lstRemoveTestParameter != null && SRInfo.lstRemoveTestParameter.Count > 0)
                {
                    Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                    UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSamplelogin = uow.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[Oid] = ?", SRInfo.SampleOid));
                    foreach (Guid objTestParameter in SRInfo.lstRemoveTestParameter)
                    {
                        Testparameter param = uow.GetObjectByKey<Testparameter>(objTestParameter);
                        if (SRInfo.lstRemoveTestParameter.Contains(objTestParameter) && param != null)
                        {
                            objSamplelogin.Testparameters.Remove(param);
                            IObjectSpace os = Application.CreateObjectSpace(typeof(SampleParameter));
                            Session currentSessions = ((XPObjectSpace)(os)).Session;
                            UnitOfWork uows = new UnitOfWork(currentSession.DataLayer);
                            SampleParameter objsmpltest = uows.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? And [Samplelogin.Oid]= ?", objTestParameter, objSamplelogin.Oid));
                            if (objsmpltest != null)
                            {
                                DeletePTStudyLogTest(uows, objsmpltest);
                                if (objSamplelogin.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                                {
                                    if (objSamplelogin.JobID.IsSampling)
                                    {
                                        //IList<SampleParameter> parameters = os.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSamplelogin.Oid));
                                        //if (parameters.Where(a => a.Oid != objsmpltest.Oid && a.Testparameter != null && a.Testparameter.TestMethod != null && a.Testparameter.TestMethod.IsFieldTest == true).Count() == 0)
                                        //{
                                        Frame.GetController<FlutterAppViewController>().deletesample(uows, objSamplelogin);
                                        //}
                                    }
                                    Frame.GetController<AuditlogViewController>().insertauditdata(uows, objSamplelogin.JobID.Oid, OperationType.Deleted, "Sample Registration", objSamplelogin.SampleID, "Test", param.TestMethod.TestName + " | " + param.Parameter.ParameterName, "", "");
                                }
                                uows.Delete(objsmpltest);
                                uows.CommitChanges();
                            }
                        }
                    }
                    SRInfo.lstRemoveTestParameter.Clear();
                    //objSamplelogin.Save();
                }
                if (SRInfo.lstTestParameter != null)
                {
                    if (SRInfo.lstTestParameter != null && SRInfo.lstTestParameter.Count > 0)
                    {
                        Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                        UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                        Modules.BusinessObjects.SampleManagement.SampleLogIn sampleLog = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(SRInfo.SampleOid);

                        foreach (Guid objtestparameter in SRInfo.lstTestParameter)
                        {
                            Testparameter param = uow.GetObjectByKey<Testparameter>(objtestparameter);
                            if (param.IsGroup == false)
                            {
                                if (!SRInfo.lstSavedTestParameter.Contains(objtestparameter) && param != null && param.QCType != null && param.QCType.QCTypeName == "Sample")
                                {
                                    SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objtestparameter, sampleLog.Oid));
                                    if (objsp == null)
                                    {
                                        SampleParameter newsample = new SampleParameter(uow);
                                        newsample.Samplelogin = sampleLog;
                                        newsample.Testparameter = param;
                                        newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                                        sampleLog.Test = true;
                                        Testparameter objTestparam = ((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.TestName == param.TestMethod.TestName && i.TestMethod.MatrixName.MatrixName == param.TestMethod.MatrixName.MatrixName && i.TestMethod.MethodName.MethodNumber == param.TestMethod.MethodName.MethodNumber && i.Component.Components == param.Component.Components).FirstOrDefault();
                                        if (objTestparam != null && objTestparam.TAT != null)
                                        {
                                            newsample.TAT = uow.GetObjectByKey<TurnAroundTime>(objTestparam.TAT.Oid);
                                        }
                                        if (newsample.Status == 0)
                                        {
                                            if (SRInfo.lstHoldTest != null && SRInfo.lstHoldTest.Contains(param.TestMethod.Oid) && objTestparam.Hold)
                                            {
                                                newsample.TestHold = true;
                                            }
                                            else
                                            {
                                                newsample.TestHold = false;
                                            }
                                            if (sampleLog.SampleStatus != null)
                                            {
                                                if (sampleLog.SampleStatus.Samplestatus == "Hold" && sampleLog.SampleStatus.Hold == true)
                                                {
                                                    newsample.TestHold = true;
                                                }
                                                else
                                                {
                                                    newsample.TestHold = false;
                                                }
                                            }

                                        }
                                        if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid))
                                        {
                                            newsample.SubOut = true;
                                        }
                                        if (objNavigationView != null && !objNavigationView.Select)
                                        {
                                            if (newsample != null && newsample.Samplelogin != null && newsample.Samplelogin.JobID.Status > 0)
                                            {
                                                newsample.SignOff = true;
                                            }
                                        }
                                        newsample.Save();
                                        if (sampleLog.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                                        {
                                            Frame.GetController<AuditlogViewController>().insertauditdata(uow, sampleLog.JobID.Oid, OperationType.Created, "Sample Registration", sampleLog.SampleID, "Test", "", param.TestMethod.TestName + " | " + param.Parameter.ParameterName, "");
                                        }
                                        InsertPTStudyLogTest(uow, newsample);
                                    }
                                }
                                else
                                {
                                    SampleParameter sample = uow.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid]=? And [Samplelogin.Oid]=? And [Testparameter.Parameter.Oid] = ?", param.TestMethod.Oid, sampleLog.Oid, param.Parameter.Oid));
                                    if (sample != null)
                                    {
                                        Testparameter objTestparam = ((ListView)TestViewSub.InnerView).CollectionSource.List.Cast<Testparameter>().Where(i => i.TestMethod != null && i.TestMethod.MatrixName != null && i.TestMethod.TestName == param.TestMethod.TestName && i.TestMethod.MatrixName.MatrixName == param.TestMethod.MatrixName.MatrixName && i.TestMethod.MethodName.MethodNumber == param.TestMethod.MethodName.MethodNumber && i.Component.Components == param.Component.Components).FirstOrDefault();
                                        if (objTestparam != null && objTestparam.TAT != null)
                                        {
                                            sample.TAT = uow.GetObjectByKey<TurnAroundTime>(objTestparam.TAT.Oid);
                                        }


                                        if (sample.Status == 0)
                                        {
                                            if (SRInfo.lstHoldTest != null && SRInfo.lstHoldTest.Contains(param.TestMethod.Oid) && objTestparam.Hold)
                                            {
                                                sample.TestHold = true;
                                            }
                                            else
                                            {
                                                sample.TestHold = false;
                                            }
                                            if (sampleLog.SampleStatus != null)
                                            {
                                                if (sampleLog.SampleStatus.Samplestatus == "Hold" && sampleLog.SampleStatus.Hold == true)
                                                {
                                                    sample.TestHold = true;
                                                }
                                                else
                                                {

                                                    sample.TestHold = false;
                                                }
                                            }
                                        }
                                        if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid))
                                        {
                                            sample.SubOut = true;
                                        }
                                        else
                                        {
                                            if (sample.SuboutSample == null)
                                            {
                                                sample.SubOut = false;
                                            }
                                        }
                                        if (objNavigationView != null && !objNavigationView.Select)
                                        {
                                            if (sample != null && sample.Samplelogin != null && sample.Samplelogin.JobID.Status > 0)
                                            {
                                                sample.SignOff = true;
                                            }
                                        }
                                        //sample.Save();
                                    }
                                }
                            }
                            else if (param.IsGroup == true)
                            {
                                IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", param.TestMethod.Oid));
                                foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                                {
                                    IList<Testparameter> lsttestpara = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objgtm.TestParameter.TestMethod.Oid));
                                    foreach (Testparameter param1 in lsttestpara.ToList())
                                    {
                                        SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, sampleLog.Oid));
                                        if (objsp == null)
                                        {
                                            SampleParameter newsample = new SampleParameter(uow);
                                            newsample.Samplelogin = sampleLog;
                                            newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                                            newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                                            sampleLog.Test = true;
                                            newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                                            newsample.IsGroup = true;
                                            if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param.TestMethod.Oid))
                                            {
                                                newsample.SubOut = true;
                                            }
                                            newsample.Save();
                                            if (sampleLog.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                                            {
                                                Frame.GetController<AuditlogViewController>().insertauditdata(uow, sampleLog.JobID.Oid, OperationType.Created, "Sample Registration", sampleLog.SampleID, "Test", "", param.TestMethod.TestName, "");
                                            }
                                            uow.CommitChanges();
                                        }
                                        else
                                        {
                                            SampleParameter sample = uow.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.TestMethod.Oid]=? And [Samplelogin.Oid]=? And [Testparameter.Parameter.Oid] = ?", param1.TestMethod.Oid, sampleLog.Oid, param1.Parameter.Oid));
                                            if (sample != null)
                                            {
                                                if (SRInfo.lstSubOutTest != null && SRInfo.lstSubOutTest.Contains(param1.TestMethod.Oid))
                                                {
                                                    sample.SubOut = true;
                                                }
                                                else
                                                {
                                                    if (sample.SuboutSample == null)
                                                    {
                                                        sample.SubOut = false;
                                                    }
                                                }
                                                sample.Save();
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (SRInfo.lstOfUncheckedSubout != null && SRInfo.lstOfUncheckedSubout.Count > 0)
                        {
                            sampleLog.SubOut = false;
                        }
                        uow.CommitChanges();
                        sampleLog.TestSummary = string.Join("; ", new XPQuery<SampleParameter>(uow).Where(i => i.Samplelogin.Oid == sampleLog.Oid && i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.TestName).Distinct().ToList());
                        sampleLog.FieldTestSummary = string.Join(", ", new XPQuery<SampleParameter>(uow).Where(i => i.Samplelogin.Oid == sampleLog.Oid && i.Testparameter != null && i.Testparameter.TestMethod != null && i.Testparameter.TestMethod.IsFieldTest == true).Select(i => i.Testparameter.TestMethod.TestName).Distinct().ToList());
                        TestViewMain.InnerView.ObjectSpace.CommitChanges();
                        TestViewSub.InnerView.ObjectSpace.CommitChanges();
                        uow.CommitChanges();
                        if (sampleLog.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                        {
                            if (sampleLog.JobID.IsSampling)
                            {
                                //IList<SampleParameter> parameters = uow.GetObjects(uow.GetClassInfo(typeof(SampleParameter)), CriteriaOperator.Parse("[Samplelogin.Oid]=?", sampleLog.Oid), new SortingCollection(), 0, 0, false, true).Cast<SampleParameter>().ToList();
                                //if (parameters.Where(a => a.Testparameter != null && a.Testparameter.TestMethod != null && a.Testparameter.TestMethod.IsFieldTest == true).Count() > 0)
                                //{
                                Frame.GetController<FlutterAppViewController>().insertsample(uow, sampleLog);
                                //}
                            }
                        }
                        //AssignBottlesToSamples(uow, SRInfo.strJobID, SRInfo.SampleOid);
                        AssignBottleAllocationToSamples(uow, SRInfo.SampleOid);
                        uow.CommitChanges();
                        if (sampleLog.SampleParameter.Count > 0 && sampleLog.SampleParameter.FirstOrDefault(i => i.SubOut == false) == null)
                        {
                            sampleLog.SubOut = true;
                            uow.CommitChanges();
                        }
                        if (Application.MainWindow.View.ObjectSpace.ModifiedObjects.Count > 0)
                        {
                            Application.MainWindow.View.ObjectSpace.Refresh();
                        }
                        //BottleIDUpdate(uow);
                        //Application.MainWindow.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();
                    }
                    UpdateStatusInJobID();
                    int testCount = View.ObjectSpace.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleParameter), CriteriaOperator.Parse("[Samplelogin.Oid] = ?", SRInfo.SampleOid));
                    if (testCount == 0)
                    {
                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "assigntesttosample"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                        return;
                    }
                    (Frame as DevExpress.ExpressApp.Web.PopupWindow).Close(true);
                    //SuboutCount();
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        //private void BottleIDUpdate(UnitOfWork uow)
        //{
        //    try
        //    {

        //        //List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstsmpllogin = uow.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.JobID] = ?", SRInfo.strJobID)).ToList();
        //        List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstsmpllogin = uow.Query<Modules.BusinessObjects.SampleManagement.SampleLogIn>().Where(i => i.JobID != null && i.JobID.JobID == SRInfo.strJobID).ToList();
        //        foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objsmpllogin in lstsmpllogin.Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().OrderBy(i => i.SampleID).ToList())
        //        {
        //            if (objsmpllogin != null)
        //            {
        //                List<string> lstbtlid = new List<string>();
        //                List<string> lstbotleid = new List<string>();
        //                //List<SampleBottleAllocation> lstbltalloca = uow.GetObjects<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.Oid] = ?", objsmpllogin.Oid)).ToList();

        //                List<SampleBottleAllocation> lstbltalloca = uow.Query<SampleBottleAllocation>().Where(i => i.SampleRegistration != null && i.SampleRegistration.Oid == objsmpllogin.Oid).ToList();
        //                foreach (SampleBottleAllocation objsmplaloc in lstbltalloca.ToList())
        //                {
        //                    uint strbottleqty = objsmplaloc.Qty;
        //                    string strbtlID = string.Empty;
        //                    const string letterseql = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        //                    string valueeql = "";
        //                    for (int i = 0; i <= strbottleqty - 1; i++)
        //                    {
        //                        valueeql = "";
        //                        if (i >= letterseql.Length)
        //                            valueeql += letterseql[i / letterseql.Length - 1];

        //                        valueeql += letterseql[i % letterseql.Length];
        //                        if (!lstbtlid.Contains(valueeql))
        //                        {
        //                            if (String.IsNullOrEmpty(strbtlID))
        //                            {
        //                                strbtlID = valueeql;
        //                            }
        //                            else
        //                            {
        //                                strbtlID = strbtlID + ", " + valueeql;
        //                            }
        //                            lstbtlid.Add(valueeql);
        //                        }
        //                        else
        //                        {
        //                            strbottleqty = strbottleqty + 1;
        //                            continue;
        //                        }
        //                    }
        //                    objsmplaloc.BottleID = strbtlID;
        //                    lstbotleid.Add(strbtlID);
        //                    objsmplaloc.Save();
        //                }
        //            }
        //        }
        //        uow.CommitChanges();
        //        ObjectSpace.Refresh();

        //    }
        //    catch (Exception ex)
        //    {
        //        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    }
        //}
        //private void AssignBottlesToSamples()
        //{
        //    try
        //    {
        //        BottleSetup objBottleSetup = ObjectSpace.FindObject<BottleSetup>(CriteriaOperator.Parse("[BottleSharingName]=?", SRInfo.strJobID));
        //        Modules.BusinessObjects.SampleManagement.SampleLogIn objSample = ObjectSpace.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(SRInfo.SampleOid);
        //        if (objSample != null && objSample.VisualMatrix != null && objSample.VisualMatrix.MatrixName != null)
        //        {
        //            IList<SampleParameter> lstSampleParameters = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", objSample.Oid));
        //            if (lstSampleParameters != null && lstSampleParameters.Count > 0)
        //            {
        //                List<Guid> lstTestOids = lstSampleParameters.Where(i => !i.SubOut && i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().ToList();
        //                if (objBottleSetup == null)
        //                {
        //                    objBottleSetup = ObjectSpace.CreateObject<BottleSetup>();
        //                    objBottleSetup.BottleID = "A";
        //                    objBottleSetup.BottleSharingName = SRInfo.strJobID;
        //                    objBottleSetup.Matrix = ObjectSpace.GetObject<Matrix>(objSample.VisualMatrix.MatrixName);
        //                    objBottleSetup.Duplicate = objSample.Qty;
        //                    objBottleSetup.SampleContainer = objSample.SampleID + "(" + objSample.Qty + ")";
        //                    if (objSample.Qty > 1)
        //                    {
        //                        objBottleSetup.IsDuplicate = true;
        //                    }
        //                    foreach (Guid oid in lstTestOids)
        //                    {
        //                        objBottleSetup.Test.Add(ObjectSpace.GetObjectByKey<TestMethod>(oid));
        //                    }
        //                    objBottleSetup.TestGroup = string.Join(",", objBottleSetup.Test.Select(i => i.TestName).Distinct().OrderBy(i => i));
        //                    ObjectSpace.CommitChanges();
        //                }
        //                else
        //                {
        //                    bool CanSave = false;
        //                    List<Guid> lstNewBottleTests = new List<Guid>();
        //                    foreach (Guid oid in lstTestOids)
        //                    {
        //                        BottleSetup objBottle = ObjectSpace.FindObject<BottleSetup>(CriteriaOperator.Parse("[BottleSharingName] = ? And [Test][[Oid] = ?]", SRInfo.strJobID, oid));
        //                        if (objBottle != null && !objBottle.SampleContainer.Contains(objSample.SampleID))
        //                        {
        //                            objBottleSetup.SampleContainer += ", "+ objSample.SampleID + "(1)";
        //                            CanSave = true;
        //                        }
        //                        else if(objBottle == null)
        //                        {
        //                            lstNewBottleTests.Add(oid);
        //                        }
        //                    }
        //                    if (lstNewBottleTests != null && lstNewBottleTests.Count > 0)
        //                    {
        //                        List<string> allbottle = new List<string>();
        //                        IList<BottleSetup> lstBottleSetup = ObjectSpace.GetObjects<BottleSetup>(CriteriaOperator.Parse("[BottleSharingName]=?", SRInfo.strJobID));
        //                        foreach (BottleSetup bottle in lstBottleSetup)
        //                        {
        //                            allbottle.Add(bottle.BottleID);
        //                        }
        //                        string strBottleID = string.Empty;
        //                        foreach (string botid in allbottle)
        //                        {
        //                            if (botid != ((char)(allbottle.IndexOf(botid) + 65)).ToString())
        //                            {
        //                                strBottleID = ((char)(allbottle.IndexOf(botid) + 65)).ToString();
        //                                break;
        //                            }
        //                        }
        //                        if (string.IsNullOrEmpty(strBottleID))
        //                        {
        //                            strBottleID = ((char)(allbottle.Count + 65)).ToString();
        //                        }
        //                        objBottleSetup = ObjectSpace.CreateObject<BottleSetup>();
        //                        objBottleSetup.BottleID = strBottleID;
        //                        objBottleSetup.BottleSharingName = SRInfo.strJobID;
        //                        objBottleSetup.Matrix = ObjectSpace.GetObject<Matrix>(objSample.VisualMatrix.MatrixName);
        //                        objBottleSetup.Duplicate = objSample.Qty;
        //                        objBottleSetup.SampleContainer = objSample.SampleID + "(1)";
        //                        foreach (Guid oid in lstNewBottleTests)
        //                        {
        //                            objBottleSetup.Test.Add(ObjectSpace.GetObjectByKey<TestMethod>(oid));
        //                        }
        //                        objBottleSetup.TestGroup = string.Join(",", objBottleSetup.Test.Select(i => i.TestName).Distinct().OrderBy(i => i));
        //                        CanSave = true;
        //                    }
        //                    if (CanSave)
        //                    {
        //                        ObjectSpace.CommitChanges(); 
        //                    }
        //                } 
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    }
        //}

        //public void AssignBottlesToSamples(UnitOfWork uow, string strJobID, Guid sampleOid)
        //{
        //    try
        //    {
        //        //BottleSetup objBottleSetup = uow.FindObject<BottleSetup>(CriteriaOperator.Parse("[BottleSharingName]=?", strJobID));
        //        //Modules.BusinessObjects.SampleManagement.SampleLogIn objSample = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(sampleOid);
        //        //if (objSample != null && objSample.VisualMatrix != null && objSample.VisualMatrix.MatrixName != null)
        //        //{
        //        //    List<SampleParameter> lstSampleParameters = uow.Query<SampleParameter>().Where(i => i.Samplelogin.Oid == objSample.Oid).ToList();
        //        //    //IList<SampleParameter> lstSampleParameters = uow.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.Oid] = ?", objSample.Oid));
        //        //    if (lstSampleParameters != null && lstSampleParameters.Count > 0)
        //        //    {
        //        //        List<string> SampleContainer = new List<string>();
        //        //        List<Guid> lstTestOids = lstSampleParameters.Where(i => !i.SubOut && i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().ToList();
        //        //        if (objBottleSetup == null)
        //        //        {
        //        //            objBottleSetup = new BottleSetup(uow);
        //        //            objBottleSetup.BottleID = "A";
        //        //            objBottleSetup.BottleSharingName = strJobID;
        //        //            objBottleSetup.Matrix = uow.GetObjectByKey<Matrix>(objSample.VisualMatrix.MatrixName.Oid);
        //        //            objBottleSetup.Duplicate = 1;
        //        //            //objBottleSetup.Duplicate = objSample.Qty;
        //        //            objBottleSetup.SampleContainer = objSample.SampleID + "(" + objSample.Qty + ")";
        //        //            //if (objSample.Qty > 1)
        //        //            //{
        //        //            //    objBottleSetup.IsDuplicate = true;
        //        //            //}
        //        //            foreach (Guid oid in lstTestOids)
        //        //            {
        //        //                objBottleSetup.Test.Add(uow.GetObjectByKey<TestMethod>(oid));
        //        //            }
        //        //            objBottleSetup.TestGroup = string.Join(",", objBottleSetup.Test.Select(i => i.TestName).Distinct().OrderBy(i => i));
        //        //            uow.CommitChanges();
        //        //        }
        //        //        else
        //        //        {
        //        //            bool CanSave = false;
        //        //            List<Guid> lstNewBottleTests = new List<Guid>();
        //        //            foreach (Guid oid in lstTestOids)
        //        //            {
        //        //                BottleSetup objBottle = uow.FindObject<BottleSetup>(CriteriaOperator.Parse("[BottleSharingName] = ? And [Test][[Oid] = ?]", strJobID, oid));
        //        //                if (objBottle != null && objBottle.SampleContainer != null && !objBottle.SampleContainer.Contains(objSample.SampleID))
        //        //                {
        //        //                    objBottle.SampleContainer += ", " + objSample.SampleID + "(1)";
        //        //                    objBottle.Duplicate += 1;
        //        //                    CanSave = true;
        //        //                }
        //        //                else if (objBottle == null)
        //        //                {
        //        //                    lstNewBottleTests.Add(oid);
        //        //                }
        //        //            }
        //        //            if (lstNewBottleTests != null && lstNewBottleTests.Count > 0)
        //        //            {
        //        //                List<string> allbottle = new List<string>();
        //        //                List<BottleSetup> lstBottleSetup = uow.Query<BottleSetup>().Where(i => i.BottleSharingName == strJobID).ToList();
        //        //                //IList <BottleSetup> lstBottleSetup = ObjectSpace.GetObjects<BottleSetup>(CriteriaOperator.Parse("[BottleSharingName]=?", SRInfo.strJobID));
        //        //                foreach (BottleSetup bottle in lstBottleSetup)
        //        //                {
        //        //                    allbottle.Add(bottle.BottleID);
        //        //                }
        //        //                string strBottleID = string.Empty;
        //        //                foreach (string botid in allbottle)
        //        //                {
        //        //                    if (botid != ((char)(allbottle.IndexOf(botid) + 65)).ToString())
        //        //                    {
        //        //                        strBottleID = ((char)(allbottle.IndexOf(botid) + 65)).ToString();
        //        //                        break;
        //        //                    }
        //        //                }
        //        //                if (string.IsNullOrEmpty(strBottleID))
        //        //                {
        //        //                    strBottleID = ((char)(allbottle.Count + 65)).ToString();
        //        //                }
        //        //                objBottleSetup = new BottleSetup(uow);
        //        //                objBottleSetup.BottleID = strBottleID;
        //        //                objBottleSetup.BottleSharingName = strJobID;
        //        //                objBottleSetup.Matrix = uow.GetObjectByKey<Matrix>(objSample.VisualMatrix.MatrixName.Oid);
        //        //                objBottleSetup.Duplicate = Convert.ToInt32(objSample.Qty);
        //        //                objBottleSetup.SampleContainer = objSample.SampleID + "(1)";
        //        //                foreach (Guid oid in lstNewBottleTests)
        //        //                {
        //        //                    objBottleSetup.Test.Add(uow.GetObjectByKey<TestMethod>(oid));
        //        //                }
        //        //                objBottleSetup.TestGroup = string.Join(",", objBottleSetup.Test.Select(i => i.TestName).Distinct().OrderBy(i => i));
        //        //                CanSave = true;
        //        //            }
        //        //            if (CanSave)
        //            //{
        //        //                uow.CommitChanges();
        //        //            }
        //            //}

        //        //        List<string> container = new List<string>();
        //        //        foreach (SampleParameter sample in lstSampleParameters)
        //        //        {
        //        //            List<BottleSetup> lstBottle = uow.Query<BottleSetup>().Where(i => i.BottleSharingName == strJobID && i.Test.Contains(sample.Testparameter.TestMethod)).ToList();
        //        //            if (lstBottle != null && lstBottle.Count > 0)
        //        //            {
        //        //                sample.Bottle = null;
        //        //                sample.DupBottle = 0;
        //        //                foreach (BottleSetup objbottle in lstBottle)
        //        //                {
        //        //                    if (objbottle.Test.Contains(sample.Testparameter.TestMethod) && objbottle.SampleContainer.Contains(sample.Samplelogin.SampleID))
        //        //                    {
        //        //                        string id = objbottle.SampleContainer.Split(new string[] { ", " }, StringSplitOptions.RemoveEmptyEntries).First(a => a.Split('(').FirstOrDefault() == sample.Samplelogin.SampleID);
        //        //                        if (id != null)
        //        //                        {
        //        //                            sample.DupBottle = Convert.ToInt32(id.Split('(').Skip(1).FirstOrDefault().Replace(")", ""));
        //        //                        }
        //        //                        sample.Bottle = objbottle;
        //        //                        if (!container.Contains(objbottle.BottleID))
        //        //                        {
        //        //                            container.Add(objbottle.BottleID);
        //        //                        }
        //        //                        break;
        //        //                    }
        //        //                }
        //        //            }
        //        //        }
        //        //        objSample.Containers = (uint)container.Count;
        //        //        uow.CommitChanges();
        //        //    }
        //        //}
        //                        }
        //    catch (Exception ex)
        //                        {
        //        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //                }
        //            }
        private void addnewtestbottles(UnitOfWork uow, TestMethod test, Modules.BusinessObjects.SampleManagement.SampleLogIn objSample)
        {
            List<Guid> lstContainer = new List<Guid>();
            List<Guid> lstPreservative = new List<Guid>();
            IList<Guid> containerNames = test.TestGuides.Where(i => i.Container != null).Select(i => i.Container.Oid).ToList();
            lstContainer.AddRange(containerNames.Except(lstContainer).ToList());
            IList<Guid> Preservative = test.TestGuides.Where(i => i.Preservative != null).Select(i => i.Preservative.Oid).ToList();
            lstPreservative.AddRange(Preservative.Except(lstPreservative).ToList());

            SampleBottleAllocation objNewBottle = new SampleBottleAllocation(uow);
            objNewBottle.SampleRegistration = objSample;
            objNewBottle.BottleID = "A";
            objNewBottle.TestMethod = test;
            if (lstContainer.Count == 1)
            {
                Modules.BusinessObjects.Setting.Container objContainer = uow.FindObject<Modules.BusinessObjects.Setting.Container>(CriteriaOperator.Parse("Oid=?", lstContainer[0]));
                if (objContainer != null)
                {
                    objNewBottle.Containers = objContainer;
                }
            }
            if (lstPreservative.Count == 1)
            {
                Preservative objpreservative = uow.FindObject<Preservative>(CriteriaOperator.Parse("Oid=?", lstPreservative[0]));
                if (objpreservative != null)
                {
                    objNewBottle.Preservative = objpreservative;
                }
            }
            objNewBottle.Save();
        }

        public void AssignBottleAllocationToSamples(UnitOfWork uow, Guid sampleOid)
        {
            try
            {
                Modules.BusinessObjects.SampleManagement.SampleLogIn objSample = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(sampleOid);
                IList<SampleBottleAllocation> objSampleBottle = uow.GetObjects(uow.GetClassInfo(typeof(SampleBottleAllocation)), CriteriaOperator.Parse("[SampleRegistration]=?", sampleOid), null, int.MaxValue, false, true).Cast<SampleBottleAllocation>().ToList();
                IList<SampleParameter> objSampleParameters = uow.GetObjects(uow.GetClassInfo(typeof(SampleParameter)), CriteriaOperator.Parse("[Samplelogin]=?", objSample.Oid), null, int.MaxValue, false, true).Cast<SampleParameter>().ToList();
                IList<TestMethod> lstTest = objSampleParameters.Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod).Distinct().ToList();
                if (objSample != null && objSampleBottle != null && objSampleBottle.Count == 0)
                {
                    foreach (TestMethod test in lstTest.Where(i => i.IsFieldTest != true))
                    {
                        addnewtestbottles(uow, test, objSample);
                    }
                }
                else if (objSampleBottle != null && objSampleBottle.Count > 0)
                {
                    foreach (TestMethod test in lstTest.Where(i => i.IsFieldTest != true))
                    {
                        if (objSampleBottle.Where(a => a.TestMethod == test).ToList().Count == 0)
                        {
                            addnewtestbottles(uow, test, objSample);
                        }
                    }
                    foreach (SampleBottleAllocation sampleBottle in objSampleBottle.ToList())
                    {
                        if (lstTest.Where(a => a == sampleBottle.TestMethod).ToList().Count == 0)
                        {
                            uow.Delete(sampleBottle);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void PopupWindowManager_PopupShowing(object sender, PopupShowingEventArgs e)
        {
            try
            {
                e.PopupControl.CustomizePopupWindowSize += PopupControl_CustomizePopupWindowSize;
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void PopupControl_CustomizePopupWindowSize(object sender, DevExpress.ExpressApp.Web.Controls.CustomizePopupWindowSizeEventArgs e)
        {
            try
            {
                if (e.PopupFrame != null)
                {
                    if (e.PopupFrame.View.Id == "SampleLogIn_ListView_Copy_SampleRegistration" || e.PopupFrame.View.Id == "SampleRegistration_SampleLogin")
                    {
                        e.PopupFrame.View.Caption = "Samples";
                        e.Width = new System.Web.UI.WebControls.Unit(1200);
                        e.Height = new System.Web.UI.WebControls.Unit(700);
                        e.Handled = true;
                    }
                    if (e.PopupFrame.View.Id == "SampleParameter_ListView_Copy_SampleRegistration")
                    {
                        e.PopupFrame.View.Caption = "Tests";
                        e.Width = new System.Web.UI.WebControls.Unit(1200);
                        e.Height = new System.Web.UI.WebControls.Unit(700);
                        e.Handled = true;
                    }
                    if (e.PopupFrame.View.Id == "SampleBottleAllocation_DetailView_SampleRegistration")
                    {
                        e.PopupFrame.View.Caption = "Containers";
                        e.Width = new System.Web.UI.WebControls.Unit(1210);
                        e.Height = new System.Web.UI.WebControls.Unit(520);
                        e.Handled = true;
                    }
                    if (e.PopupFrame.View.Id == "Test")
                    {
                        e.Width = new System.Web.UI.WebControls.Unit(1500);
                        e.Height = new System.Web.UI.WebControls.Unit(648);
                        e.Handled = true;
                    }
                    else if (e.PopupFrame.View.Id == "SampleConditionCheck_DetailView_Copy")
                    {
                        e.Width = new System.Web.UI.WebControls.Unit(800);
                        e.Height = new System.Web.UI.WebControls.Unit(600);
                        e.Handled = true;
                    }
                    else if (e.PopupFrame.View.Id == "Invoicing_DetailView_PreInvoiceDetails")
                    {
                        e.Width = new System.Web.UI.WebControls.Unit(1210);
                        e.Height = new System.Web.UI.WebControls.Unit(700);
                        e.Handled = true;
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnCOC_BarReport_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View != null && (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration_Copy" || View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff_History"
                    || View.Id == "Samplecheckin_ListView_Copy_RegistrationSigningOff" || View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration_History" || View.Id == "Samplecheckin_ListView_Copy_Registration_History"))
                {
                    string strCOCID = string.Empty;
                    List<string> strCOCIDlist = new List<string>();
                    if (View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_ListView_Copy_RegistrationSigningOff")
                    {
                        if (View.SelectedObjects != null)
                        {
                            foreach (Samplecheckin obj in View.SelectedObjects)
                            {
                                strCOCIDlist.Add(obj.JobID);
                                if (string.IsNullOrEmpty(strCOCID))
                                {
                                    strCOCID = "'" + obj.JobID + "'";
                                }
                                else
                                {
                                    strCOCID = strCOCID + ",'" + obj.JobID + "'";
                                }
                            }
                        }
                    }
                    else if (View.Id == "SampleRegistration")
                    {
                        DashboardView dv = (DashboardView)Application.MainWindow.View;
                        DashboardViewItem SLListView = (DashboardViewItem)dv.FindItem("SampleCheckin");
                        CriteriaOperator cs = CriteriaOperator.Parse("COC_ID=" + SRInfo.strJobID);
                        if (SLListView != null && SLListView.InnerView == null)
                        {
                            SLListView.CreateControl();
                        }
                        DetailView detailview = (DetailView)SLListView.InnerView;
                        if (detailview != null && detailview.CurrentObject != null && detailview.CurrentObject.GetType() == typeof(Modules.BusinessObjects.SampleManagement.Samplecheckin))
                        {
                            Modules.BusinessObjects.SampleManagement.Samplecheckin obj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)detailview.CurrentObject;
                            if (obj != null && !string.IsNullOrEmpty(obj.JobID))
                            {
                                strCOCIDlist.Add(obj.JobID);
                                strCOCID = "'" + obj.JobID + "'";
                            }
                        }
                    }
                    else
                    {
                        if (View.CurrentObject != null)
                        {
                            Samplecheckin sampleCheckIn = (Samplecheckin)View.CurrentObject;
                            strCOCID = "'" + sampleCheckIn.JobID + "'";
                            strCOCIDlist.Add(sampleCheckIn.JobID);
                        }
                    }


                    #region Dynamic Report
                    //if (strCOCIDlist != null && strCOCIDlist.Count > 0)
                    //{
                    //        string strTempPath = Path.GetTempPath();
                    //        String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                    //        if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\ReportPreview\COCReport\")) == false)
                    //        {
                    //            Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\ReportPreview\COCReport\"));
                    //        }
                    //        string strExportedPath = HttpContext.Current.Server.MapPath(@"~\ReportPreview\COCReport\" + timeStamp + ".pdf");
                    //        XtraReport xtraReport = new XtraReport();

                    //        objDRDCInfo.WebConfigConn = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                    //        SetConnectionString();

                    //        DynamicReportBusinessLayer.BLCommon.SetDBConnection(objDRDCInfo.LDMSQLServerName, objDRDCInfo.LDMSQLDatabaseName, objDRDCInfo.LDMSQLUserID, objDRDCInfo.LDMSQLPassword);

                    //        if (strCOCIDlist.Count > 1)
                    //        {
                    //            foreach (string strCOC_ID in strCOCIDlist)
                    //            {
                    //                XtraReport tempxtraReport = new XtraReport();
                    //                ObjReportingInfo.strJobID = strCOC_ID;
                    //                tempxtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("COC_Report", ObjReportingInfo, false);
                    //                tempxtraReport.CreateDocument();
                    //                xtraReport.Pages.AddRange(tempxtraReport.Pages);
                    //            }

                    //            using (MemoryStream ms = new MemoryStream())
                    //            {
                    //                xtraReport.ExportToPdf(ms);
                    //                using (PdfDocumentProcessor source = new PdfDocumentProcessor())
                    //                {
                    //                    source.LoadDocument(ms);
                    //                    source.SaveDocument(strExportedPath);
                    //                }
                    //            }
                    //        }
                    //        else
                    //        {
                    //            ObjReportingInfo.strJobID = strCOCID;
                    //            xtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("COC_Report", ObjReportingInfo, false);
                    //            //xtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("COC_Report_CCT", ObjReportingInfo, false);
                    //        }



                    //    xtraReport.ExportToPdf(strExportedPath);
                    //    string[] path = strExportedPath.Split('\\');
                    //    int arrcount = path.Count();
                    //    int sc = arrcount - 3;
                    //    string OriginalPath = string.Join("/", path.GetValue(sc), path.GetValue(sc + 1), path.GetValue(sc + 2));
                    //    WebWindow.CurrentRequestWindow.RegisterClientScript("show", string.Format("window.open('{0}','_blank');", OriginalPath));
                    //}
                    #endregion

                    if (View.SelectedObjects.Count <= 1)
                    {


                        if (!string.IsNullOrEmpty(strCOCID))
                        {
                            string strTempPath = Path.GetTempPath();
                            String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                            if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\ReportPreview")) == false)
                            {
                                Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\ReportPreview"));
                            }
                            string strExportedPath = HttpContext.Current.Server.MapPath(@"~\ReportPreview\" + timeStamp + ".pdf");
                            XtraReport xtraReport = new XtraReport();
                            string connectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                            var connectionStringBuilder = new SqlConnectionStringBuilder(connectionString);
                            string serverName = connectionStringBuilder.DataSource.Trim();
                            string databaseName = connectionStringBuilder.InitialCatalog.Trim();
                            string userID = connectionStringBuilder.UserID.Trim();
                            string password = connectionStringBuilder.Password.Trim();
                            string sqlSelect = "Select * from Report_COC_LegalDocument where [COCID] in(" + strCOCID + ")";
                            SqlConnection sqlConnection = new SqlConnection(connectionStringBuilder.ToString());
                            SqlCommand sqlCommand = new SqlCommand(sqlSelect, sqlConnection);
                            SqlDataAdapter sqlDa = new SqlDataAdapter(sqlCommand);
                            DataTable sqlDt = new DataTable();
                            sqlDa.Fill(sqlDt);
                            String strProjectName = ConfigurationManager.AppSettings["ProjectName"];
                            COC_Report COCReport = new COC_Report();
                            sqlDt = new DataView(sqlDt, "", "COCSampleID", DataViewRowState.CurrentRows).ToTable();
                            COCReport.DataSource = sqlDt;
                            COCReport.DataBindingsToReport();
                            xtraReport = COCReport;
                            xtraReport.ExportToPdf(strExportedPath);
                            string[] path = strExportedPath.Split('\\');
                            int arrcount = path.Count();
                            int sc = arrcount - 2;
                            string OriginalPath = string.Join("/", path.GetValue(sc), path.GetValue(sc + 1));
                            WebWindow.CurrentRequestWindow.RegisterClientScript("show", string.Format("window.open('{0}','_blank');", OriginalPath));
                        }
                        else
                        {
                            if (View != null && View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_ListView_Copy_RegistrationSigningOff" || View.Id == "Samplecheckin_ListView_Copy_Registration_History")
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                            }
                        }
                    }
                    else
                    {
                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectcheckboxinfo"), InformationType.Warning, timer.Seconds, InformationPosition.Top);
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>()
                    .InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SetConnectionString()
        {
            try
            {
                string[] connectionstring = objDRDCInfo.WebConfigConn.Split(';');
                objDRDCInfo.LDMSQLServerName = connectionstring[0].Split('=').GetValue(1).ToString();
                objDRDCInfo.LDMSQLDatabaseName = connectionstring[1].Split('=').GetValue(1).ToString();
                objDRDCInfo.LDMSQLUserID = connectionstring[2].Split('=').GetValue(1).ToString();
                objDRDCInfo.LDMSQLPassword = connectionstring[3].Split('=').GetValue(1).ToString();
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnImportSamples_CustomizePopupWindowParams(object sender, CustomizePopupWindowParamsEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff")
                {
                    Samplecheckin objSample = (Samplecheckin)View.CurrentObject;
                    IObjectSpace objspace = Application.CreateObjectSpace();
                    CollectionSource cs = new CollectionSource(objspace, typeof(Modules.BusinessObjects.Setting.COCSettings));
                    cs.Criteria.Clear();
                    //if (objSample != null && objSample.ProjectID != null)
                    //{
                    //    cs.Criteria["Filter"] = CriteriaOperator.Parse("[ProjectID.Oid] = ?",objSample.ProjectID.Oid);
                    //}
                    ListView CreateListView = Application.CreateListView("COCSettings_ListView_SampleRegistration", cs, false);
                    e.Size = new System.Drawing.Size(750, 500);
                    e.View = CreateListView;
                    e.DialogController.SaveOnAccept = false;
                    e.DialogController.ViewClosed += DialogController_ViewClosed;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void DialogController_ViewClosed(object sender, EventArgs e)
        {
            try
            {
                if (SRInfo.bolNewJobID == true)
                {
                    SRInfo.bolNewJobID = false;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnImportSamples_Execute(object sender, PopupWindowShowActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff")
                {
                    if (e.PopupWindowViewSelectedObjects != null && e.PopupWindowViewSelectedObjects.Count == 1)
                    {
                        IObjectSpace os = Application.CreateObjectSpace();
                        Modules.BusinessObjects.Setting.COCSettings selectedSetting = os.GetObject<Modules.BusinessObjects.Setting.COCSettings>((COCSettings)e.PopupWindowViewCurrentObject);
                        if (selectedSetting != null)
                        {
                            Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Samplecheckin)View.CurrentObject); ;
                            //if (SRInfo.ImportToNewJob == true)
                            if (objsamplecheckin == null)
                            {
                                objsamplecheckin = os.CreateObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>();
                                if (View.CurrentObject != null && ((Samplecheckin)View.CurrentObject).ClientName != null)
                                {
                                    objsamplecheckin.ClientName = os.GetObject<Modules.BusinessObjects.Crm.Customer>(((Samplecheckin)View.CurrentObject).ClientName);
                                }
                                if (View.CurrentObject != null && ((Samplecheckin)View.CurrentObject).ProjectID != null)
                                {
                                    objsamplecheckin.ProjectID = os.GetObject<Modules.BusinessObjects.Setting.Project>(((Samplecheckin)View.CurrentObject).ProjectID);
                                }
                                //objsamplecheckin.ProjectID = os.GetObject<Modules.BusinessObjects.Setting.Project>(selectedSetting.ProjectID);
                                ////objsamplecheckin.InspectionCategory = os.GetObject<Modules.BusinessObjects.Assets.InspectCategory>(selectedSetting.InspectionCategory);
                                objsamplecheckin.UploadCOC = selectedSetting.FileUpload;
                                objsamplecheckin.Comment = selectedSetting.Comment;
                                objsamplecheckin.COCSource = selectedSetting;
                                os.CommitChanges();
                            }
                            else
                            {
                                //os.CommitChanges();
                                View.ObjectSpace.CommitChanges();
                                //objsamplecheckin = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Samplecheckin)View.CurrentObject);                                
                            }
                            SRInfo.bolNewJobID = false;
                            if (objsamplecheckin != null && selectedSetting != null)
                            {
                                int sampleCount = os.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", objsamplecheckin.Oid));
                                if (sampleCount == 1)
                                {
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn sample = os.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", objsamplecheckin.Oid));
                                    if (sample != null && sample.VisualMatrix == null)
                                    {
                                        os.Delete(sample);
                                        os.CommitChanges();
                                    }
                                }

                                Session currentSession = ((XPObjectSpace)(os)).Session;
                                SelectedData sproc = currentSession.ExecuteSproc("ImportSampleAndTests_Sp", new OperandValue(objsamplecheckin.Oid), new OperandValue(selectedSetting.Oid));

                                //IList<Modules.BusinessObjects.Setting.COCSettingsSamples> lstSamples = os.GetObjects<Modules.BusinessObjects.Setting.COCSettingsSamples>(CriteriaOperator.Parse("[COC.Oid] = ?", selectedSetting.Oid));
                                //foreach (Modules.BusinessObjects.Setting.COCSettingsSamples objSample in lstSamples)
                                //{
                                //    Modules.BusinessObjects.SampleManagement.SampleLogIn objcheckin = os.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
                                //    objcheckin.JobID = objsamplecheckin;
                                //    objcheckin.SampleNo = Convert.ToInt32(objSample.SampleNo);
                                //    objcheckin.ClientSampleID = objSample.ClientSampleID;
                                //    objcheckin.Qty = objSample.Qty;
                                //    objcheckin.SampleType = os.GetObject<SampleType>(objSample.SampleType);
                                //    objcheckin.SettingsSource = objSample;
                                //    //objcheckin.SiteName = currentSample.SiteName;
                                //    //objcheckin.TestCategory = currentSample.TestCategory;
                                //    objcheckin.VisualMatrix = os.GetObject<VisualMatrix>(objSample.VisualMatrix);

                                //    if (objSample.Tests != null && objSample.Tests.Count > 0)
                                //    {
                                //        foreach (Modules.BusinessObjects.Setting.COCSettingsTest objTest in objSample.Tests)
                                //        {
                                //            if (!objcheckin.Testparameters.Contains(objTest.Testparameter))
                                //            {
                                //                objcheckin.Testparameters.Add(objTest.Testparameter);
                                //            }
                                //        }
                                //    }

                                //}
                                //os.CommitChanges();
                            }

                            if (((Samplecheckin)View.CurrentObject).Oid == objsamplecheckin.Oid)
                            {
                                //if (objsamplecheckin.ClientName == null)
                                //{
                                //    e.CanCloseWindow = AssignClientToImportedCheckin(os, objsamplecheckin, e.ShowViewParameters);
                                //}
                                View.CurrentObject = View.ObjectSpace.GetObject<Samplecheckin>(objsamplecheckin);
                            }
                            else
                            {//Created a new view to avoid the exception while clicking the browser back button, caused due to the change of the current new object

                                //if (objsamplecheckin.ClientName == null)
                                //{
                                //    e.CanCloseWindow = AssignClientToImportedCheckin(os, objsamplecheckin, e.ShowViewParameters);
                                //}
                                IObjectSpace objSpace = Application.CreateObjectSpace();
                                DetailView dv = Application.CreateDetailView(objSpace, "Samplecheckin_DetailView_Copy_SampleRegistration", true, objSpace.GetObject<Samplecheckin>(objsamplecheckin));
                                dv.ViewEditMode = DevExpress.ExpressApp.Editors.ViewEditMode.Edit;
                                Frame.SetView(dv);
                            }
                            //Application.ShowViewStrategy.ShowMessage(@"COCSettings has been imported successfully.", InformationType.Success, timer.Seconds, InformationPosition.Top);
                        }
                    }
                    else
                    {
                        e.CanCloseWindow = false;
                        if (e.PopupWindowViewSelectedObjects != null && e.PopupWindowViewSelectedObjects.Count > 1)
                        {
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectonlychk"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                        }
                        else
                        {
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                        }
                    }
                }

                View.ObjectSpace.Refresh();
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnQuoteImportSamples_CustomizePopupWindowParams(object sender, CustomizePopupWindowParamsEventArgs e)
        {

        }

        private void btnQuoteImportSamples_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff")
                {
                    // Validations

                    Samplecheckin objSample = (Samplecheckin)View.CurrentObject;
                    //IObjectSpace objspace = Application.CreateObjectSpace();
                    if (objSample == null || objSample.QuoteID == null)
                    {
                        Application.ShowViewStrategy.ShowMessage("Quote ID cannot be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                        return;
                    }
                    if (objSample == null || objSample.TAT == null)
                    {
                        Application.ShowViewStrategy.ShowMessage("TAT cannot be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                        return;
                    }
                    if (objSample == null || objSample.SampleMatries == null)
                    {
                        Application.ShowViewStrategy.ShowMessage("Sample Matrix cannot be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                        return;
                    }
                    IObjectSpace os = Application.CreateObjectSpace();
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckinloc = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Samplecheckin)View.CurrentObject);
                    if (objsamplecheckinloc != null)
                    {
                        int objtestcount = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objsamplecheckinloc.Oid)).ToList().Count();
                        if (objtestcount > 0)
                        {
                            Application.ShowViewStrategy.ShowMessage("Sample details should be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                            return;

                        }
                    }
                    #region Comment

                    //straMatrix = string.Empty;
                    //CollectionSource cs = new CollectionSource(objspace, typeof(AnalysisPricing));
                    //cs.Criteria.Clear();
                    //IObjectSpace os = Application.CreateObjectSpace();
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = ((Samplecheckin)View.CurrentObject);
                    //if (objsamplecheckin.SampleMatries != null)
                    //{
                    //    strSampleMatrix = objsamplecheckin.SampleMatries.Split(';');

                    //    List<Matrix> lstSRvisualmat = new List<Matrix>();
                    //    foreach (string strvmoid in strSampleMatrix.ToList())
                    //    {
                    //        VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
                    //        if (lstvmatobj != null)
                    //        {
                    //            lstSRvisualmat.Add(lstvmatobj.MatrixName);
                    //        }
                    //    }
                    //    straMatrix = string.Join("','", lstSRvisualmat.Select(i => i.MatrixName).ToList().ToArray());

                    //    straMatrix = "'" + straMatrix + "'";
                    //}

                    //else
                    //{
                    //    Application.ShowViewStrategy.ShowMessage("Sample Matrices cannot be empty", InformationType.Error, timer.Seconds, InformationPosition.Top);
                    //}
                    //if (objSample != null && objSample.QuoteID != null && straMatrix.Length > 0)
                    //{
                    //    //cs.Criteria["Filter"] = CriteriaOperator.Parse("[CRMQuotes] = ? and [Matix.MatrixName] in (?)", objSample.QuoteID.Oid,straMatrix);
                    //    cs.Criteria["Filter"] = CriteriaOperator.Parse(string.Format("[CRMQuotes] = '{0}' and [Matrix.MatrixName] in ({1}) and TAT = '{2}'", objSample.QuoteID.Oid, straMatrix, objSample.TAT.Oid));
                    //}
                    //else
                    //{
                    //    cs.Criteria["Filter"] = CriteriaOperator.Parse(string.Format("1==2"));
                    //}
                    #endregion
                    IObjectSpace objspaceQ = Application.CreateObjectSpace();
                    CRMQuotes objToShow = objspaceQ.CreateObject<CRMQuotes>();
                    //ListView CreateListView = Application.CreateListView(/*CRMQuotes_AnalysisPricing_ListView_ViewMode*/"AnalysisPricing_ListView_Quotes_SampleRegistration", cs, false);
                    DetailView createDetailView = Application.CreateDetailView(objspaceQ, "CRMQuotes_DetailView_Reviewd_History_SampleRegistration", false);
                    //e.Size = new System.Drawing.Size(1030, 550);
                    //e.View = createDetailView;
                    //e.DialogController.SaveOnAccept = false;
                    //e.DialogController.ViewClosed += DialogController_ViewClosed;
                    ShowViewParameters showViewParameters = new ShowViewParameters(createDetailView);
                    showViewParameters.CreatedView = createDetailView;
                    showViewParameters.Context = TemplateContext.PopupWindow;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.Accepting += dc_Accepting;
                    //dc.AcceptAction.Executed += AcceptAction_Executed;
                    dc.CloseOnCurrentObjectProcessing = false;
                    showViewParameters.Controllers.Add(dc);
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    objquotesinfo.Analysispopupwindow = true;
                    objquotesinfo.Itempopupwindow = true;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void dc_Accepting(object sender, DialogControllerAcceptingEventArgs e)
        {

            //CRMQuotes objCRM = (CRMQuotes)e.AcceptActionArgs.CurrentObject;
            //XPCollection<AnalysisPricing> xp = objCRM.AnalysisPricing;
            DevExpress.ExpressApp.Editors.ListPropertyEditor listAnalysis = null;
            DevExpress.ExpressApp.Editors.ListPropertyEditor listItemCharges = null;
            DevExpress.ExpressApp.SystemModule.DialogController dcCRM = (DevExpress.ExpressApp.SystemModule.DialogController)sender;
            //dcCRM.Frame.View 
            foreach (ViewItem item in ((DetailView)dcCRM.Frame.View).Items.Where(a => a.Id == "AnalysisPricing"))
            {
                listAnalysis = (DevExpress.ExpressApp.Editors.ListPropertyEditor)item;
                break;
            }
            foreach (ViewItem item in ((DetailView)dcCRM.Frame.View).Items.Where(a => a.Id == "QuotesItemChargePrice"))
            {
                listItemCharges = (DevExpress.ExpressApp.Editors.ListPropertyEditor)item;
                break;
            }
            try
            {
                if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                {
                    //if (e.PopupWindowViewSelectedObjects != null && e.PopupWindowViewSelectedObjects.Count > 0)
                    if (listAnalysis != null && listAnalysis.Frame != null && listAnalysis.Frame.View != null && listAnalysis.Frame.View.SelectedObjects.Count > 0)
                    {
                        IObjectSpace os = Application.CreateObjectSpace();
                        //IList selectedSetting = os.GetObject(e.PopupWindowViewSelectedObjects);
                        Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Samplecheckin)View.CurrentObject);
                        if (objsamplecheckin == null)
                        {
                            objsamplecheckin = os.CreateObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>();
                            if (View.CurrentObject != null && ((Samplecheckin)View.CurrentObject).ClientName != null)
                            {
                                objsamplecheckin.ClientName = os.GetObject<Modules.BusinessObjects.Crm.Customer>(((Samplecheckin)View.CurrentObject).ClientName);
                            }
                            if (View.CurrentObject != null && ((Samplecheckin)View.CurrentObject).ProjectID != null)
                            {
                                objsamplecheckin.ProjectID = os.GetObject<Modules.BusinessObjects.Setting.Project>(((Samplecheckin)View.CurrentObject).ProjectID);
                            }
                            if (listAnalysis.Frame.View.SelectedObjects.Count > 0)
                            {
                                string NPTest = string.Empty;
                                foreach (AnalysisPricing objAP in listAnalysis.Frame.View.SelectedObjects)
                                {
                                    if (NPTest.Length > 0)
                                    {
                                        if (objAP.Method != null)
                                            NPTest += objAP.Test.TestName + "|" + objAP.Method.MethodNumber + ";";
                                        else
                                            NPTest += objAP.Test.TestName + ";";
                                    }
                                    else
                                    {
                                        if (objAP.Method != null)
                                            NPTest = objAP.Test.TestName + "|" + objAP.Method.MethodNumber + ";";
                                        else
                                            NPTest = objAP.Test.TestName + ";";
                                    }
                                }
                                Modules.BusinessObjects.SampleManagement.Samplecheckin objCurrent = (Samplecheckin)View.CurrentObject;
                                objCurrent.NPTest = NPTest;
                                List<AnalysisPricing> lstanalysisprice = listAnalysis.Frame.View.SelectedObjects.Cast<AnalysisPricing>().Where(i => (i.SampleMatrix != null)).ToList();
                                foreach (VisualMatrix objVM in lstanalysisprice.Select(s => s.SampleMatrix).Distinct().ToList())
                                {
                                    if (!string.IsNullOrEmpty(objCurrent.SampleMatries))
                                    {
                                        objCurrent.SampleMatries = null;
                                    }
                                    objCurrent.SampleMatrixes.Add(View.ObjectSpace.GetObject(objVM));
                                    if (objCurrent.SampleMatries == null)
                                        objCurrent.SampleMatries = objVM.Oid.ToString();
                                    else
                                        objCurrent.SampleMatries = objCurrent.SampleMatries + ";" + objVM.Oid.ToString();
                                }
                            }
                            View.ObjectSpace.CommitChanges();
                            objsamplecheckin = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Samplecheckin)View.CurrentObject);

                        }
                        else if (objsamplecheckin != null)
                        {
                            if (listAnalysis.Frame.View.SelectedObjects.Count > 0)
                            {
                                string NPTest = string.Empty;
                                foreach (AnalysisPricing objAP in listAnalysis.Frame.View.SelectedObjects)
                                {
                                    if (NPTest.Length > 0)
                                    {
                                        if (objAP.Method != null)
                                            NPTest += objAP.Test.TestName + "|" + objAP.Method.MethodNumber + ";";
                                        else
                                            NPTest += objAP.Test.TestName + ";";
                                    }
                                    else
                                    {
                                        if (objAP.Method != null)
                                            NPTest = objAP.Test.TestName + "|" + objAP.Method.MethodNumber + ";";
                                        else
                                            NPTest = objAP.Test.TestName + ";";
                                    }
                                }
                                Modules.BusinessObjects.SampleManagement.Samplecheckin objCurrent = (Samplecheckin)View.CurrentObject;
                                objCurrent.NPTest = NPTest;
                                View.ObjectSpace.CommitChanges();
                                objsamplecheckin = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Samplecheckin)View.CurrentObject);

                            }
                        }
                        else
                        {
                            int objtestcount = os.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid]=?", objsamplecheckin.Oid)).ToList().Count();
                            if (objtestcount > 0)
                            {
                                Application.ShowViewStrategy.ShowMessage("Sample details should be empty.", InformationType.Error, timer.Seconds, InformationPosition.Top);
                                return;

                            }

                            View.ObjectSpace.CommitChanges();
                        }
                        SRInfo.bolNewJobID = false;
                        if (objsamplecheckin != null)
                        {
                            int sampleCount = os.GetObjectsCount(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn), CriteriaOperator.Parse("[JobID.Oid] = ?", objsamplecheckin.Oid));
                            if (sampleCount == 1)
                            {
                                Modules.BusinessObjects.SampleManagement.SampleLogIn sample = os.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", objsamplecheckin.Oid));
                                if (sample != null && sample.VisualMatrix == null)
                                {
                                    os.Delete(sample);
                                    os.CommitChanges();
                                }
                            }

                            Session currentSession = ((XPObjectSpace)(os)).Session;

                            strSampleMatrix = objsamplecheckin.SampleMatries.Split(';');
                            String strSampleMx = string.Join("','", strSampleMatrix).Replace(",' ", ",'");
                            strSampleMx = "'" + strSampleMx + "'";
                            DataTable dtSample = new DataTable();
                            dtSample.Columns.Add("Test");
                            dtSample.Columns.Add("Method");
                            dtSample.Columns.Add("Matrix");
                            dtSample.Columns.Add("VisualMatrix");
                            dtSample.Columns.Add("Comp");
                            dtSample.Columns.Add("Qty", typeof(Int32));
                            dtSample.Columns.Add("IsGroup", typeof(bool));

                            IObjectSpace objVM = Application.CreateObjectSpace();
                            foreach (AnalysisPricing obj in listAnalysis.Frame.View.SelectedObjects)
                            {
                                DataRow dr = dtSample.NewRow();
                                dr["Test"] = obj.Test.TestName;
                                if (obj.Method != null)
                                    dr["Method"] = obj.Method.MethodNumber;
                                if (obj.SampleMatrix == null)
                                {
                                    VisualMatrix lstviMx = objVM.FindObject<VisualMatrix>(CriteriaOperator.Parse(string.Format(" [MatrixName.MatrixName] ='{0}' and Oid in ({1}) ", obj.Matrix.MatrixName, strSampleMx)));
                                    dr["VisualMatrix"] = lstviMx.VisualMatrixName;
                                }
                                else
                                {
                                    dr["VisualMatrix"] = obj.SampleMatrix.VisualMatrixName;
                                }
                                dr["Matrix"] = obj.Matrix.MatrixName;
                                if (obj.Component != null)
                                    dr["Comp"] = obj.Component.Components;
                                dr["Qty"] = obj.Qty;
                                dr["IsGroup"] = obj.IsGroup;
                                dtSample.Rows.Add(dr);
                            }

                            DataTable dtSampleQtyV = dtSample.DefaultView.ToTable(true, "VisualMatrix");
                            DataTable dtVMatrixQ = new DataTable();
                            dtVMatrixQ.Columns.Add("VisualMatrix");
                            dtVMatrixQ.Columns.Add("Qty", typeof(Int32));
                            foreach (DataRow drRow in dtSampleQtyV.Rows)
                            {

                                DataRow drV = dtVMatrixQ.NewRow();
                                drV["VisualMatrix"] = drRow["VisualMatrix"];
                                drV["Qty"] = dtSample.Select("VisualMatrix = '" + drRow["VisualMatrix"] + "'").Max(r => r["Qty"]);
                                dtVMatrixQ.Rows.Add(drV);
                            }

                            // =========================================Sample Login============================================
                            bool DBAccess = false;
                            string JobID = string.Empty;
                            int SampleNo = 0;
                            IObjectSpace objectSpace = Application.CreateObjectSpace();
                            Session currSession = ((XPObjectSpace)(objectSpace)).Session;
                            UnitOfWork uow = new UnitOfWork(currSession.DataLayer);
                            foreach (DataRow drVM in dtVMatrixQ.Rows)
                            {
                                for (int i = 1; i <= (int)drVM["Qty"]; i++)
                                {
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSLNew = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                                    objSLNew.JobID = uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                    if (DBAccess == false)
                                    {
                                        SelectedData sproc = currentSession.ExecuteSproc("GetSampleID", new OperandValue(objSLNew.JobID.ToString()));
                                        if (sproc.ResultSet[1].Rows[0].Values[0] != null)
                                        {
                                            objSLInfo.SampleID = sproc.ResultSet[1].Rows[0].Values[0].ToString();
                                            SampleNo = Convert.ToInt32(objSLInfo.SampleID);
                                            DBAccess = true;
                                        }
                                        else
                                        {
                                            return;
                                        }
                                    }
                                    objSLNew.SampleNo = SampleNo;

                                    objSLNew.Test = true;


                                    objSLNew.VisualMatrix = uow.FindObject<VisualMatrix>(CriteriaOperator.Parse(string.Format("VisualMatrixName = '{0}'", drVM["VisualMatrix"])));

                                    objSLNew.Qty = 1;

                                    objSLNew.QCType = null;


                                    if (objsamplecheckin.ClientName != null)
                                    {
                                        objSLNew.Client = uow.GetObjectByKey<Customer>(objsamplecheckin.ClientName.Oid);
                                    }
                                    if (objsamplecheckin.DateCollected != null)
                                    {
                                        objSLNew.CollectDate = (DateTime)objsamplecheckin.DateCollected;
                                    }
                                    //if (objsamplecheckin.CollectionTime  != null)
                                    //{
                                    //    objSLNew.CollectDate   = objsamplecheckin.CollectionTime ;
                                    //}
                                    if (objsamplecheckin.Collector != null)
                                    {
                                        objSLNew.Collector = uow.GetObjectByKey<Collector>(objsamplecheckin.Collector.Oid);
                                    }
                                    objSLNew.BottleQty = 1;
                                    objSLNew.SubOut = false;
                                    objSLNew.ModifiedBy = uow.GetObjectByKey<Employee>(((Modules.BusinessObjects.Hr.Employee)SecuritySystem.CurrentUser).Oid);  /* as Modules.BusinessObjects.Hr.Employee;*/
                                    objSLNew.ModifiedDate = DateTime.Now;
                                    DataRow[] drrTest = dtSample.Select("VisualMatrix = '" + drVM["VisualMatrix"] + "' and Qty > 0");
                                    foreach (DataRow drTest in drrTest)
                                    {
                                        if (!(bool)drTest["IsGroup"])
                                        {
                                            List<Testparameter> lsttp = uow.Query<Testparameter>().Where(j => j.QCType.QCTypeName == "Sample").Where(k => k.TestMethod.TestName == drTest["Test"].ToString()).Where(l => l.Component.Components == drTest["Comp"].ToString()).ToList().Where(m => m.TestMethod.MethodName.MethodNumber == drTest["Method"].ToString()).Where(n => n.TestMethod.MatrixName.MatrixName == drTest["Matrix"].ToString()).ToList();
                                            foreach (var objLineA in lsttp)
                                            {
                                                objSLNew.Testparameters.Add(uow.GetObjectByKey<Testparameter>(objLineA.Oid));
                                            }
                                            SampleBottleAllocation smplnew = new SampleBottleAllocation(uow);
                                            smplnew.SampleRegistration = objSLNew;
                                            smplnew.TestMethod = uow.GetObjectByKey<TestMethod>(lsttp[0].TestMethod.Oid);
                                            smplnew.BottleID = "A";
                                            if (objSLNew.JobID.CustomDueDates.FirstOrDefault(m => m.TestMethod.Oid == smplnew.TestMethod.Oid && m.TestMethod.MatrixName.Oid == smplnew.TestMethod.MatrixName.Oid) == null)
                                            {
                                                CustomDueDate cdnew = new CustomDueDate(uow);
                                                cdnew.SampleCheckin = objSLNew.JobID;// uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                                cdnew.TestMethod = smplnew.TestMethod;
                                                cdnew.DueDate = objsamplecheckin.DueDate;
                                                cdnew.CreatedDate = DateTime.Now;
                                                cdnew.CreatedBy = (Modules.BusinessObjects.Hr.Employee)objSLNew.ModifiedBy;
                                                if (objsamplecheckin.TAT != null)
                                                {
                                                    cdnew.TAT = uow.GetObjectByKey<TurnAroundTime>(objsamplecheckin.TAT.Oid);
                                                }
                                                cdnew.SampleMatrix = objSLNew.VisualMatrix;
                                                cdnew.Parameter = "AllParam";
                                            }
                                        }
                                        else
                                        {
                                            TestMethod objTm = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup]=true And [MethodName.GCRecord] Is Null", drTest["Test"].ToString()));
                                            if (objTm != null)
                                            {
                                                IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", objTm.Oid));
                                                foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                                                {
                                                    IList<Testparameter> lsttestpara = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objgtm.TestParameter.TestMethod.Oid));
                                                    if (lsttestpara != null)
                                                    {
                                                        foreach (Testparameter param1 in lsttestpara.ToList())
                                                        {
                                                            SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, objSLNew.Oid));
                                                            if (objsp == null)
                                                            {
                                                                SampleParameter newsample = new SampleParameter(uow);
                                                                newsample.Samplelogin = objSLNew;
                                                                newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                                                                newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                                                                newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                                                                newsample.IsGroup = true;
                                                            }
                                                        }
                                                    }
                                                    SampleBottleAllocation smplnew = new SampleBottleAllocation(uow);
                                                    smplnew.SampleRegistration = objSLNew;
                                                    smplnew.TestMethod = uow.GetObjectByKey<TestMethod>(lsttestpara[0].TestMethod.Oid);
                                                    smplnew.BottleID = "A";
                                                    if (objSLNew.JobID.CustomDueDates.FirstOrDefault(m => m.TestMethod.Oid == objTm.Oid && m.TestMethod.MatrixName.Oid == objTm.MatrixName.Oid) == null)
                                                    {
                                                        CustomDueDate cdnew = new CustomDueDate(uow);
                                                        cdnew.SampleCheckin = objSLNew.JobID;// uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                                        cdnew.TestMethod = uow.GetObjectByKey<TestMethod>(objTm.Oid);
                                                        cdnew.DueDate = objsamplecheckin.DueDate;
                                                        cdnew.CreatedDate = DateTime.Now;
                                                        cdnew.CreatedBy = (Modules.BusinessObjects.Hr.Employee)objSLNew.ModifiedBy;
                                                        if (objsamplecheckin.TAT != null)
                                                        {
                                                            cdnew.TAT = uow.GetObjectByKey<TurnAroundTime>(objsamplecheckin.TAT.Oid);
                                                        }
                                                        cdnew.SampleMatrix = objSLNew.VisualMatrix;
                                                        cdnew.Parameter = "AllParam";
                                                    }
                                                }
                                            }
                                        }
                                        drTest["Qty"] = (int)drTest["Qty"] - 1;
                                    }
                                    objSLNew.Save();
                                    SampleNo++;
                                }
                            }

                            if (listItemCharges != null && listItemCharges.Frame != null && listItemCharges.Frame.View != null && listItemCharges.Frame.View.SelectedObjects.Count > 0)
                            {
                                foreach (QuotesItemChargePrice obj in listItemCharges.Frame.View.SelectedObjects)
                                {
                                    if (objsamplecheckin.SCItemCharges.FirstOrDefault(m => m.ItemPrice.Oid == obj.ItemPrice.Oid) == null)
                                    {
                                        SampleCheckinItemChargePricing objNewItem = new SampleCheckinItemChargePricing(uow);
                                        objNewItem.ItemPrice = uow.GetObjectByKey<ItemChargePricing>(obj.ItemPrice.Oid);
                                        objNewItem.Qty = obj.Qty;
                                        objNewItem.UnitPrice = obj.UnitPrice;
                                        objNewItem.Amount = obj.Amount;
                                        objNewItem.FinalAmount = obj.FinalAmount;
                                        objNewItem.Discount = obj.Discount;
                                        objNewItem.Description = obj.Description;
                                        objNewItem.NpUnitPrice = obj.NpUnitPrice;
                                        objNewItem.SampleCheckin = uow.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
                                    }
                                }
                            }
                            uow.CommitChanges();
                            SelectedData updateStatusProc = currentSession.ExecuteSproc("StatusUpdate_SP");
                            Application.ShowViewStrategy.ShowMessage("Imported successfully.", InformationType.Success, timer.Seconds, InformationPosition.Top);
                        }

                        if (((Samplecheckin)View.CurrentObject).Oid == objsamplecheckin.Oid)
                        {

                            View.CurrentObject = View.ObjectSpace.GetObject<Samplecheckin>(objsamplecheckin);
                        }
                        else
                        {
                            IObjectSpace objSpace = Application.CreateObjectSpace();
                            DetailView dv = Application.CreateDetailView(objSpace, "Samplecheckin_DetailView_Copy_SampleRegistration", true, objSpace.GetObject<Samplecheckin>(objsamplecheckin));
                            dv.ViewEditMode = DevExpress.ExpressApp.Editors.ViewEditMode.Edit;
                            Frame.SetView(dv);
                        }
                        View.ObjectSpace.Refresh();

                    }
                    else
                    {
                        e.Cancel = true;
                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        //private void btnCOCImportSamples_CustomizePopupWindowParams(object sender, CustomizePopupWindowParamsEventArgs e)
        //{
        //    ////try
        //    ////{
        //    ////    if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff")
        //    ////    {
        //    ////        Samplecheckin objSample = (Samplecheckin)View.CurrentObject;
        //    ////        IObjectSpace objspace = Application.CreateObjectSpace();
        //    ////        string straMatrix = string.Empty;
        //    ////        CollectionSource cs = new CollectionSource(objspace, typeof(COCSettings));
        //    ////        cs.Criteria.Clear();
        //    ////        //IObjectSpace os = Application.CreateObjectSpace();
        //    ////        //Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = ((Samplecheckin)View.CurrentObject);
        //    ////        //if (objsamplecheckin.SampleMatries != null)
        //    ////        //{
        //    ////        //    strSampleMatrix = objsamplecheckin.SampleMatries.Split(';');

        //    ////        //    List<Matrix> lstSRvisualmat = new List<Matrix>();
        //    ////        //    foreach (string strvmoid in strSampleMatrix.ToList())
        //    ////        //    {
        //    ////        //        VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
        //    ////        //        if (lstvmatobj != null)
        //    ////        //        {
        //    ////        //            lstSRvisualmat.Add(lstvmatobj.MatrixName);
        //    ////        //        }
        //    ////        //    }                        
        //    ////        //    straMatrix = string.Join("','", lstSRvisualmat.Select(i => i.MatrixName).ToList().ToArray());

        //    ////        //    straMatrix = "'" + straMatrix + "'";
        //    ////        //}
        //    ////        //else
        //    ////        //{
        //    ////        //    Application.ShowViewStrategy.ShowMessage("Sample Matrices cannot be empty", InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    ////        //}
        //    ////        if (objSample != null && objSample.ProjectID != null)
        //    ////        {
        //    ////            //cs.Criteria["Filter"] = CriteriaOperator.Parse("[CRMQuotes] = ? and [Matix.MatrixName] in (?)", objSample.QuoteID.Oid,straMatrix);
        //    ////            cs.Criteria["Filter"] = CriteriaOperator.Parse(string.Format("[ProjectID] = '{0}' AND [ClientName] = '{1}' AND [RetireDate] >= '{2}'", objSample.ProjectID.Oid, objSample.ClientName.Oid, DateTime.Today));
        //    ////        }
        //    ////        else
        //    ////        {
        //    ////            cs.Criteria["Filter"] = CriteriaOperator.Parse(string.Format("1==2"));
        //    ////        }
        //    ////        ListView CreateListView = Application.CreateListView(/*CRMQuotes_AnalysisPricing_ListView_ViewMode*/"COCSettings_ListView_SampleRegistration_ImportCOC", cs, false);
        //    ////        e.Size = new System.Drawing.Size(1200, 500);
        //    ////        e.View = CreateListView;
        //    ////        e.DialogController.SaveOnAccept = false;
        //    ////        e.DialogController.ViewClosed += DialogController_ViewClosed;
        //    ////    }
        //    ////}
        //    ////catch (Exception ex)
        //    ////{
        //    ////    Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //    ////    Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    ////}
        //}
        ////private void btnCOCImportSamples_Execute(object sender, PopupWindowShowActionExecuteEventArgs e)
        ////{
        ////    try
        ////    {
        ////        if (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
        ////        {
        ////            if (e.PopupWindowViewSelectedObjects != null && e.PopupWindowViewSelectedObjects.Count == 1)
        ////            {
        ////                bool DBAccess = false;
        ////                string strjobid = null;
        ////                IObjectSpace os = Application.CreateObjectSpace();
        ////                Session currentSession = ((XPObjectSpace)(os)).Session;
        ////                int SampleNo = 0;
        ////                COCSettings objCOCSettings = os.GetObject<COCSettings>((COCSettings)e.PopupWindowViewCurrentObject);
        ////                List<COCSettingsSamples> lstcocSample = View.ObjectSpace.GetObjects<COCSettingsSamples>(CriteriaOperator.Parse("[COCID] = ?", objCOCSettings.Oid)).ToList();
        ////                Samplecheckin objsc = (Samplecheckin)Application.MainWindow.View.CurrentObject;
        ////                Samplecheckin objsamplecheckin = os.GetObject<Samplecheckin>((Samplecheckin)View.CurrentObject);
        ////                if (objCOCSettings != null)
        ////                {
        ////                    if (objsamplecheckin == null)
        ////                    {
        ////                        objsamplecheckin = os.CreateObject<Samplecheckin>();
        ////                        if (objsamplecheckin.JobID==null)
        ////                        {
        ////                            foreach (ViewItem item in ((DetailView)View).Items.Where(i => i.Id == "JobID"))
        ////                            {
        ////                                if (item.GetType() == typeof(ASPxStringPropertyEditor))
        ////                                {
        ////                                    ASPxStringPropertyEditor propertyEditor = item as ASPxStringPropertyEditor;
        ////                                    if (propertyEditor.AllowEdit == true)
        ////                                    {
        ////                                        objsamplecheckin.JobID = objsc.JobID;
        ////                                    }
        ////                                    else if (propertyEditor.AllowEdit == false)
        ////                                    {
        ////                                        SelectedData sproc = currentSession.ExecuteSproc("GetJobID", new OperandValue("Normal"));
        ////                                        strjobid = sproc.ResultSet[1].Rows[0].Values[0].ToString();
        ////                                        objsamplecheckin.JobID = strjobid;

        ////                                    }
        ////                                }
        ////                            }
        ////                        }                                
        ////                        objsamplecheckin.BalanceID = objCOCSettings.BalanceID;
        ////                        objsamplecheckin.BatchID = objCOCSettings.BatchID;
        ////                        objsamplecheckin.Comment = objCOCSettings.Comment;
        ////                        objsamplecheckin.Remark = objCOCSettings.Comment;
        ////                        objsamplecheckin.IsAlpacJobid = objCOCSettings.IsAlpacCOCid;
        ////                        objsamplecheckin.NoOfSamples = objCOCSettings.NoOfSamples;
        ////                        objsamplecheckin.NPTest = objCOCSettings.NPTest;                               
        ////                        objsamplecheckin.NumberOfSample = objCOCSettings.NumberOfSample;
        ////                        objsamplecheckin.PackageNo = objCOCSettings.PackageNo;
        ////                        objsamplecheckin.SampleCategory = objCOCSettings.SampleCategory;
        ////                        objsamplecheckin.SampleMatries = objCOCSettings.SampleMatries;
        ////                        if (objCOCSettings.TAT != null)
        ////                        {
        ////                            objsamplecheckin.TAT = os.GetObjectByKey<TurnAroundTime>(objCOCSettings.TAT.Oid);
        ////                            int tatHour = objCOCSettings.TAT.Count;
        ////                            int Day = 0;
        ////                            if (tatHour >= 24)
        ////                            {
        ////                                Day = tatHour / 24;
        ////                                objsamplecheckin.DueDate = AddWorkingDays(DateTime.Now, Day);
        ////                            }
        ////                            else
        ////                            {
        ////                                objsamplecheckin.DueDate = AddWorkingHours(DateTime.Now, tatHour);
        ////                            }
        ////                        }
        ////                        objsamplecheckin.ReportTemplate = objCOCSettings.ReportTemplate;
        ////                        objsamplecheckin.Test = objCOCSettings.NPTest;
        ////                        objsamplecheckin.TestName = objCOCSettings.NPTest;
        ////                        if (objCOCSettings.ClientName != null)
        ////                        {
        ////                            objsamplecheckin.ClientName = os.GetObjectByKey<Customer>(objCOCSettings.ClientName.Oid);
        ////                            objsamplecheckin.ClientAddress = objCOCSettings.ClientAddress;
        ////                            objsamplecheckin.ClientAddress2 = objCOCSettings.ClientAddress2;
        ////                            objsamplecheckin.ClientContact = objCOCSettings.ClientContact;
        ////                            objsamplecheckin.ClientPhone = objCOCSettings.ClientPhone;
        ////                        }
        ////                        if (objCOCSettings.ProjectID != null)
        ////                        {
        ////                            objsamplecheckin.ProjectID = os.GetObjectByKey<Project>(objCOCSettings.ProjectID.Oid);
        ////                            objsamplecheckin.ProjectCity = objCOCSettings.ProjectCity;
        ////                            objsamplecheckin.ProjectOverview = objCOCSettings.ProjectOverview;
        ////                            objsamplecheckin.ProjectSource = objCOCSettings.ProjectSource;
        ////                            if (objCOCSettings.ProjectCategory != null)
        ////                            {
        ////                                objsamplecheckin.ProjectCategory = os.GetObjectByKey<ProjectCategory>(objCOCSettings.ProjectCategory.Oid);
        ////                            }
        ////                        }
        ////                        if (objCOCSettings.QuoteID != null)
        ////                        {
        ////                            objsamplecheckin.QuoteID = os.GetObjectByKey<CRMQuotes>(objCOCSettings.QuoteID.Oid);
        ////                            ListPropertyEditor lstItemPrice = ((DetailView)View).FindItem("SCItemCharges") as ListPropertyEditor;
        ////                            //if (lstItemPrice != null && lstItemPrice.ListView == null)
        ////                            //{
        ////                            //    lstItemPrice.CreateControl();
        ////                            //}
        ////                            //if (lstItemPrice != null && lstItemPrice.ListView != null)
        ////                            //{
        ////                            //    foreach (SampleCheckinItemChargePricing obj in ((ListView)lstItemPrice.ListView).CollectionSource.List.Cast<SampleCheckinItemChargePricing>().ToList())
        ////                            //    {
        ////                            //        ((ListView)lstItemPrice.ListView).CollectionSource.Remove(obj);
        ////                            //    }
        ////                            //}
        ////                            if (objCOCSettings.QuoteID != null)
        ////                            {
        ////                                CRMQuotes objQuote = os.GetObjectByKey<CRMQuotes>(objCOCSettings.QuoteID.Oid);
        ////                                if (objQuote != null && objQuote.QuotesItemChargePrice.Count > 0)
        ////                                {
        ////                                    foreach (QuotesItemChargePrice obj in objQuote.QuotesItemChargePrice.ToList())
        ////                                    {
        ////                                        SampleCheckinItemChargePricing objNewItem = os.CreateObject<SampleCheckinItemChargePricing>();
        ////                                        objNewItem.ItemPrice = os.GetObjectByKey<ItemChargePricing>(obj.ItemPrice.Oid);
        ////                                        objNewItem.Qty = obj.Qty;
        ////                                        objNewItem.UnitPrice = obj.UnitPrice;
        ////                                        objNewItem.Amount = obj.Amount;
        ////                                        objNewItem.FinalAmount = obj.FinalAmount;
        ////                                        objNewItem.Discount = obj.Discount;
        ////                                        objNewItem.Description = obj.Description;
        ////                                        objNewItem.NpUnitPrice = obj.NpUnitPrice;
        ////                                    }
        ////                                }
        ////                            }
        ////                        }
        ////                        if (objCOCSettings.Attachment != null && objCOCSettings.Attachment.Count > 0)
        ////                        {
        ////                            List<Attachment> lstAttachment = View.ObjectSpace.GetObjects<Attachment>(CriteriaOperator.Parse("[COCSettings] = ?", objCOCSettings.Oid)).ToList();
        ////                            foreach (Attachment objAttachment in lstAttachment.ToList())
        ////                            {
        ////                                if (lstAttachment != null)
        ////                                {
        ////                                    Attachment objNewAttachment = os.CreateObject<Attachment>();
        ////                                    Attachment oldAttachment = os.GetObjectByKey<Attachment>(objAttachment.Oid);
        ////                                    if (oldAttachment != null)
        ////                                    {
        ////                                        objNewAttachment.Name = oldAttachment.Name;
        ////                                        objNewAttachment.Category = oldAttachment.Category;
        ////                                        objNewAttachment.Date = oldAttachment.Date;
        ////                                        if (oldAttachment.Operator != null)
        ////                                        {
        ////                                            objNewAttachment.Operator = os.GetObjectByKey<Employee>(oldAttachment.Operator.Oid);
        ////                                        }
        ////                                        objNewAttachment.Comment = oldAttachment.Comment;
        ////                                        objNewAttachment.Samplecheckin = os.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
        ////                                        objNewAttachment.Attachments = oldAttachment.Attachments;
        ////                                        objsamplecheckin.Attachments.Add(objNewAttachment);
        ////                                    }
        ////                                }
        ////                            }
        ////                        }
        ////                        if (objCOCSettings.Note != null && objCOCSettings.Note.Count > 0)
        ////                        {
        ////                            List<Notes> lstNotes = View.ObjectSpace.GetObjects<Notes>(CriteriaOperator.Parse("[COCSettings] = ?", objCOCSettings.Oid)).ToList();
        ////                            foreach (Notes objNotes in lstNotes.ToList())
        ////                            {
        ////                                Notes oldNotes = os.GetObjectByKey<Notes>(objNotes.Oid);
        ////                                if (oldNotes != null)
        ////                                {
        ////                                    Notes objNewNotes = os.CreateObject<Notes>();
        ////                                    objNewNotes.Title = oldNotes.Title;
        ////                                    objNewNotes.Attachment = oldNotes.Attachment;
        ////                                    objNewNotes.Text = oldNotes.Text;
        ////                                    if (oldNotes.Author != null)
        ////                                    {
        ////                                        objNewNotes.Author = os.GetObjectByKey<Employee>(oldNotes.Author.Oid);
        ////                                    }
        ////                                    objNewNotes.Date = oldNotes.Date;
        ////                                    objNewNotes.Samplecheckin = os.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
        ////                                    objNewNotes.FollowUpDate = oldNotes.FollowUpDate;
        ////                                    objsamplecheckin.Notes.Add(objNewNotes);
        ////                                }
        ////                            }
        ////                        }
        ////                        os.CommitChanges();
        ////                    }
        ////                    else
        ////                    {
        ////                        if (objsamplecheckin != null)
        ////                        {
        ////                            objsamplecheckin.BalanceID = objCOCSettings.BalanceID;
        ////                            objsamplecheckin.BatchID = objCOCSettings.BatchID;
        ////                            objsamplecheckin.Comment = objCOCSettings.Comment;
        ////                            objsamplecheckin.Remark = objCOCSettings.Comment;
        ////                            objsamplecheckin.IsAlpacJobid = objCOCSettings.IsAlpacCOCid;
        ////                            objsamplecheckin.NoOfSamples = objCOCSettings.NoOfSamples;
        ////                            objsamplecheckin.NPTest = objCOCSettings.NPTest;
        ////                            objsamplecheckin.NumberOfSample = objCOCSettings.NumberOfSample;
        ////                            objsamplecheckin.PackageNo = objCOCSettings.PackageNo;
        ////                            objsamplecheckin.SampleCategory = objCOCSettings.SampleCategory;
        ////                            objsamplecheckin.SampleMatries = objCOCSettings.SampleMatries;
        ////                            if (objCOCSettings.TAT != null)
        ////                            {
        ////                                objsamplecheckin.TAT = os.GetObjectByKey<TurnAroundTime>(objCOCSettings.TAT.Oid);
        ////                                int tatHour = objCOCSettings.TAT.Count;
        ////                                int Day = 0;
        ////                                if (tatHour >= 24)
        ////                                {
        ////                                    Day = tatHour / 24;
        ////                                    objsamplecheckin.DueDate = AddWorkingDays(DateTime.Now, Day);
        ////                                }
        ////                                else
        ////                                {
        ////                                    objsamplecheckin.DueDate = AddWorkingHours(DateTime.Now, tatHour);
        ////                                }
        ////                            }
        ////                            objsamplecheckin.ReportTemplate = objCOCSettings.ReportTemplate;
        ////                            objsamplecheckin.Test = objCOCSettings.NPTest;
        ////                            objsamplecheckin.TestName = objCOCSettings.NPTest;
        ////                            if (objCOCSettings.ClientName != null)
        ////                            {
        ////                                objsamplecheckin.ClientName = os.GetObjectByKey<Customer>(objCOCSettings.ClientName.Oid);
        ////                                objsamplecheckin.ClientAddress = objCOCSettings.ClientAddress;
        ////                                objsamplecheckin.ClientAddress2 = objCOCSettings.ClientAddress2;
        ////                                objsamplecheckin.ClientContact = objCOCSettings.ClientContact;
        ////                                objsamplecheckin.ClientPhone = objCOCSettings.ClientPhone;
        ////                            }
        ////                            if (objCOCSettings.ProjectID != null)
        ////                            {
        ////                                objsamplecheckin.ProjectID = os.GetObjectByKey<Project>(objCOCSettings.ProjectID.Oid);
        ////                                objsamplecheckin.ProjectCity = objCOCSettings.ProjectCity;
        ////                                objsamplecheckin.ProjectOverview = objCOCSettings.ProjectOverview;
        ////                                objsamplecheckin.ProjectSource = objCOCSettings.ProjectSource;
        ////                                if (objCOCSettings.ProjectCategory != null)
        ////                                {
        ////                                    objsamplecheckin.ProjectCategory = os.GetObjectByKey<ProjectCategory>(objCOCSettings.ProjectCategory.Oid);
        ////                                }
        ////                            }
        ////                            if (objCOCSettings.QuoteID != null)
        ////                            {
        ////                                objsamplecheckin.QuoteID = os.GetObjectByKey<CRMQuotes>(objCOCSettings.QuoteID.Oid);
        ////                                ListPropertyEditor lstItemPrice = ((DetailView)View).FindItem("SCItemCharges") as ListPropertyEditor;
        ////                                //if (lstItemPrice != null && lstItemPrice.ListView == null)
        ////                                //{
        ////                                //    lstItemPrice.CreateControl();
        ////                                //}
        ////                                //if (lstItemPrice != null && lstItemPrice.ListView != null)
        ////                                //{
        ////                                //    foreach (SampleCheckinItemChargePricing obj in ((ListView)lstItemPrice.ListView).CollectionSource.List.Cast<SampleCheckinItemChargePricing>().ToList())
        ////                                //    {
        ////                                //        ((ListView)lstItemPrice.ListView).CollectionSource.Remove(obj);
        ////                                //    }
        ////                                //}
        ////                                if (objCOCSettings.QuoteID != null)
        ////                                {
        ////                                    CRMQuotes objQuote = os.GetObjectByKey<CRMQuotes>(objCOCSettings.QuoteID.Oid);
        ////                                    if (objQuote != null && objQuote.QuotesItemChargePrice.Count > 0)
        ////                                    {
        ////                                        foreach (QuotesItemChargePrice obj in objQuote.QuotesItemChargePrice.ToList())
        ////                                        {
        ////                                            SampleCheckinItemChargePricing objNewItem = os.CreateObject<SampleCheckinItemChargePricing>();
        ////                                            objNewItem.ItemPrice = os.GetObjectByKey<ItemChargePricing>(obj.ItemPrice.Oid);
        ////                                            objNewItem.Qty = obj.Qty;
        ////                                            objNewItem.UnitPrice = obj.UnitPrice;
        ////                                            objNewItem.Amount = obj.Amount;
        ////                                            objNewItem.FinalAmount = obj.FinalAmount;
        ////                                            objNewItem.Discount = obj.Discount;
        ////                                            objNewItem.Description = obj.Description;
        ////                                            objNewItem.NpUnitPrice = obj.NpUnitPrice;
        ////                                        }
        ////                                    }
        ////                                }
        ////                            }
        ////                            if (objCOCSettings.Attachment != null && objCOCSettings.Attachment.Count > 0)
        ////                            {
        ////                                List<Attachment> lstAttachment = View.ObjectSpace.GetObjects<Attachment>(CriteriaOperator.Parse("[COCSettings] = ?", objCOCSettings.Oid)).ToList();
        ////                                foreach (Attachment objAttachment in lstAttachment.ToList())
        ////                                {
        ////                                    if (lstAttachment != null)
        ////                                    {
        ////                                        Attachment objNewAttachment = os.CreateObject<Attachment>();
        ////                                        Attachment oldAttachment = os.GetObjectByKey<Attachment>(objAttachment.Oid);
        ////                                        if (oldAttachment != null)
        ////                                        {
        ////                                            objNewAttachment.Name = oldAttachment.Name;
        ////                                            objNewAttachment.Category = oldAttachment.Category;
        ////                                            objNewAttachment.Date = oldAttachment.Date;
        ////                                            if (oldAttachment.Operator != null)
        ////                                            {
        ////                                                objNewAttachment.Operator = os.GetObjectByKey<Employee>(oldAttachment.Operator.Oid);
        ////                                            }
        ////                                            objNewAttachment.Comment = oldAttachment.Comment;
        ////                                            objNewAttachment.Samplecheckin = os.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
        ////                                            objNewAttachment.Attachments = oldAttachment.Attachments;
        ////                                            objsamplecheckin.Attachments.Add(objNewAttachment);
        ////                                        }
        ////                                    }
        ////                                }
        ////                            }
        ////                            if (objCOCSettings.Note != null && objCOCSettings.Note.Count > 0)
        ////                            {
        ////                                List<Notes> lstNotes = View.ObjectSpace.GetObjects<Notes>(CriteriaOperator.Parse("[COCSettings] = ?", objCOCSettings.Oid)).ToList();
        ////                                foreach (Notes objNotes in lstNotes.ToList())
        ////                                {
        ////                                    Notes oldNotes = os.GetObjectByKey<Notes>(objNotes.Oid);
        ////                                    if (oldNotes != null)
        ////                                    {
        ////                                        Notes objNewNotes = os.CreateObject<Notes>();
        ////                                        objNewNotes.Title = oldNotes.Title;
        ////                                        objNewNotes.Attachment = oldNotes.Attachment;
        ////                                        objNewNotes.Text = oldNotes.Text;
        ////                                        if (oldNotes.Author != null)
        ////                                        {
        ////                                            objNewNotes.Author = os.GetObjectByKey<Employee>(oldNotes.Author.Oid);
        ////                                        }
        ////                                        objNewNotes.Date = oldNotes.Date;
        ////                                        objNewNotes.Samplecheckin = os.GetObjectByKey<Samplecheckin>(objsamplecheckin.Oid);
        ////                                        objNewNotes.FollowUpDate = oldNotes.FollowUpDate;
        ////                                        objsamplecheckin.Notes.Add(objNewNotes);
        ////                                    }
        ////                                }
        ////                            }
        ////                            os.CommitChanges();
        ////                        }
        ////                    }
        ////                }

        ////                foreach (COCSettingsSamples cocSS in lstcocSample.OrderBy(i => i.SampleNo).ToList())
        ////                {
        ////                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSLNew = os.CreateObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>();
        ////                    objSLNew.JobID = objsamplecheckin;
        ////                    if (objSLNew != null)
        ////                    {
        ////                        if (DBAccess == false)
        ////                        {
        ////                            SelectedData sproc = currentSession.ExecuteSproc("GetSampleID", new OperandValue(objsamplecheckin.JobID.ToString()));
        ////                            if (sproc.ResultSet[1].Rows[0].Values[0] != null)
        ////                            {
        ////                                objSLInfo.SampleID = sproc.ResultSet[1].Rows[0].Values[0].ToString();
        ////                                SampleNo = Convert.ToInt32(objSLInfo.SampleID);
        ////                                DBAccess = true;
        ////                            }
        ////                            else
        ////                            {
        ////                                return;
        ////                            }
        ////                        }
        ////                        objSLNew.SampleNo = SampleNo;
        ////                        objSLNew.ClientSampleID = cocSS.ClientSampleID;
        ////                        objSLNew.Test = true;
        ////                        if (cocSS.VisualMatrix != null)
        ////                        {
        ////                            objSLNew.VisualMatrix = os.GetObjectByKey<VisualMatrix>(cocSS.VisualMatrix.Oid);
        ////                        }
        ////                        if (cocSS.SampleType != null)
        ////                        {
        ////                            objSLNew.SampleType = os.GetObjectByKey<SampleType>(cocSS.SampleType.Oid);
        ////                        }
        ////                        objSLNew.Qty = cocSS.Qty;
        ////                        if (cocSS.Storage != null)
        ////                        {
        ////                            objSLNew.Storage = os.GetObjectByKey<Storage>(cocSS.Storage.Oid);
        ////                        }
        ////                        objSLNew.Preservetives = cocSS.Preservetives;
        ////                        objSLNew.SamplingLocation = cocSS.SamplingLocation;
        ////                        if (cocSS.QCType != null)
        ////                        {
        ////                            objSLNew.QCType = os.GetObjectByKey<QCType>(cocSS.QCType.Oid);
        ////                        }
        ////                        if (cocSS.QCSource != null)
        ////                        {
        ////                            objSLNew.QCSource = os.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(cocSS.QCSource.Oid);
        ////                        }
        ////                        if (cocSS.Client != null)
        ////                        {
        ////                            objSLNew.Client = os.GetObjectByKey<Customer>(cocSS.Client);
        ////                        }
        ////                        if (cocSS.Department != null)
        ////                        {
        ////                            objSLNew.Department = os.GetObjectByKey<Department>(cocSS.Department);
        ////                        }
        ////                        if (cocSS.ProjectID != null)
        ////                        {
        ////                            objSLNew.ProjectID = os.GetObjectByKey<Project>(cocSS.ProjectID);
        ////                        }
        ////                        if (cocSS.PreserveCondition != null)
        ////                        {
        ////                            objSLNew.PreserveCondition = os.GetObjectByKey<PreserveCondition>(cocSS.PreserveCondition);
        ////                        }
        ////                        if (cocSS.StorageID != null)
        ////                        {
        ////                            objSLNew.StorageID = os.GetObjectByKey<Storage>(cocSS.StorageID);
        ////                        }
        ////                        objSLNew.FlowRate = cocSS.FlowRate;
        ////                        objSLNew.TimeStart = cocSS.TimeStart;
        ////                        objSLNew.TimeEnd = cocSS.TimeEnd;
        ////                        objSLNew.Time = cocSS.Time;
        ////                        objSLNew.Volume = cocSS.Volume;
        ////                        objSLNew.Address = cocSS.Address;
        ////                        objSLNew.AreaOrPerson = cocSS.AreaOrPerson;
        ////                        if (cocSS.BalanceID != null)
        ////                        {
        ////                            objSLNew.BalanceID = os.GetObjectByKey<Modules.BusinessObjects.Assets.Labware>(cocSS.BalanceID.Oid);
        ////                        }
        ////                        objSLNew.AssignTo = cocSS.AssignTo;
        ////                        objSLNew.Barp = cocSS.Barp;
        ////                        objSLNew.BatchID = cocSS.BatchID;
        ////                        objSLNew.BatchSize = cocSS.BatchSize;
        ////                        objSLNew.BatchSize_pc = cocSS.BatchSize_pc;
        ////                        objSLNew.BatchSize_Units = cocSS.BatchSize_Units;
        ////                        objSLNew.Blended = cocSS.Blended;
        ////                        objSLNew.BottleQty = cocSS.BottleQty;
        ////                        objSLNew.BuriedDepthOfGroundWater = cocSS.BuriedDepthOfGroundWater;
        ////                        objSLNew.ChlorineFree = cocSS.ChlorineFree;
        ////                        objSLNew.ChlorineTotal = cocSS.ChlorineTotal;
        ////                        objSLNew.City = cocSS.City;
        ////                        objSLNew.CompositeQty = cocSS.CompositeQty;
        ////                        objSLNew.DateEndExpected = cocSS.DateEndExpected;
        ////                        objSLNew.DateStartExpected = cocSS.DateStartExpected;
        ////                        objSLNew.ClientSampleID = cocSS.ClientSampleID;
        ////                        objSLNew.Comment = cocSS.Comment;
        ////                        objSLNew.Containers = cocSS.Containers;
        ////                        objSLNew.Depth = cocSS.Depth;
        ////                        objSLNew.Description = cocSS.Description;
        ////                        objSLNew.DischargeFlow = cocSS.DischargeFlow;
        ////                        objSLNew.DischargePipeHeight = cocSS.DischargePipeHeight;
        ////                        objSLNew.DO = cocSS.DO;
        ////                        objSLNew.Emission = cocSS.Emission;
        ////                        objSLNew.EndOfRoad = cocSS.EndOfRoad;
        ////                        objSLNew.EquipmentModel = cocSS.EquipmentModel;
        ////                        objSLNew.EquipmentName = cocSS.EquipmentName;
        ////                        objSLNew.FacilityID = cocSS.FacilityID;
        ////                        objSLNew.FacilityName = cocSS.FacilityName;
        ////                        objSLNew.FacilityType = cocSS.FacilityType;
        ////                        objSLNew.FinalForm = cocSS.FinalForm;
        ////                        objSLNew.FinalPackaging = cocSS.FinalPackaging;
        ////                        objSLNew.FlowRate = cocSS.FlowRate;
        ////                        objSLNew.FlowRateCubicMeterPerHour = cocSS.FlowRateCubicMeterPerHour;
        ////                        objSLNew.FlowRateLiterPerMin = cocSS.FlowRateLiterPerMin;
        ////                        objSLNew.FlowVelocity = cocSS.FlowVelocity;
        ////                        objSLNew.ForeignMaterial = cocSS.ForeignMaterial;
        ////                        objSLNew.Frequency = cocSS.Frequency;
        ////                        objSLNew.GISStatus = cocSS.GISStatus;
        ////                        objSLNew.GravelContent = cocSS.GravelContent;
        ////                        objSLNew.GrossWeight = cocSS.GrossWeight;
        ////                        objSLNew.GroupSample = cocSS.GroupSample;
        ////                        objSLNew.Hold = cocSS.Hold;
        ////                        objSLNew.Humidity = cocSS.Humidity;
        ////                        objSLNew.IceCycle = cocSS.IceCycle;
        ////                        objSLNew.Increments = cocSS.Increments;
        ////                        objSLNew.Interval = cocSS.Interval;
        ////                        objSLNew.IsActive = cocSS.IsActive;
        ////                        objSLNew.IsNotTransferred = cocSS.IsNotTransferred;
        ////                        objSLNew.ItemName = cocSS.ItemName;
        ////                        objSLNew.KeyMap = cocSS.KeyMap;
        ////                        objSLNew.LicenseNumber = cocSS.LicenseNumber;
        ////                        objSLNew.ManifestNo = cocSS.ManifestNo;
        ////                        objSLNew.MonitoryingRequirement = cocSS.MonitoryingRequirement;
        ////                        objSLNew.NoOfCollectionsEachTime = cocSS.NoOfCollectionsEachTime;
        ////                        objSLNew.NoOfPoints = cocSS.NoOfPoints;
        ////                        objSLNew.Notes = cocSS.Notes;
        ////                        objSLNew.OriginatingEntiry = cocSS.OriginatingEntiry;
        ////                        objSLNew.OriginatingLicenseNumber = cocSS.OriginatingLicenseNumber;
        ////                        objSLNew.PackageNumber = cocSS.PackageNumber;
        ////                        objSLNew.ParentSampleDate = cocSS.ParentSampleDate;
        ////                        objSLNew.ParentSampleID = cocSS.ParentSampleID;
        ////                        objSLNew.PiecesPerUnit = cocSS.PiecesPerUnit;
        ////                        objSLNew.Preservetives = cocSS.Preservetives;
        ////                        objSLNew.ProjectName = cocSS.ProjectName;
        ////                        objSLNew.PurifierSampleID = cocSS.PurifierSampleID;
        ////                        objSLNew.PWSID = cocSS.PWSID;
        ////                        objSLNew.PWSSystemName = cocSS.PWSSystemName;
        ////                        objSLNew.RegionNameOfSection = cocSS.RegionNameOfSection;
        ////                        objSLNew.RejectionCriteria = cocSS.RejectionCriteria;
        ////                        objSLNew.RepeatLocation = cocSS.RepeatLocation;
        ////                        objSLNew.RetainedWeight = cocSS.RetainedWeight;
        ////                        objSLNew.RiverWidth = cocSS.RiverWidth;
        ////                        objSLNew.RushSample = cocSS.RushSample;
        ////                        objSLNew.SampleAmount = cocSS.SampleAmount;
        ////                        objSLNew.SampleCondition = cocSS.SampleCondition;
        ////                        objSLNew.SampleDescription = cocSS.SampleDescription;
        ////                        objSLNew.SampleImage = cocSS.SampleImage;
        ////                        objSLNew.SampleName = cocSS.SampleName;
        ////                        objSLNew.SamplePointID = cocSS.SamplePointID;
        ////                        objSLNew.SamplePointType = cocSS.SamplePointType;
        ////                        objSLNew.SampleSource = cocSS.SampleSource;
        ////                        objSLNew.SampleTag = cocSS.SampleTag;
        ////                        objSLNew.SampleWeight = cocSS.SampleWeight;
        ////                        objSLNew.SamplingAddress = cocSS.SamplingAddress;
        ////                        objSLNew.SamplingEquipment = cocSS.SamplingEquipment;
        ////                        objSLNew.SamplingLocation = cocSS.SamplingLocation;
        ////                        objSLNew.SamplingProcedure = cocSS.SamplingProcedure;
        ////                        objSLNew.SequenceTestSampleID = cocSS.SequenceTestSampleID;
        ////                        objSLNew.SequenceTestSortNo = cocSS.SequenceTestSortNo;
        ////                        objSLNew.ServiceArea = cocSS.ServiceArea;
        ////                        objSLNew.SiteCode = cocSS.SiteCode;
        ////                        objSLNew.SiteDescription = cocSS.SiteDescription;
        ////                        objSLNew.SiteID = cocSS.SiteID;
        ////                        objSLNew.SiteNameArchived = cocSS.SiteNameArchived;
        ////                        objSLNew.SiteUserDefinedColumn1 = cocSS.SiteUserDefinedColumn1;
        ////                        objSLNew.SiteUserDefinedColumn2 = cocSS.SiteUserDefinedColumn2;
        ////                        objSLNew.SiteUserDefinedColumn3 = cocSS.SiteUserDefinedColumn3;
        ////                        objSLNew.SubOut = cocSS.SubOut;
        ////                        objSLNew.SystemType = cocSS.SystemType;
        ////                        objSLNew.TargetMGTHC_CBD_mg_pc = cocSS.TargetMGTHC_CBD_mg_pc;
        ////                        objSLNew.TargetMGTHC_CBD_mg_unit = cocSS.TargetMGTHC_CBD_mg_unit;
        ////                        objSLNew.TargetPotency = cocSS.TargetPotency;
        ////                        objSLNew.TargetUnitWeight_g_pc = cocSS.TargetUnitWeight_g_pc;
        ////                        objSLNew.TargetUnitWeight_g_unit = cocSS.TargetUnitWeight_g_unit;
        ////                        objSLNew.TargetWeight = cocSS.TargetWeight;
        ////                        objSLNew.Time = cocSS.Time;
        ////                        objSLNew.TimeEnd = cocSS.TimeEnd;
        ////                        objSLNew.TimeStart = cocSS.TimeStart;
        ////                        objSLNew.TotalSamples = cocSS.TotalSamples;
        ////                        objSLNew.TotalTimes = cocSS.TotalTimes;
        ////                        if (cocSS.TtimeUnit != null)
        ////                        {
        ////                            objSLNew.TtimeUnit = os.GetObjectByKey<Modules.BusinessObjects.Setting.Unit>(cocSS.TtimeUnit.Oid);
        ////                        }
        ////                        objSLNew.WaterType = cocSS.WaterType;
        ////                        objSLNew.ZipCode = cocSS.ZipCode;
        ////                        if (cocSS.ModifiedBy != null)
        ////                        {
        ////                            objSLNew.ModifiedBy = os.GetObjectByKey<Modules.BusinessObjects.Hr.CustomSystemUser>(cocSS.ModifiedBy.Oid);
        ////                        }
        ////                        objSLNew.ModifiedDate = cocSS.ModifiedDate;
        ////                        objSLNew.Comment = cocSS.Comment;
        ////                        objSLNew.Latitude = cocSS.Latitude;
        ////                        objSLNew.Longitude = cocSS.Longitude;
        ////                        List<COCSettingsTest> lstcocTest = View.ObjectSpace.GetObjects<COCSettingsTest>(CriteriaOperator.Parse("[COCSettingsSamples] = ?", cocSS.Oid)).ToList();
        ////                        foreach (COCSettingsTest cocT in lstcocTest.ToList())
        ////                        {
        ////                            SampleParameter objSP = os.CreateObject<SampleParameter>();
        ////                            if (objSP != null)
        ////                            {
        ////                                if (cocT.Testparameter != null)
        ////                                {
        ////                                    objSP.Testparameter = os.GetObjectByKey<Testparameter>(cocT.Testparameter.Oid);
        ////                                }
        ////                                if (cocT.COCSettingsSamples != null)
        ////                                {
        ////                                    objSP.Samplelogin = objSLNew;
        ////                                }
        ////                            }
        ////                        }
        ////                        objSLNew.Save();
        ////                        SampleNo++;
        ////                        List<COCSettingsBottleAllocation> lstcocBottle = View.ObjectSpace.GetObjects<COCSettingsBottleAllocation>(CriteriaOperator.Parse("[COCSettingsRegistration] = ?", cocSS.Oid)).ToList();
        ////                        foreach (COCSettingsBottleAllocation cocBA in lstcocBottle.ToList())
        ////                        {
        ////                            SampleBottleAllocation smplnew = os.CreateObject<SampleBottleAllocation>();
        ////                            smplnew.SampleRegistration = objSLNew;
        ////                            smplnew.TestMethod = os.GetObjectByKey<TestMethod>(cocBA.TestMethod.Oid);
        ////                            smplnew.BottleID = cocBA.BottleID;
        ////                            if (cocBA.Containers != null)
        ////                            {
        ////                                smplnew.Containers = os.GetObjectByKey<Modules.BusinessObjects.Setting.Container>(cocBA.Containers.Oid);
        ////                            }
        ////                            if (cocBA.Preservative != null)
        ////                            {
        ////                                smplnew.Preservative = os.GetObjectByKey<Preservative>(cocBA.Preservative.Oid);
        ////                            }
        ////                            if (cocBA.StorageID != null)
        ////                            {
        ////                                smplnew.StorageID = os.GetObjectByKey<Storage>(cocBA.StorageID.Oid);
        ////                            }
        ////                            if (cocBA.StorageCondition != null)
        ////                            {
        ////                                smplnew.StorageCondition = os.GetObjectByKey<PreserveCondition>(cocBA.StorageCondition.Oid);
        ////                            }
        ////                        }
        ////                    }
        ////                    os.CommitChanges();
        ////                }
        ////                SelectedData updateStatusProc = currentSession.ExecuteSproc("StatusUpdate_SP");
        ////                objSLInfo.boolCopySamples = false;
        ////                if (Frame is NestedFrame)
        ////                {
        ////                    NestedFrame nestedFrame = (NestedFrame)Frame;
        ////                    CompositeView view = nestedFrame.ViewItem.View;
        ////                    foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
        ////                    {
        ////                        if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null))
        ////                        {
        ////                            if (frameContainer.Frame.View is DetailView)
        ////                            {
        ////                                frameContainer.Frame.View.ObjectSpace.ReloadObject(frameContainer.Frame.View.CurrentObject);
        ////                            }
        ////                            else
        ////                            {
        ////                                (frameContainer.Frame.View as DevExpress.ExpressApp.ListView).CollectionSource.Reload();
        ////                            }
        ////                            frameContainer.Frame.View.Refresh();
        ////                        }
        ////                    }
        ////                }
        ////                View.Refresh();
        ////                View.RefreshDataSource();
        ////                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\SuccessfulMessage", "Savesuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
        ////                if (((Samplecheckin)View.CurrentObject).Oid == objsamplecheckin.Oid)
        ////                {

        ////                    View.CurrentObject = View.ObjectSpace.GetObject<Samplecheckin>(objsamplecheckin);
        ////                }
        ////                else
        ////                {
        ////                    IObjectSpace objSpace = Application.CreateObjectSpace();
        ////                    DetailView dv = Application.CreateDetailView(objSpace, "Samplecheckin_DetailView_Copy_SampleRegistration", true, objSpace.GetObject<Samplecheckin>(objsamplecheckin));
        ////                    dv.ViewEditMode = DevExpress.ExpressApp.Editors.ViewEditMode.Edit;
        ////                    Frame.SetView(dv);
        ////                }
        ////            }
        ////            else if (e.PopupWindowViewSelectedObjects != null && e.PopupWindowViewSelectedObjects.Count > 1)
        ////            {
        ////                e.CanCloseWindow = false;
        ////                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectonlychk"), InformationType.Info, timer.Seconds, InformationPosition.Top);
        ////            }
        ////            else
        ////            {
        ////                e.CanCloseWindow = false;
        ////                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Info, timer.Seconds, InformationPosition.Top);
        ////            }
        ////        }
        ////        View.ObjectSpace.Refresh();

        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        ////        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        ////    }
        ////}

        private void btnTask_RegistrationReport_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View != null && (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration_Copy" || View.Id == "Samplecheckin_ListView_Copy_Registration" || View.Id == "SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"))
                {
                    string strCOCID = string.Empty;
                    List<string> strCOCIDlist = new List<string>();
                    if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                    {
                        if (View.SelectedObjects != null)
                        {
                            foreach (Samplecheckin obj in View.SelectedObjects)
                            {
                                strCOCIDlist.Add(obj.JobID);
                                if (string.IsNullOrEmpty(strCOCID))
                                {
                                    strCOCID = "'" + obj.JobID + "'";
                                }
                                else
                                {
                                    strCOCID = strCOCID + ",'" + obj.JobID + "'";
                                }
                            }
                        }
                    }
                    else if (View.Id == "SampleRegistration")
                    {
                        DashboardView dv = (DashboardView)Application.MainWindow.View;
                        DashboardViewItem SLListView = (DashboardViewItem)dv.FindItem("SampleCheckin");
                        CriteriaOperator cs = CriteriaOperator.Parse("COC_ID=" + SRInfo.strJobID);

                        DetailView detailview = (DetailView)SLListView.InnerView;
                        if (detailview != null && detailview.CurrentObject != null && detailview.CurrentObject.GetType() == typeof(Modules.BusinessObjects.SampleManagement.Samplecheckin))
                        {
                            Modules.BusinessObjects.SampleManagement.Samplecheckin obj = (Modules.BusinessObjects.SampleManagement.Samplecheckin)detailview.CurrentObject;
                            if (obj != null && !string.IsNullOrEmpty(obj.JobID))
                            {
                                strCOCIDlist.Add(obj.JobID);
                                strCOCID = "'" + obj.JobID + "'";
                            }
                        }
                    }
                    else
                    {
                        if (View.CurrentObject != null)
                        {
                            Samplecheckin sampleCheckIn = (Samplecheckin)View.CurrentObject;
                            strCOCID = "'" + sampleCheckIn.JobID + "'";
                            strCOCIDlist.Add(sampleCheckIn.JobID);
                        }
                    }

                    if (strCOCIDlist != null && strCOCIDlist.Count > 0)
                    {
                        string strTempPath = Path.GetTempPath();
                        String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                        if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\ReportPreview")) == false)
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\ReportPreview"));
                        }
                        string strExportedPath = HttpContext.Current.Server.MapPath(@"~\ReportPreview\" + timeStamp + ".docx");
                        XtraReport xtraReport = new XtraReport();

                        objDRDCInfo.WebConfigConn = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                        SetConnectionString();

                        DynamicReportBusinessLayer.BLCommon.SetDBConnection(objDRDCInfo.LDMSQLServerName, objDRDCInfo.LDMSQLDatabaseName, objDRDCInfo.LDMSQLUserID, objDRDCInfo.LDMSQLPassword);

                        if (strCOCIDlist.Count > 1)
                        {
                            foreach (string strCOC_ID in strCOCIDlist)
                            {
                                XtraReport tempxtraReport = new XtraReport();
                                ObjReportingInfo.strJobID = strCOC_ID;
                                tempxtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("TaskRegistrationReport", ObjReportingInfo, false);
                                tempxtraReport.CreateDocument();
                                xtraReport.Pages.AddRange(tempxtraReport.Pages);
                            }

                            using (MemoryStream ms = new MemoryStream())
                            {
                                xtraReport.ExportToDocx(ms);
                                using (PdfDocumentProcessor source = new PdfDocumentProcessor())
                                {
                                    source.LoadDocument(ms);
                                    source.SaveDocument(strExportedPath);
                                }
                            }
                        }
                        else
                        {
                            ObjReportingInfo.strJobID = strCOCID;
                            xtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("TaskRegistrationReport", ObjReportingInfo, false);
                        }

                        xtraReport.ExportToDocx(strExportedPath);

                        string[] path = strExportedPath.Split('\\');
                        int arrcount = path.Count();
                        int sc = arrcount - 2;
                        string OriginalPath = string.Join("/", path.GetValue(sc), path.GetValue(sc + 1));
                        WebWindow.CurrentRequestWindow.RegisterClientScript("show", string.Format("window.open('{0}','_blank');", OriginalPath));
                    }
                    else
                    {
                        if (View != null && View.Id == "Samplecheckin_ListView_Copy_Registration")
                        {
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>()
                    .InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void btnImportBasicInformationAction_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                IObjectSpace os = Application.CreateObjectSpace(typeof(SampleRegistrationFileImport));
                SampleRegistrationFileImport word = os.CreateObject<SampleRegistrationFileImport>();
                DetailView createdView = Application.CreateDetailView(os, word);
                createdView.ViewEditMode = ViewEditMode.Edit;
                ShowViewParameters showViewParameters = new ShowViewParameters(createdView);
                showViewParameters.Context = TemplateContext.NestedFrame;
                showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                DialogController dc = Application.CreateController<DialogController>();
                dc.SaveOnAccept = false;
                dc.Accepting += BasicInformation_Importing;
                dc.CloseOnCurrentObjectProcessing = false;
                showViewParameters.Controllers.Add(dc);
                Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>()
                    .InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void BasicInformation_Importing(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                SampleRegistrationFileImport basicinfoFile = (SampleRegistrationFileImport)e.AcceptActionArgs.CurrentObject;
                if (basicinfoFile != null && basicinfoFile.InputFile != null)//View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration")
                {
                    FileInfo fileInfo = new FileInfo(basicinfoFile.InputFile.FileName);
                    string strExtension = fileInfo.Extension;
                    String strTimeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                    string strFileName = strTimeStamp + "." + strExtension;
                    if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\ReportPreview\")) == false)
                    {
                        Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\ReportPreview\"));
                    }
                    object strExportedPath = HttpContext.Current.Server.MapPath(@"~\ReportPreview\" + strFileName);
                    byte[] file = basicinfoFile.InputFile.Content;
                    File.WriteAllBytes(strExportedPath.ToString(), file);

                    string strTotalText = string.Empty;
                    string strClientName = string.Empty;
                    string strClientAddress = string.Empty;
                    string strProjectID = string.Empty;
                    string strRequestedDateYear = string.Empty;
                    string strRequestedDateMonth = string.Empty;
                    string strRequestedDateDay = string.Empty;
                    string strInspectedClient = string.Empty;
                    string strInspectedClientAddress = string.Empty;
                    string strManufacturer = string.Empty;
                    string strManufacturerAddress = string.Empty;
                    string strContactName = string.Empty;
                    string strContactPhone = string.Empty;
                    string strContactEmail = string.Empty;
                    string strTradeMark = string.Empty;
                    string strSampleQty = string.Empty;
                    string strSampleName = string.Empty;
                    string strModelNumber = string.Empty;
                    string strInspectionCategory = string.Empty;
                    string strInspectionStandard = string.Empty;
                    string strBeforeRequestedDateYearCaption = string.Empty;
                    string strRequestedDateYearCaption = string.Empty;
                    string strRequestedDateMonthCaption = string.Empty;
                    string strRequestedDateDayCaption = string.Empty;
                    string strClientNameCaption = string.Empty;
                    string strClientAddressCaption = string.Empty;
                    string strProjectIDCaption = string.Empty;
                    string strInspectedClientCaption = string.Empty;
                    string strInspectedClientAddressCaption = string.Empty;
                    string strManufacturerCaption = string.Empty;
                    string strManufacturerAddressCaption = string.Empty;
                    string strContactCaption = string.Empty;
                    string strContactPhoneCaption = string.Empty;
                    string strContactEmailCaption = string.Empty;
                    string strSampleNameCaption = string.Empty;
                    string strTradeMarkCaption = string.Empty;
                    string strSampleQtyCaption = string.Empty;
                    ////string strInspectionCategoryCaption = "检验类别";
                    ////string strModelNumberCaption = "样品型号/规格";
                    ////string strInspectionStandardCaption = "检验依据";
                    //////string strInspectionRequirementsCaption = @"检验项目及要求全项 / 部分项目(注明具体章节号)";
                    //////string strInspectionRequirementsCaption = @"检验项目及要求全项 /";
                    ////string strInspectionRequirementsCaption = @"检验项目及要求";
                    if (objLanguage.strcurlanguage == "En")
                    {
                        ////strBeforeRequestedDateYearCaption = "";
                        ////strRequestedDateYearCaption = "年";
                        ////strRequestedDateMonthCaption = "月";
                        ////strRequestedDateDayCaption = "日";
                        strClientNameCaption = "ClientName";
                        strClientAddressCaption = "ClientAddress";
                        strProjectIDCaption = "ProjectID";
                        strInspectedClientCaption = "制造商";
                        strInspectedClientAddressCaption = "制造商地址";
                        strManufacturerCaption = "生产厂";
                        strManufacturerAddressCaption = "生产厂地址";
                        strContactCaption = "Contact";
                        strContactPhoneCaption = "ContactPhone";
                        strContactEmailCaption = "ContactEmail";
                        strSampleNameCaption = "SampleName";
                        strTradeMarkCaption = "商标";
                        strSampleQtyCaption = "样品数量";
                    }
                    else
                    {
                        strBeforeRequestedDateYearCaption = "（委托检验合同）";
                        strRequestedDateYearCaption = "年";
                        strRequestedDateMonthCaption = "月";
                        strRequestedDateDayCaption = "日";
                        strClientNameCaption = "委托单位";
                        strClientAddressCaption = "委托单位地址";
                        strProjectIDCaption = "委托单编号：";
                        strInspectedClientCaption = "制造商";
                        strInspectedClientAddressCaption = "制造商地址";
                        strManufacturerCaption = "生产厂";
                        strManufacturerAddressCaption = "生产厂地址";
                        strContactCaption = "联系人";
                        strContactPhoneCaption = "联系电话（手机）";
                        strContactEmailCaption = "E-mail";
                        strSampleNameCaption = "样品名称";
                        strTradeMarkCaption = "商标";
                        strSampleQtyCaption = "样品数量";
                    }


                    //string text = System.IO.File.ReadAllText(strExportedPath.ToString());

                    using (DocumentFormat.OpenXml.Packaging.WordprocessingDocument doc = DocumentFormat.OpenXml.Packaging.WordprocessingDocument.Open(strExportedPath.ToString(), false))
                    {
                        strTotalText = doc.MainDocumentPart.Document.Body.InnerText;
                    }

                    //using (WordDocument document = new WordDocument(strExportedPath.ToString()))
                    //{
                    //    string text = document.GetText().Replace("",string.Empty);
                    //}

                    //Microsoft.Office.Interop.Word.Application word = new Microsoft.Office.Interop.Word.Application();
                    //object miss = System.Reflection.Missing.Value;
                    //object readOnly = true;
                    //if (word != null)
                    //{
                    //    //Microsoft.Office.Interop.Word.Document docs = word.Documents.Open(ref strExportedPath, ref miss, ref readOnly, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss, ref miss);
                    //    Microsoft.Office.Interop.Word.Document docs = word.Documents.Open(ref strExportedPath,ref miss, ref readOnly);

                    //    if (docs != null)
                    //    {
                    //        strTotalText = docs.Content.Text;
                    //        //strTotalText = docs.Content.FormattedText.Text;
                    //        //for (int i = 0; i < docs.Paragraphs.Count; i++)
                    //        //{
                    //        //    strTotalText += docs.Paragraphs[i + 1].Range.Text.ToString();
                    //        //}

                    //        //docs.Close();
                    //    }
                    //    //word.Quit();
                    //}

                    //string strPattern = @"[\\r|\\n|\\t|\\a]";
                    //string strPattern = @"(?:\r\n|\n|\r|\r\n\a)";
                    string strPattern = @"(?:\r|\n|\a|\t)";
                    strTotalText = System.Text.RegularExpressions.Regex.Replace(strTotalText, strPattern, string.Empty);

                    int pRequestedDateYearFrom = strTotalText.IndexOf(strBeforeRequestedDateYearCaption) + strBeforeRequestedDateYearCaption.Length;
                    int pRequestedDateYearTo = strTotalText.IndexOf(strRequestedDateYearCaption);

                    if (pRequestedDateYearFrom != -1 && pRequestedDateYearTo != -1)
                    {
                        strRequestedDateYear = strTotalText.Substring(pRequestedDateYearFrom, pRequestedDateYearTo - pRequestedDateYearFrom).Trim();
                    }

                    int pRequestedDateMonthFrom = strTotalText.IndexOf(strRequestedDateYearCaption) + strRequestedDateYearCaption.Length;
                    int pRequestedDateMonthTo = strTotalText.IndexOf(strRequestedDateMonthCaption);

                    if (pRequestedDateMonthFrom != -1 && pRequestedDateMonthTo != -1)
                    {
                        strRequestedDateMonth = strTotalText.Substring(pRequestedDateMonthFrom, pRequestedDateMonthTo - pRequestedDateMonthFrom).Trim();
                    }

                    int pRequestedDateDayFrom = strTotalText.IndexOf(strRequestedDateMonthCaption) + strRequestedDateMonthCaption.Length;
                    int pRequestedDateDayTo = strTotalText.IndexOf(strRequestedDateDayCaption);

                    if (pRequestedDateDayFrom != -1 && pRequestedDateDayTo != -1)
                    {
                        strRequestedDateDay = strTotalText.Substring(pRequestedDateDayFrom, pRequestedDateDayTo - pRequestedDateDayFrom).Trim();
                    }

                    int pProjectIDFrom = strTotalText.IndexOf(strProjectIDCaption) + strProjectIDCaption.Length;
                    int pProjectIDTo = strTotalText.IndexOf(strClientNameCaption);

                    if (pProjectIDFrom != -1 && pProjectIDTo != -1)
                    {
                        strProjectID = strTotalText.Substring(pProjectIDFrom, pProjectIDTo - pProjectIDFrom).Trim();
                    }

                    int pClientNameFrom = strTotalText.IndexOf(strClientNameCaption) + strClientNameCaption.Length;
                    int pClientNameTo = strTotalText.IndexOf(strClientAddressCaption);

                    if (pClientNameFrom != -1 && pClientNameTo != -1)
                    {
                        strClientName = strTotalText.Substring(pClientNameFrom, pClientNameTo - pClientNameFrom).Trim();
                    }

                    int pClientAddressFrom = strTotalText.IndexOf(strClientAddressCaption) + strClientAddressCaption.Length;
                    int pClientAddressTo = strTotalText.IndexOf(strInspectedClientCaption);

                    if (pClientAddressFrom != -1 && pClientAddressTo != -1)
                    {
                        strClientAddress = strTotalText.Substring(pClientAddressFrom, pClientAddressTo - pClientAddressFrom).Trim();
                    }

                    int pInspectedClientFrom = strTotalText.IndexOf(strInspectedClientCaption) + strInspectedClientCaption.Length;
                    int pInspectedClientTo = strTotalText.IndexOf(strInspectedClientAddressCaption);

                    if (pInspectedClientFrom != -1 && pInspectedClientTo != -1)
                    {
                        strInspectedClient = strTotalText.Substring(pInspectedClientFrom, pInspectedClientTo - pInspectedClientFrom).Trim();
                    }

                    int pInspectedClientAddressFrom = strTotalText.IndexOf(strInspectedClientAddressCaption) + strInspectedClientAddressCaption.Length;
                    int pInspectedClientAddressTo = strTotalText.IndexOf(strManufacturerCaption);

                    if (pInspectedClientAddressFrom != -1 && pInspectedClientAddressTo != -1)
                    {
                        strInspectedClientAddress = strTotalText.Substring(pInspectedClientAddressFrom, pInspectedClientAddressTo - pInspectedClientAddressFrom).Trim();
                    }

                    int pManufacturerFrom = strTotalText.IndexOf(strManufacturerCaption) + strManufacturerCaption.Length;
                    int pManufacturerTo = strTotalText.IndexOf(strManufacturerAddressCaption);

                    if (pManufacturerFrom != -1 && pManufacturerTo != -1)
                    {
                        strManufacturer = strTotalText.Substring(pManufacturerFrom, pManufacturerTo - pManufacturerFrom).Trim();
                    }

                    int pManufacturerAddressFrom = strTotalText.IndexOf(strManufacturerAddressCaption) + strManufacturerAddressCaption.Length;
                    int pManufacturerAddressTo = strTotalText.IndexOf(strContactCaption);

                    if (pManufacturerAddressFrom != -1 && pManufacturerAddressTo != -1)
                    {
                        strManufacturerAddress = strTotalText.Substring(pManufacturerAddressFrom, pManufacturerAddressTo - pManufacturerAddressFrom).Trim();
                    }

                    int pContactFrom = strTotalText.IndexOf(strContactCaption) + strContactCaption.Length;
                    int pContactTo = strTotalText.IndexOf(strContactPhoneCaption);

                    if (pContactFrom != -1 && pContactTo != -1)
                    {
                        strContactName = strTotalText.Substring(pContactFrom, pContactTo - pContactFrom).Trim();
                    }

                    int pContactPhoneFrom = strTotalText.IndexOf(strContactPhoneCaption) + strContactPhoneCaption.Length;
                    int pContactPhoneTo = strTotalText.IndexOf(strContactEmailCaption);

                    if (pContactPhoneFrom != -1 && pContactPhoneTo != -1)
                    {
                        strContactPhone = strTotalText.Substring(pContactPhoneFrom, pContactPhoneTo - pContactPhoneFrom).Trim();
                    }

                    int pContactEmailFrom = strTotalText.IndexOf(strContactEmailCaption) + strContactEmailCaption.Length;
                    int pContactEmailTo = strTotalText.IndexOf(strSampleNameCaption);

                    if (pContactEmailFrom != -1 && pContactEmailTo != -1)
                    {
                        strContactEmail = strTotalText.Substring(pContactEmailFrom, pContactEmailTo - pContactEmailFrom).Trim();
                    }

                    int pSampleNameFrom = strTotalText.IndexOf(strSampleNameCaption) + strSampleNameCaption.Length;
                    int pSampleNameTo = strTotalText.IndexOf(strTradeMarkCaption);

                    if (pSampleNameFrom != -1 && pSampleNameTo != -1)
                    {
                        strSampleName = strTotalText.Substring(pSampleNameFrom, pSampleNameTo - pSampleNameFrom).Trim();
                    }

                    int pTradeMarkFrom = strTotalText.IndexOf(strTradeMarkCaption) + strTradeMarkCaption.Length;
                    int pTradeMarkTo = strTotalText.IndexOf(strSampleQtyCaption);

                    if (pTradeMarkFrom != -1 && pTradeMarkTo != -1)
                    {
                        strTradeMark = strTotalText.Substring(pTradeMarkFrom, pTradeMarkTo - pTradeMarkFrom).Trim();
                    }

                    ////int pSampleQtyFrom = strTotalText.IndexOf(strSampleQtyCaption) + strSampleQtyCaption.Length;
                    ////int pSampleQtyTo = strTotalText.IndexOf(strModelNumberCaption);

                    ////if (pSampleQtyFrom != -1 && pSampleQtyTo != -1)
                    ////{
                    ////    strSampleQty = strTotalText.Substring(pSampleQtyFrom, pSampleQtyTo - pSampleQtyFrom).Trim();
                    ////}

                    ////int pModeNoFrom = strTotalText.IndexOf(strModelNumberCaption) + strModelNumberCaption.Length;
                    ////int pModelNoTo = strTotalText.IndexOf(strInspectionCategoryCaption);

                    ////if (pModeNoFrom != -1 && pModelNoTo != -1)
                    ////{
                    ////    strModelNumber = strTotalText.Substring(pModeNoFrom, pModelNoTo - pModeNoFrom).Trim();
                    ////}

                    ////int pInspectionCategoryFrom = strTotalText.IndexOf(strInspectionCategoryCaption) + strInspectionCategoryCaption.Length;
                    ////int pInspectionCategoryTo = strTotalText.IndexOf(strInspectionStandardCaption);

                    ////if (pInspectionCategoryFrom != -1 && pInspectionCategoryTo != -1)
                    ////{
                    ////    strInspectionCategory = strTotalText.Substring(pInspectionCategoryFrom, pInspectionCategoryTo - pInspectionCategoryFrom).Trim();
                    ////}

                    ////int pInspectionStandardFrom = strTotalText.IndexOf(strInspectionStandardCaption) + strInspectionStandardCaption.Length;
                    ////int pInspectionStandardTo = strTotalText.IndexOf(strInspectionRequirementsCaption);

                    ////if (pInspectionStandardFrom != -1 && pInspectionStandardTo != -1)
                    ////{
                    ////    strInspectionStandard = strTotalText.Substring(pInspectionStandardFrom, pInspectionStandardTo - pInspectionStandardFrom).Trim();
                    ////}
                    bool isNew = false;
                    bool isDashboard = false;
                    Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin = null;
                    DashboardViewItem dvSampleCheckin = null;
                    DetailView dv = null;
                    IObjectSpace os = Application.CreateObjectSpace();

                    if (View is DashboardView)
                    {
                        isDashboard = true;
                        dvSampleCheckin = ((DashboardView)View).FindItem("SampleCheckin") as DashboardViewItem;
                        if (dvSampleCheckin != null && dvSampleCheckin.InnerView is DetailView)
                        {
                            dv = dvSampleCheckin.InnerView as DetailView;
                            if (dv != null && dv.CurrentObject != null)
                            {
                                //objsamplecheckin = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Modules.BusinessObjects.SampleManagement.Samplecheckin)dv.CurrentObject);
                                objsamplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)dv.CurrentObject;
                            }
                        }
                    }
                    else
                    if (View is DetailView)
                    {
                        dv = View as DetailView;
                        objsamplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)View.CurrentObject;
                        //objsamplecheckin = os.GetObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>((Modules.BusinessObjects.SampleManagement.Samplecheckin)View.CurrentObject);
                        if (View.ObjectSpace.IsNewObject(objsamplecheckin))
                        {
                            objsamplecheckin = os.CreateObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>();
                            isNew = true;
                        }
                    }

                    //if (objsamplecheckin == null && !isDashboard)
                    //{
                    //    objsamplecheckin = os.CreateObject<Modules.BusinessObjects.SampleManagement.Samplecheckin>();
                    //    isNew = true;
                    //}
                    //else if (objsamplecheckin != null && !isDashboard)
                    //{
                    //    objsamplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)View.CurrentObject;
                    //}
                    //else if (objsamplecheckin != null && isDashboard && dvSampleCheckin != null)
                    //{
                    //    objsamplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)dv.CurrentObject;
                    //}

                    if (objsamplecheckin != null)
                    {
                        ////objsamplecheckin.InspectedClient = strInspectedClient;
                        ////objsamplecheckin.InspectedClientAddress = strInspectedClientAddress;
                        objsamplecheckin.Manufacturer = strManufacturer;
                        objsamplecheckin.ManufacturerAddress = strManufacturerAddress;
                        objsamplecheckin.TradeMark = strTradeMark;
                        objsamplecheckin.SampleName = strSampleName;
                        objsamplecheckin.ModelNumber = strModelNumber;
                        objsamplecheckin.InspectionStandard = strInspectionStandard;

                        ////if (!string.IsNullOrEmpty(strSampleQty))
                        ////{
                        ////    objsamplecheckin.SampleQuantity = Convert.ToInt32(strSampleQty);
                        ////}

                        if (!string.IsNullOrEmpty(strRequestedDateYear) && !string.IsNullOrEmpty(strRequestedDateMonth) && !string.IsNullOrEmpty(strRequestedDateDay))
                        {
                            DateTime requestedDate = new DateTime(Convert.ToInt32(strRequestedDateYear), Convert.ToInt32(strRequestedDateMonth), Convert.ToInt32(strRequestedDateDay));
                            if (requestedDate != DateTime.MinValue)
                            {
                                objsamplecheckin.DateRequested = requestedDate;
                            }
                        }

                        if (!string.IsNullOrEmpty(strClientName))
                        {
                            Modules.BusinessObjects.Crm.Customer objClient = dv.ObjectSpace.FindObject<Modules.BusinessObjects.Crm.Customer>(CriteriaOperator.Parse("[CustomerName] = ?", strClientName));
                            if (objClient != null)
                            {
                                if (isNew)
                                {
                                    objsamplecheckin.ClientName = os.GetObject<Modules.BusinessObjects.Crm.Customer>(objClient);
                                }
                                else
                                {
                                    objsamplecheckin.ClientName = objClient;
                                }
                            }
                            else
                            {
                                IObjectSpace clientos = Application.CreateObjectSpace();
                                objClient = clientos.CreateObject<Modules.BusinessObjects.Crm.Customer>();
                                objClient.CustomerName = strClientName;
                                objClient.Address = strClientAddress;
                                clientos.CommitChanges();
                                if (isNew)
                                {
                                    objsamplecheckin.ClientName = os.GetObject<Modules.BusinessObjects.Crm.Customer>(objClient);
                                }
                                else
                                {
                                    ASPxGridLookupPropertyEditor lookup = dv.FindItem("ClientName") as ASPxGridLookupPropertyEditor;
                                    if (lookup != null)
                                    {
                                        lookup.RefreshDataSource();
                                    }
                                    objsamplecheckin.ClientName = dv.ObjectSpace.GetObject<Modules.BusinessObjects.Crm.Customer>(objClient);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(strInspectionCategory))
                        {
                            Modules.BusinessObjects.Assets.InspectCategory objInspectionCategory = dv.ObjectSpace.FindObject<Modules.BusinessObjects.Assets.InspectCategory>(CriteriaOperator.Parse("[Name] = ?", strInspectionCategory));
                            if (objInspectionCategory != null)
                            {
                                if (isNew)
                                {
                                    objsamplecheckin.InspectionCategory = os.GetObject<Modules.BusinessObjects.Assets.InspectCategory>(objInspectionCategory);
                                }
                                else
                                {
                                    objsamplecheckin.InspectionCategory = objInspectionCategory;
                                }
                            }
                            else
                            {
                                IObjectSpace catos = Application.CreateObjectSpace();
                                objInspectionCategory = catos.CreateObject<Modules.BusinessObjects.Assets.InspectCategory>();
                                objInspectionCategory.Name = strInspectionCategory;
                                catos.CommitChanges();
                                if (isNew)
                                {
                                    objsamplecheckin.InspectionCategory = os.GetObject<Modules.BusinessObjects.Assets.InspectCategory>(objInspectionCategory);
                                }
                                else
                                {
                                    objsamplecheckin.InspectionCategory = dv.ObjectSpace.GetObject<Modules.BusinessObjects.Assets.InspectCategory>(objInspectionCategory);
                                }
                            }
                        }

                        if (!string.IsNullOrEmpty(strProjectID))
                        {
                            Modules.BusinessObjects.Setting.Project objProject = dv.ObjectSpace.FindObject<Modules.BusinessObjects.Setting.Project>(CriteriaOperator.Parse("[ProjectId] = ?", strProjectID));
                            if (objProject != null)
                            {
                                if (isNew)
                                {
                                    objsamplecheckin.ProjectID = os.GetObject<Modules.BusinessObjects.Setting.Project>(objProject);
                                }
                                else
                                {
                                    objsamplecheckin.ProjectID = objProject;
                                }
                            }
                            else
                            {
                                IObjectSpace projectos = Application.CreateObjectSpace();
                                objProject = projectos.CreateObject<Modules.BusinessObjects.Setting.Project>();
                                objProject.ProjectId = strProjectID;
                                projectos.CommitChanges();
                                if (isNew)
                                {
                                    objsamplecheckin.ProjectID = os.GetObject<Modules.BusinessObjects.Setting.Project>(objProject);
                                }
                                else
                                {
                                    ASPxGridLookupPropertyEditor lookup = dv.FindItem("ProjectID") as ASPxGridLookupPropertyEditor;
                                    if (lookup != null)
                                    {
                                        lookup.RefreshDataSource();
                                    }
                                    objsamplecheckin.ProjectID = dv.ObjectSpace.GetObject<Modules.BusinessObjects.Setting.Project>(objProject);
                                }
                            }
                        }

                        if (isNew)
                        {
                            DetailView view = Application.CreateDetailView(os, "Samplecheckin_DetailView_Copy_SampleRegistration", true, objsamplecheckin);
                            view.ViewEditMode = DevExpress.ExpressApp.Editors.ViewEditMode.Edit;
                            Frame.SetView(view);
                        }
                        else
                        {
                            dv.Refresh();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>()
                    .InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void Save()
        {
            try
            {
                if (View != null && View.CurrentObject != null && (View.Id == "Samplecheckin_DetailView_Copy_SampleRegistration" || View.Id == "Samplecheckin_DetailView_Copy_RegistrationSigningOff"))
                {
                    //ListPropertyEditor liDueDate = ((DetailView)View).FindItem("CustomDueDates") as ListPropertyEditor;
                    //if (liDueDate != null && liDueDate.ListView != null)
                    //{
                    //    ASPxGridListEditor editor = (liDueDate.ListView).Editor as ASPxGridListEditor;
                    //    if (editor != null && editor.Grid != null)
                    //    {
                    //        editor.Grid.UpdateEdit();
                    //    }
                    //}
                    Samplecheckin objSamplecheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                    if (objSamplecheckin != null)
                    {
                        CNInfo.SCJobId = objSamplecheckin.JobID;
                        if (objSamplecheckin.SampleMatries != null)
                        {
                            //List<VisualMatrix> lstVM = new List<VisualMatrix>();
                            foreach (string strMatrix in objSamplecheckin.SampleMatries.Split(';'))
                            {
                                VisualMatrix objSM = ObjectSpace.GetObjectByKey<VisualMatrix>(new Guid(strMatrix));
                                if (objSM != null)
                                {
                                    //lstVM.Add(objSM);
                                    CNInfo.SCSampleMatries = string.Join(";", objSM.VisualMatrixName);
                                }
                            }
                        }

                    }
                    //HttpContext.Current.Session["Test"] = objSamplecheckin.NPTest;
                    //if (objSCInfo.lstTestOid != null && objSCInfo.lstTestOid.Count > 0)
                    //{
                    //    objSCInfo.lstTestOid.Clear();
                    //}
                    //if (HttpContext.Current.Session["Test"] != null)
                    //{
                    //    string[] TestOid = HttpContext.Current.Session["Test"].ToString().Split(new string[] { ";" }, StringSplitOptions.None);

                    //    if (TestOid != null && TestOid.Count() > 0)
                    //    {
                    //        foreach (string strTest in TestOid)
                    //        {
                    //            List<string> lstTestName = strTest.Split('_').ToList();
                    //            if (lstTestName.Count == 2)
                    //            {
                    //                IList<TestMethod> lstTests = ObjectSpace.GetObjects<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [MethodName.MethodNumber] = ?", lstTestName[0], lstTestName[1]));
                    //                if (objSCInfo.lstTestOid == null)
                    //                {
                    //                    objSCInfo.lstTestOid = new List<Guid>();
                    //                    foreach (TestMethod obj in lstTests.ToList())
                    //                    {
                    //                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                    //                        {
                    //                            objSCInfo.lstTestOid.Add(obj.Oid);
                    //                        }
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    foreach (TestMethod obj in lstTests.ToList())
                    //                    {
                    //                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                    //                        {
                    //                            objSCInfo.lstTestOid.Add(obj.Oid);
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //            else if (lstTestName.Count == 1)
                    //            {
                    //                IList<TestMethod> lstTests = ObjectSpace.GetObjects<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup] = true", lstTestName[0]));
                    //                if (objSCInfo.lstTestOid == null)
                    //                {
                    //                    objSCInfo.lstTestOid = new List<Guid>();
                    //                    foreach (TestMethod obj in lstTests.ToList())
                    //                    {
                    //                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                    //                        {
                    //                            objSCInfo.lstTestOid.Add(obj.Oid);
                    //                        }
                    //                    }
                    //                }
                    //                else
                    //                {
                    //                    foreach (TestMethod obj in lstTests.ToList())
                    //                    {
                    //                        if (!objSCInfo.lstTestOid.Contains(obj.Oid))
                    //                        {
                    //                            objSCInfo.lstTestOid.Add(obj.Oid);
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //        }
                    //        //if (objSCInfo.lstTestOid == null)
                    //        //{
                    //        //    objSCInfo.lstTestOid = new List<Guid>();

                    //        //    for (int i = 0; i <= TestOid.Length - 1; i++)
                    //        //    {
                    //        //        if (!string.IsNullOrEmpty(TestOid[i]))
                    //        //        {
                    //        //            objSCInfo.lstTestOid.Add(new Guid(TestOid[i]));
                    //        //        }
                    //        //    }
                    //        //}
                    //        //else
                    //        //{
                    //        //    objSCInfo.lstTestOid.Clear();
                    //        //    for (int i = 0; i <= TestOid.Length - 1; i++)
                    //        //    {
                    //        //        if (!string.IsNullOrEmpty(TestOid[i]))
                    //        //        {
                    //        //            objSCInfo.lstTestOid.Add(new Guid(TestOid[i]));
                    //        //        }
                    //        //    }
                    //        //}
                    //    }
                    //    if (objSCInfo.lstTestOid != null && objSCInfo.lstTestOid.Count > 0)
                    //    {
                    //        foreach (string val in objSCInfo.lstTestOid.Select(i => i.ToString()).ToList())
                    //        {
                    //            if (!string.IsNullOrEmpty(val))
                    //            {
                    //                TestMethod objTestMethod = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[Oid] = ?", new Guid(val)));
                    //                if (objTestMethod != null && objSamplecheckin.CustomDueDates.FirstOrDefault(i => i.TestMethod != null && i.TestMethod.Oid == new Guid(val) && i.TestMethod.TestName == objTestMethod.TestName) == null)
                    //                {
                    //                    CustomDueDate objDate = ObjectSpace.CreateObject<CustomDueDate>();
                    //                    objDate.TestMethod = objTestMethod;
                    //                    objDate.SampleCheckin = objSamplecheckin;
                    //                    objDate.Parameter = "AllParam";
                    //                }
                    //            }
                    //        }
                    //    }
                    //    ObjectSpace.CommitChanges();
                    //    IList<CustomDueDate> lstDuedate = ObjectSpace.GetObjects<CustomDueDate>(CriteriaOperator.Parse("[SampleCheckin.Oid]=?", objSamplecheckin.Oid));
                    //    if (lstDuedate.Count != TestOid.Count())
                    //    {
                    //        bool isTrue = false;
                    //        foreach (CustomDueDate obj in lstDuedate.ToList())
                    //        {
                    //            foreach (string val in TestOid)
                    //            {
                    //                List<String> lstTestOid = val.Split(',').ToList();
                    //                if (lstTestOid.Count == 2)
                    //                {
                    //                    TestMethod objTestMethod = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [MethodName.MethodNumber] = ?", lstTestOid[0], lstTestOid[1]));
                    //                    if (!string.IsNullOrEmpty(val) && obj.TestMethod != null && objTestMethod != null && obj.TestMethod.Oid == objTestMethod.Oid)
                    //                    {
                    //                        isTrue = true;
                    //                    }
                    //                }
                    //                else if (lstTestOid.Count == 1)
                    //                {
                    //                    TestMethod objTestMethod = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup]= true", lstTestOid[0]));
                    //                    if (!string.IsNullOrEmpty(val) && obj.TestMethod != null && objTestMethod != null && obj.TestMethod.Oid == objTestMethod.Oid)
                    //                    {
                    //                        isTrue = true;
                    //                    }
                    //                }
                    //            }
                    //            if (!isTrue)
                    //            {
                    //                ObjectSpace.Delete(obj);
                    //                ObjectSpace.CommitChanges();
                    //            }
                    //            isTrue = false;
                    //        }
                    //    }
                    //}
                    Session currentSession = ((XPObjectSpace)this.ObjectSpace).Session;
                    UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    //IObjectSpace os = Application.CreateObjectSpace();
                    //List<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstobjSample = uow.Query<Modules.BusinessObjects.SampleManagement.SampleLogIn>().Where(i => i.JobID != null && i.JobID.Oid == objSamplecheckin.Oid).ToList();
                    //if (lstobjSample.Count > 0 && View.ObjectSpace.ModifiedObjects.Count > 0)
                    //{
                    //    lstobjSample.ToList().ForEach(i => { i.BalanceID.AssignedName = objSamplecheckin.BalanceID != null ? objSamplecheckin.BalanceID.AssignedName :null; i.BatchID = objSamplecheckin.BatchID; i.PackageNumber = objSamplecheckin.PackageNo; });
                    //    //foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objsample in lstobjSample.ToList())
                    //    //{
                    //    //    if (objSamplecheckin.BalanceID != null)
                    //    //    {
                    //    //        objsample.BalanceID.AssignedName = objSamplecheckin.BalanceID.AssignedName;
                    //    //    }
                    //    //    else
                    //    //    {
                    //    //        objsample.BalanceID = null;
                    //    //    }
                    //    //    objsample.BatchID = objSamplecheckin.BatchID;
                    //    //    objsample.PackageNumber = objSamplecheckin.PackageNo;
                    //    //}
                    //}
                    ReminderActivity objActivity = uow.FindObject<ReminderActivity>(CriteriaOperator.Parse("JobID='" + objSamplecheckin.Oid + "'"));
                    objSamplecheckin = uow.GetObjectByKey<Samplecheckin>(objSamplecheckin.Oid);
                    if (objActivity == null)
                    {
                        ReminderActivity objAct = new ReminderActivity(uow);
                        objAct.JobID = objSamplecheckin;
                        objAct.StartOn = Convert.ToDateTime(objSamplecheckin.DueDate);
                        objAct.EndOn = Convert.ToDateTime(objSamplecheckin.DueDate);
                        objAct.Subject = objSamplecheckin.JobID + ", " + objSamplecheckin.ClientName.CustomerName;
                        objAct.AllDay = false;


                    }
                    else
                    {
                        objActivity.StartOn = Convert.ToDateTime(objSamplecheckin.DueDate);
                        objActivity.EndOn = Convert.ToDateTime(objSamplecheckin.DueDate);
                        objActivity.Subject = objSamplecheckin.JobID + ", " + objSamplecheckin.ClientName.CustomerName;
                    }
                    uow.CommitChanges();
                }
                //Frame.GetController<RegistrationSignOffController>().PendingSigningOffJobIDCount();

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        //public void SuboutCount()
        //{
        //    try
        //    {
        //        ShowNavigationItemController ShowNavigationController = Application.MainWindow.GetController<ShowNavigationItemController>();
        //        ChoiceActionItem parentSubout = ShowNavigationController.ShowNavigationItemAction.Items.FirstOrDefault(i => i.Id == "SampleSubOutTracking");
        //        if (parentSubout!=null && parentSubout.Id == "SampleSubOutTracking" && parentSubout.Active == true)
        //        {
        //            ChoiceActionItem childSubout = parentSubout.Items.FirstOrDefault(i => i.Id == "SuboutSampleRegistration");
        //            if (childSubout != null && childSubout.Active == true)
        //            {
        //                IObjectSpace objectSpace = Application.CreateObjectSpace();
        //                IList<SampleParameter> objParam = objectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[SubOut] = True And [SuboutSample] Is Null And [Samplelogin] Is Not Null And [Testparameter] Is Not Null And [Testparameter.Parameter] Is Not Null And Not IsNullOrEmpty([Testparameter.Parameter.ParameterName])"));
        //                if (objParam != null && objParam.Count > 0)
        //                {
        //                    var count = objParam.Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).GroupBy(i => i.Testparameter.TestMethod.Oid).Distinct().Count();
        //                    var cap = childSubout.Caption.Split(new string[] { " (" }, StringSplitOptions.None);
        //                    if (count > 0)
        //                    {
        //                        childSubout.Caption = cap[0] + " (" + count + ")";
        //                    }
        //                    else
        //                    {
        //                        childSubout.Caption = cap[0];
        //                    }
        //                }
        //                objectSpace.Dispose();
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    }
        //}
        private void ImageEditPreviewAction_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View != null && View.Id == "Samplecheckin_ImageUpload_ListView" && e.CurrentObject != null)
                {
                    Modules.BusinessObjects.Setting.Image objUpload = (Modules.BusinessObjects.Setting.Image)e.CurrentObject;

                    if (objUpload != null)
                    {
                        IObjectSpace imagePreviewObjectSpace = Application.CreateObjectSpace();
                        Modules.BusinessObjects.Setting.Image previewImage = imagePreviewObjectSpace.GetObject<Modules.BusinessObjects.Setting.Image>(objUpload);
                        DetailView dv = Application.CreateDetailView(imagePreviewObjectSpace, "Image_DetailView_ImageEditPreview", false, previewImage);
                        ShowViewParameters showViewParameters = new ShowViewParameters(dv);
                        showViewParameters.Context = TemplateContext.NestedFrame;
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.AcceptAction.Active.SetItemValue("disable", false);
                        dc.CancelAction.Active.SetItemValue("disable", false);
                        dc.CloseOnCurrentObjectProcessing = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>()
                   .InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void SRHistory_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                IObjectSpace os = Application.CreateObjectSpace();
                if (View.Id == "Samplecheckin_ListView_Copy_Registration")
                {
                    CollectionSource cs = new CollectionSource(os, typeof(Samplecheckin));
                    IList<SampleParameter> samples = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[InvoicingAnalysisCharge.Invoice.Status] = 'Delivered' And([InvoiceIsDone] = True)"));
                    if (samples.Count > 0)
                    {
                        cs.Criteria["Filter"] = new InOperator("Oid", samples.Where(i => i.Samplelogin != null && i.Samplelogin.JobID != null).Select(i => i.Samplelogin.JobID.Oid).Distinct().ToList());
                    }
                    ListView lstSRhistory = Application.CreateListView("Samplecheckin_ListView_Copy_Registration_History", cs, true);
                    Frame.SetView(lstSRhistory);
                }
                //else if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                //{
                //    CollectionSource cs = new CollectionSource(os, typeof(Samplecheckin));
                //    ListView lstSRhistory = Application.CreateListView("Samplecheckin_ListView_SampleReceiptNotification_History", cs, true);
                //    Frame.SetView(lstSRhistory);
                //}

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>()
                   .InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void COCAttachPreview_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            //Modules.BusinessObjects.SampleManagement.Samplecheckin samplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)e.CurrentObject;
            //if (samplecheckin != null && samplecheckin.Attachments != null)
            //{
            //    IObjectSpace objectSpace = Application.CreateObjectSpace();
            //    CollectionSource cs = new CollectionSource(objectSpace, typeof(Modules.BusinessObjects.ContractManagement.Attachment));
            //    cs.Criteria["Filter"] = CriteriaOperator.Parse("[Samplecheckin] = ?", samplecheckin.Oid);
            //    ListView lvtestparar = Application.CreateListView("Samplecheckin_Attachments_ListView_ReceiptNotification", cs, false);
            //    ShowViewParameters showViewParameters = new ShowViewParameters(lvtestparar);
            //    showViewParameters.CreatedView = lvtestparar;
            //    showViewParameters.Context = TemplateContext.PopupWindow;
            //    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
            //    //showViewParameters.CreatedView.Caption= "Attach";
            //    DialogController dc = Application.CreateController<DialogController>();
            //    dc.SaveOnAccept = false;
            //    dc.CancelAction.Active.SetItemValue("Cancel", false);
            //    dc.AcceptAction.Active.SetItemValue("Ok", false);
            //    dc.CloseOnCurrentObjectProcessing = false;
            //    showViewParameters.Controllers.Add(dc);
            //    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
            //}

        }

        private void SentMail_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {

                if (View.SelectedObjects.Count > 0)
                {
                    IObjectSpace objSpace = Application.CreateObjectSpace();
                    foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin in e.SelectedObjects)
                    {
                        if (objsamplecheckin != null && objsamplecheckin.Email != null)
                        {
                            if (objsamplecheckin.JobID != null)
                            {
                                Sendmail(objsamplecheckin);
                                ObjectSpace.CommitChanges();
                                ObjectSpace.Refresh();
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "mailsendsuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                            }
                            else
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "mailnotsent"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                                return;
                            }
                        }
                        else if (objsamplecheckin.Email == null)
                        {
                            Application.ShowViewStrategy.ShowMessage("Email was should not be empty.", InformationType.Error, 3000, InformationPosition.Top);
                        }


                        //else
                        //{
                        //    Application.ShowViewStrategy.ShowMessage("Mail content was should not be empty.", InformationType.Error, 3000, InformationPosition.Top);
                        //}
                    }
                }
                #region previuos logic
                //if (View.SelectedObjects.Count > 0)
                //{
                //    IObjectSpace objSpace = Application.CreateObjectSpace();
                //    foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin in e.SelectedObjects)
                //    {
                //        SmtpClient sc = new SmtpClient();
                //        Employee currentUser = SecuritySystem.CurrentUser as Employee;
                //        Employee objDefaultEmp = View.ObjectSpace.FindObject<Employee>(CriteriaOperator.Parse("SampleRegistrationDefault = True"));

                //        string strlogUsername = ((AuthenticationStandardLogonParameters)SecuritySystem.LogonParameters).UserName;
                //        string strlogpassword = ((AuthenticationStandardLogonParameters)SecuritySystem.LogonParameters).Password;
                //        string strMailFromUserName = ((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailFromUserName"];
                //        string strSmtpHost = "Smtp.gmail.com";
                //        string strMailFromPassword = ((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailFromPassword"];
                //        int intPort = 25;
                //        bool EnableSSL = true;
                //        if (objDefaultEmp != null && objDefaultEmp.Email != null)
                //        {
                //            strMailFromUserName = objDefaultEmp.Email;
                //            strMailFromPassword = objDefaultEmp.Password;
                //            strSmtpHost = objDefaultEmp.MailServerName;
                //            intPort = objDefaultEmp.Port;
                //            EnableSSL = objDefaultEmp.EnableSSL;

                //        }
                //        else
                //        {
                //            strMailFromUserName = currentUser.Email;
                //            strMailFromPassword = currentUser.Password;
                //            strSmtpHost = currentUser.MailServerName;
                //            intPort = currentUser.Port;
                //            EnableSSL = currentUser.EnableSSL;
                //        }

                //        string strMailto = string.Empty;
                //        string strJobID = objsamplecheckin.JobID;


                //        //string FilePath = objFTP.GetDocument(strJobID);

                //        MailMessage message = new MailMessage();
                //        message.IsBodyHtml = true;
                //        message.From = new MailAddress(strMailFromUserName);
                //        eNotificationContentTemplate objEnct = objSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[SampleCheckin] =? ", objsamplecheckin.Oid));
                //        if (objEnct != null)
                //        {
                //            message.Subject = objEnct.Subject;
                //            string strBody = objEnct.Body;
                //            if (strBody.ToUpper().Contains("@JOBID"))
                //            {
                //                strBody = strBody.Replace("@JobID", strJobID);
                //            }
                //            if (strBody.ToUpper().Contains("@TAT"))
                //            {
                //                strBody = strBody.Replace("@TAT", objsamplecheckin.TAT.TAT);
                //            }
                //            message.Body = objEnct.Body;
                //            //System.Windows.Forms.RichTextBox rtBox = new System.Windows.Forms.RichTextBox();
                //            //rtBox.Rtf = strBody;
                //            //message.Body = rtBox.Text;
                //            //message.Subject = ("Confirmation email for ") + objsamplecheckin.JobID;//+"   "+"ReportedDate:"+objReport.ReportedDate;
                //            //message.Body = @"Good Day :<br>" + "We received and accepted samples for Project Number" + " " + strJobID + "<br>" +
                //            //                "TAT :" + objsamplecheckin.TAT.TAT + "<br> Please find out the attached COC. <br>" + "Have a nice day.";

                //            //    CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "Good") + Environment.NewLine
                //            //+ CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "Received and Accepted") + objsamplecheckin.JobID
                //            //+ Environment.NewLine + CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "TAT") + objsamplecheckin.TAT.TAT
                //            //+ Environment.NewLine + CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "COC") + objsamplecheckin.Attachments
                //            //+ Environment.NewLine + CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "Nice");
                //            //    message.Body = "Good Day:" + "\r\n" + "TAT:";
                //            //Contact con = objSpace.GetObject<Contact>(objsamplecheckin.ContactName);
                //        }
                //        if (objsamplecheckin != null && objsamplecheckin.Email != null)
                //        {
                //            message.To.Add(objsamplecheckin.Email);
                //            /*Attachment*/
                //            //ObjReportDesignerInfo.WebConfigFTPConn = ((NameValueCollection)System.Configuration.ConfigurationManager.GetSection("FTPConnectionStrings"))["FTPConnectionString"];
                //            //ReadXmlFile_FTPConc();
                //            //.Net.Ftp _FTP = GetFTPConnection();
                //            //string strRemotePath = ConfigurationManager.AppSettings["FinalReportPath"];
                //            //string strExportedPath = strRemotePath.Replace(@"\", "//") + objsamplecheckin.JobID + ".pdf";

                //            FileLinkSepDBController objfilelink = Frame.GetController<FileLinkSepDBController>();
                //            if (objfilelink != null)
                //            {
                //                IList<Modules.BusinessObjects.SampleManagement.Reporting> lstReporting = ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.Reporting>(CriteriaOperator.Parse("[JobID.JobID] = ?", objsamplecheckin.JobID));
                //                //if (_FTP.FileExists(strExportedPath))
                //                foreach (Modules.BusinessObjects.SampleManagement.Reporting objReport in lstReporting)
                //                {
                //                    DataTable dt = objfilelink.GetFileLink(objReport.ReportID);

                //                    // List<string> lstreport = new List<string>();
                //                    //lstreport.Add(Convert.ToString(dt.Rows[0]["FileContent"]));
                //                    byte[] objbyte = (byte[])dt.Rows[0]["FileContent"];
                //                    //objbyte.ToArray();
                //                    //_FTP.TransferType = FtpTransferType.Binary;
                //                    //_FTP.GetFile(strExportedPath, ms);
                //                    System.Net.Mime.ContentType ct = new System.Net.Mime.ContentType(System.Net.Mime.MediaTypeNames.Text.Plain);
                //                    MemoryStream pdfstream = new MemoryStream(objbyte);
                //                    NonPersistentObjectSpace Popupos = (NonPersistentObjectSpace)Application.CreateObjectSpace(typeof(PDFPreview));
                //                    PDFPreview objToShow = (PDFPreview)Popupos.CreateObject(typeof(PDFPreview));
                //                    objToShow.PDFData = objbyte;
                //                    pdfstream.Position = 0;
                //                    //iTextSharp.text.pdf.PdfReader reader = new iTextSharp.text.pdf.PdfReader(objbyte);
                //                    System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(pdfstream, objsamplecheckin.JobID + ".pdf");
                //                    message.Attachments.Add(attachment);
                //                }
                //            }
                //            sc.EnableSsl = EnableSSL;
                //            sc.UseDefaultCredentials = false;
                //            NetworkCredential credential = new NetworkCredential();
                //            credential.UserName = strMailFromUserName;
                //            credential.Password = strMailFromPassword;
                //            sc.Credentials = credential;
                //            sc.Host = strSmtpHost;
                //            //sc.Port = Convert.ToInt32(((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailPort"]);
                //            sc.Port = intPort;
                //            //sc.Port = 25;
                //            //sc.Port = Convert.ToInt32(((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailPort"]);
                //            sc.Timeout = 30000;
                //            //sc.EnableSsl = true;
                //            //NetworkCredential credential = new NetworkCredential();
                //            //credential.UserName = strMailFromUserName;
                //            //credential.Password = strMailFromPassword;
                //            //sc.Credentials = credential;
                //            //sc.Host = strSmtpHost;
                //            ////sc.Port = 25;
                //            ////sc.Port = 587;
                //            //sc.Port = Convert.ToInt32(((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailPort"]);
                //            string sFileName = objsamplecheckin.JobID + ".pdf";

                //            if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\COCAttached")) == false)
                //            {
                //                Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\COCAttached"));
                //            }
                //            string strFilePath = HttpContext.Current.Server.MapPath(@"~\COCAttached");
                //            string OriginalPath = strFilePath + sFileName;

                //            if (objsamplecheckin.JobID != null)
                //            {

                //                MemoryStream ms = GetSampleReceipt(objsamplecheckin, new MemoryStream());
                //                ms.Position = 0;
                //                System.Net.Mail.Attachment sampleReceiptAttachment = new System.Net.Mail.Attachment(ms, System.Net.Mime.MediaTypeNames.Application.Octet);
                //                System.Net.Mime.ContentDisposition sampleReceiptDisposition = sampleReceiptAttachment.ContentDisposition;

                //                sampleReceiptDisposition.FileName = objsamplecheckin.JobID + "_SampleReceipt.pdf";

                //                sampleReceiptDisposition.Size = ms.Length;

                //                sampleReceiptDisposition.CreationDate = System.IO.File.GetCreationTime(OriginalPath);

                //                sampleReceiptDisposition.ModificationDate = System.IO.File.GetLastWriteTime(OriginalPath);

                //                sampleReceiptDisposition.ReadDate = System.IO.File.GetLastAccessTime(OriginalPath);
                //                message.Attachments.Add(sampleReceiptAttachment);

                //                using (FileStream fileStream = new FileStream(OriginalPath, FileMode.OpenOrCreate))
                //                {

                //                    if (objsamplecheckin.Attachments.FirstOrDefault(i => i.Attachments != null && i.Category == Category.COC) != null)
                //                    {
                //                        foreach (Modules.BusinessObjects.SampleManagement.Attachment item in objsamplecheckin.Attachments.Where(i => i.Attachments != null && i.Category == Category.COC))
                //                        {
                //                            item.Attachments.SaveToStream(fileStream);
                //                            //objsamplecheckin.JobID.FileName = objsamplecheckin.JobID + "_EDD.xlsx";
                //                            fileStream.Position = 0;
                //                            System.Net.Mail.Attachment data = new System.Net.Mail.Attachment(fileStream, System.Net.Mime.MediaTypeNames.Application.Octet);
                //                            System.Net.Mime.ContentDisposition disposition = data.ContentDisposition;

                //                            disposition.FileName = objsamplecheckin.JobID + "COCAttached.pdf";

                //                            disposition.Size = fileStream.Length;

                //                            disposition.CreationDate = System.IO.File.GetCreationTime(OriginalPath);

                //                            disposition.ModificationDate = System.IO.File.GetLastWriteTime(OriginalPath);

                //                            disposition.ReadDate = System.IO.File.GetLastAccessTime(OriginalPath);
                //                            message.Attachments.Add(data);
                //                        }
                //                    }
                //                    try
                //                    {
                //                        if (message.To != null && message.To.Count > 0)
                //                        {
                //                            sc.Send(message);
                //                            boolMailSend = true;
                //                        }
                //                    }
                //                    catch (SmtpFailedRecipientsException ex)
                //                    {
                //                        for (int i = 0; i < ex.InnerExceptions.Length; i++)
                //                        {
                //                            SmtpStatusCode exstatus = ex.InnerExceptions[i].StatusCode;
                //                            if (exstatus == SmtpStatusCode.GeneralFailure || exstatus == SmtpStatusCode.ServiceNotAvailable || exstatus == SmtpStatusCode.SyntaxError || exstatus == SmtpStatusCode.SystemStatus || exstatus == SmtpStatusCode.TransactionFailed)
                //                            {
                //                                Application.ShowViewStrategy.ShowMessage(ex.Message);
                //                            }
                //                            else
                //                            {
                //                                Application.ShowViewStrategy.ShowMessage(ex.InnerExceptions[i].FailedRecipient);
                //                            }
                //                        }
                //                    }


                //                    objsamplecheckin.SendBy = ObjectSpace.GetObjectByKey<Employee>(SecuritySystem.CurrentUserId);
                //                    objsamplecheckin.SendDate = DateTime.Now;
                //                    objsamplecheckin.MailStatus = SampleReceiptNotificationStatus.Sent;
                //                    if (View is ListView)
                //                    {
                //                        ASPxGridListEditor lstEditor = ((ListView)View).Editor as ASPxGridListEditor;
                //                        if (lstEditor != null && lstEditor.Grid != null)
                //                        {
                //                            lstEditor.Grid.UpdateEdit();
                //                        }
                //                    }
                //                    ObjectSpace.CommitChanges();
                //                    ObjectSpace.Refresh();

                //                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "mailsendsuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);

                //                }
                //            }
                //            else
                //            {
                //                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "mailnotsent"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                //                return;
                //            }
                //        }
                //        else if (objsamplecheckin.Email == null)
                //        {
                //            Application.ShowViewStrategy.ShowMessage("Email was should not be empty.", InformationType.Error, 3000, InformationPosition.Top);
                //        }


                //        else
                //        {
                //            Application.ShowViewStrategy.ShowMessage("Mail content was should not be empty.", InformationType.Error, 3000, InformationPosition.Top);
                //        }
                //    }
                //}

                //if (View.SelectedObjects.Count > 0)
                //{
                //    IObjectSpace objSpace = Application.CreateObjectSpace();
                //    foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin in e.SelectedObjects)
                //    {
                //        SmtpClient sc = new SmtpClient();
                //        sc.UseDefaultCredentials = false;
                //        sc.DeliveryMethod = SmtpDeliveryMethod.Network;
                //        string strlogUsername = ((AuthenticationStandardLogonParameters)SecuritySystem.LogonParameters).UserName;
                //        string strlogpassword = ((AuthenticationStandardLogonParameters)SecuritySystem.LogonParameters).Password;
                //        string strSmtpHost = "Smtp.gmail.com";
                //        string strMailFromUserName = ((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailFromUserName"];
                //        string strMailFromPassword = ((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailFromPassword"];
                //        string strMailto = string.Empty;
                //        string strJobID = objsamplecheckin.JobID;
                //        string FilePath = objFTP.GetDocument(strJobID);
                //        MailMessage message = new MailMessage();
                //        message.IsBodyHtml = true;
                //        message.From = new MailAddress(strMailFromUserName);
                //        eNotificationContentTemplate objEnct = objSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[SampleCheckin] =? ", objsamplecheckin.Oid));
                //        if (objEnct != null)
                //        {
                //            string strMailFromUserName = objEnct.FromMailID;
                //            string strMailFromPassword = objEnct.EMailPassword;
                //            string strSmtpHost = objEnct.MailServerName;
                //            message.From = new MailAddress(strMailFromUserName);
                //            message.Subject = objEnct.Subject;
                //            string strBody = objEnct.Body;
                //            if (strBody.ToUpper().Contains("@JOBID") && objsamplecheckin.JobID != null)
                //            {
                //                strBody = strBody.Replace("@JOBID", objsamplecheckin.JobID);
                //            }
                //            if (strBody.ToUpper().Contains("@TAT") && objsamplecheckin.TAT != null)
                //            {
                //                strBody = strBody.Replace("@TAT", objsamplecheckin.TAT.TAT);
                //            }
                //            if (strBody.ToUpper().Contains("@PROJECTID") && objsamplecheckin.ProjectID != null)
                //            {
                //                strBody = strBody.Replace("@PROJECTID", objsamplecheckin.ProjectID.ProjectId);
                //            }
                //            else if (strBody.ToUpper().Contains("@PROJECTID") && objsamplecheckin.ProjectID == null)
                //            {
                //                strBody = strBody.Replace("@PROJECTID", null);
                //            }
                //            if (strBody.ToUpper().Contains("@PROJECTNAME") && objsamplecheckin.ProjectName != null)
                //            {
                //                strBody = strBody.Replace("@PROJECTNAME", objsamplecheckin.ProjectName);
                //            }
                //            else if (strBody.ToUpper().Contains("@PROJECTNAME") && objsamplecheckin.ProjectID == null)
                //            {
                //                strBody = strBody.Replace("@PROJECTNAME", null);
                //            }
                //            if (strBody.ToUpper().Contains("@RECEIVEDDATE") && objsamplecheckin.RecievedDate != null)
                //            {
                //                strBody = strBody.Replace("@RECEIVEDDATE", objsamplecheckin.RecievedDate.ToString());
                //            }
                //            if (!String.IsNullOrEmpty(objEnct.Subject))
                //            {
                //                message.Subject = objEnct.Subject;
                //            }
                //            else
                //            {
                //                message.Subject = objsamplecheckin.JobID;
                //            }
                //            message.Body = strBody;
                //            ////message.Body = objEnct.Body+"<br>"+ @"We received the samples for JobID:" + "" + strJobID + "<br>" + "Project ID:" + objsamplecheckin.ProjectID.ProjectId + "<br>" + "Project Name:" + objsamplecheckin.ProjectName + "<br>" + "Received Date:" + objsamplecheckin.RecievedDate + "<br>" +
                //            ////    "TAT:" + objsamplecheckin.TAT.TAT + "<br>" + "Please find out the attached COC." + "<br>" + "Have a nice day.";
                //            System.Windows.Forms.RichTextBox rtBox = new System.Windows.Forms.RichTextBox();
                //            rtBox.Rtf = strBody;
                //            message.Body = rtBox.Text;
                //            message.Subject = ("Confirmation email for ") + objsamplecheckin.JobID;//+"   "+"ReportedDate:"+objReport.ReportedDate;
                //            message.Body = @"Good Day :<br>" + "We received and accepted samples for Project Number" + " " + strJobID + "<br>" +
                //                            "TAT :" + objsamplecheckin.TAT.TAT + "<br> Please find out the attached COC. <br>" + "Have a nice day.";

                //            CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "Good") + Environment.NewLine
                //        + CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "Received and Accepted") + objsamplecheckin.JobID
                //        + Environment.NewLine + CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "TAT") + objsamplecheckin.TAT.TAT
                //        + Environment.NewLine + CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "COC") + objsamplecheckin.Attachments
                //        + Environment.NewLine + CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "Nice");
                //            message.Body = "Good Day:" + "\r\n" + "TAT:";
                //            Contact con = objSpace.GetObject<Contact>(objsamplecheckin.ContactName);
                //            if (objsamplecheckin != null && objsamplecheckin.Email != null)
                //            {
                //                message.To.Add(objsamplecheckin.Email);
                //                sc.EnableSsl = objEnct.EnableSSL;
                //                NetworkCredential credential = new NetworkCredential();
                //                credential.UserName = strMailFromUserName;
                //                credential.Password = strMailFromPassword;
                //                sc.Credentials = credential;
                //                sc.Host = strSmtpHost;
                //                sc.Port = 25;
                //                sc.Port = 587;
                //                string strMailPort = ((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailPort"];
                //                if (!string.IsNullOrEmpty(strMailPort))
                //                {
                //                    sc.Port = objEnct.Port;
                //                }
                //                else
                //                {
                //                    sc.Port = 587;
                //                }
                //                string sFileName = objsamplecheckin.JobID + ".pdf";
                //                if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\COCAttached")) == false)
                //                {
                //                    Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\COCAttached"));
                //                }
                //                string strFilePath = HttpContext.Current.Server.MapPath(@"~\COCAttached");
                //                string OriginalPath = strFilePath + sFileName;
                //                string strFilePathmergepdf = HttpContext.Current.Server.MapPath(@"~\MergePDF");
                //                string OriginalPath1 = strFilePathmergepdf + sFileName;
                //                if (objsamplecheckin.JobID != null)
                //                {
                //                    string strmergerFilePath = string.Empty;
                //                    String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                //                    using (MemoryStream newms = new MemoryStream())
                //                    {
                //                        ReadXmlFile_FTPConc();
                //                        Ftp _FTPpath = GetFTPConnection();
                //                        string strmergePath = ConfigurationManager.AppSettings["MergePDFPath"];
                //                        _FTPpath.Passive = true;
                //                        string currentPath = _FTPpath.GetCurrentDirectory();
                //                        String[] Char = { "/", "\\" };
                //                        string[] subDirs = strmergePath.Split(Char, StringSplitOptions.None);
                //                        string MergePDFpath = string.Empty;
                //                        if (currentPath != "/")
                //                        {
                //                            MergePDFpath = currentPath + strmergePath;
                //                        }
                //                        else
                //                        {
                //                            MergePDFpath = strmergePath;
                //                        }
                //                        bool newPathExist = false;
                //                        if (!_FTPpath.DirectoryExists(MergePDFpath))
                //                        {
                //                            try
                //                            {
                //                                _FTPpath.CreateDirectory(MergePDFpath);
                //                                newPathExist = true;
                //                            }
                //                            catch (Exception ex)
                //                            {
                //                                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                //                                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
                //                            }
                //                            foreach (string subDir in subDirs)
                //                            {
                //                                try
                //                                {
                //                                    if (!string.IsNullOrEmpty(subDir))
                //                                    {
                //                                        currentPath = currentPath + "/" + subDir;
                //                                        if (!_FTPpath.DirectoryExists(currentPath))
                //                                        {
                //                                            _FTPpath.CreateDirectory(currentPath);
                //                                        }
                //                                        newPathExist = true;
                //                                    }
                //                                }
                //                                catch (Exception ex)
                //                                {
                //                                    Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                //                                    Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
                //                                }
                //                            }
                //                        }
                //                        if (newPathExist)
                //                        {
                //                            if (!strmergePath.EndsWith("//"))
                //                            {
                //                                strmergerFilePath = strmergePath.Replace(@"\", "//") + objsamplecheckin.JobID + timeStamp + ".pdf";
                //                            }
                //                            else
                //                            if (!strmergePath.EndsWith("/"))
                //                            {
                //                                strmergerFilePath = strmergePath.Replace(@"\", "//") + "/" + objsamplecheckin.JobID + timeStamp + ".pdf";
                //                            }
                //                            else
                //                            {
                //                                strmergerFilePath = strmergePath.Replace(@"\", "//") + objsamplecheckin.JobID + timeStamp + ".pdf";
                //                            }
                //                        }
                //                        else
                //                        {
                //                            if (!strmergePath.EndsWith("//"))
                //                            {
                //                                strmergerFilePath = strmergePath.Replace(@"\", "//") + objsamplecheckin.JobID + timeStamp + ".pdf";
                //                            }
                //                            else
                //                            if (!strmergePath.EndsWith("/"))
                //                            {
                //                                strmergerFilePath = strmergePath.Replace(@"\", "//") + "/" + objsamplecheckin.JobID + timeStamp + ".pdf";
                //                            }
                //                            else
                //                            {
                //                                strmergerFilePath = strmergePath.Replace(@"\", "//") + objsamplecheckin.JobID + timeStamp + ".pdf";
                //                            }
                //                        }
                //                        iTextSharp.text.Document PDFdoc = new iTextSharp.text.Document();
                //                        using (MemoryStream mergenewms = new MemoryStream())
                //                        {
                //                            iTextSharp.text.pdf.PdfCopy PDFwriter = new iTextSharp.text.pdf.PdfCopy(PDFdoc, mergenewms);
                //                            if (PDFwriter == null)
                //                            {
                //                                return;
                //                            }
                //                            PDFdoc.Open();
                //                            /*Attachment*/
                //                            ObjReportDesignerInfo.WebConfigFTPConn = ((NameValueCollection)System.Configuration.ConfigurationManager.GetSection("FTPConnectionStrings"))["FTPConnectionString"];
                //                            ReadXmlFile_FTPConc();
                //                            Rebex.Net.Ftp _FTP = GetFTPConnection();
                //                            MemoryStream ms = GetSampleReceipt(objsamplecheckin, new MemoryStream());
                //                            ms.Position = 0;
                //                            iTextSharp.text.pdf.PdfReader PDFreader = new iTextSharp.text.pdf.PdfReader(ms.ToArray());
                //                            PDFreader.ConsolidateNamedDestinations();
                //                            Add content
                //                            for (int i = 1; i <= PDFreader.NumberOfPages; i++)
                //                            {
                //                                iTextSharp.text.pdf.PdfImportedPage page = PDFwriter.GetImportedPage(PDFreader, i);
                //                                PDFwriter.AddPage(page);
                //                            }
                //                            iTextSharp.text.pdf.PRAcroForm form = PDFreader.AcroForm;
                //                            if (form != null)
                //                            {
                //                                PDFwriter.CopyDocumentFields(PDFreader);
                //                            }
                //                            Close PDFreader
                //                            PDFreader.Close();
                //                            using (FileStream fileStream = new FileStream(OriginalPath, FileMode.OpenOrCreate))
                //                            {
                //                                if (objsamplecheckin.Attachments.FirstOrDefault(i => i.Attachments != null && i.Category == Category.COC) != null)
                //                                {
                //                                    foreach (Modules.BusinessObjects.SampleManagement.Attachment item in objsamplecheckin.Attachments.Where(i => i.Attachments != null && i.Category == Category.COC))
                //                                    {
                //                                        item.Attachments.SaveToStream(fileStream);
                //                                        objsamplecheckin.JobID.FileName = objsamplecheckin.JobID + "_EDD.xlsx";
                //                                        fileStream.Position = 0;
                //                                        iTextSharp.text.pdf.PdfReader PDFreader2 = new iTextSharp.text.pdf.PdfReader(fileStream);
                //                                        PDFreader2.ConsolidateNamedDestinations();
                //                                        Add content
                //                                        for (int i = 1; i <= PDFreader2.NumberOfPages; i++)
                //                                        {
                //                                            iTextSharp.text.pdf.PdfImportedPage page = PDFwriter.GetImportedPage(PDFreader2, i);
                //                                            PDFwriter.AddPage(page);
                //                                        }
                //                                        iTextSharp.text.pdf.PRAcroForm form2 = PDFreader2.AcroForm;
                //                                        if (form != null)
                //                                        {
                //                                            PDFwriter.CopyDocumentFields(PDFreader2);
                //                                        }
                //                                        Close PDFreader
                //                                        PDFreader2.Close();
                //                                    }
                //                                }
                //                            }
                //                            string strRemotePath = ConfigurationManager.AppSettings["FinalReportPath"];
                //                            string strExportedPath = strRemotePath.Replace(@"\", "//") + objsamplecheckin.JobID + ".pdf";
                //                            if (_FTP.FileExists(strExportedPath))
                //                            {
                //                                MemoryStream msFRP = new MemoryStream();
                //                                _FTP.TransferType = FtpTransferType.Binary;
                //                                _FTP.GetFile(strExportedPath, msFRP);
                //                                System.Net.Mime.ContentType ct = new System.Net.Mime.ContentType(System.Net.Mime.MediaTypeNames.Text.Plain);
                //                                MemoryStream pdfstream = new MemoryStream(msFRP.ToArray());
                //                                iTextSharp.text.pdf.PdfReader PDFreader3 = new iTextSharp.text.pdf.PdfReader(msFRP.ToArray());
                //                                PDFreader3.ConsolidateNamedDestinations();
                //                                Add content
                //                                for (int i = 1; i <= PDFreader3.NumberOfPages; i++)
                //                                {
                //                                    iTextSharp.text.pdf.PdfImportedPage page = PDFwriter.GetImportedPage(PDFreader3, i);
                //                                    PDFwriter.AddPage(page);
                //                                }
                //                                iTextSharp.text.pdf.PRAcroForm form3 = PDFreader3.AcroForm;
                //                                if (form != null)
                //                                {
                //                                    PDFwriter.CopyDocumentFields(PDFreader3);
                //                                }
                //                                Close PDFreader
                //                                PDFreader3.Close();
                //                            }
                //                            /*COCAttachment*/
                //                            {
                //                                string strCOCID = string.Empty;
                //                                Samplecheckin sampleCheckIn = (Samplecheckin)View.CurrentObject;
                //                                ObjReportDesignerInfo.WebConfigFTPConn = ((NameValueCollection)System.Configuration.ConfigurationManager.GetSection("FTPConnectionStrings"))["FTPConnectionString"];
                //                                ObjReportDesignerInfo.WebConfigConn = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                //                                SetConnectionString();
                //                                DynamicReportBusinessLayer.BLCommon.SetDBConnection(ObjReportDesignerInfo.LDMSQLServerName, ObjReportDesignerInfo.LDMSQLDatabaseName, ObjReportDesignerInfo.LDMSQLUserID, ObjReportDesignerInfo.LDMSQLPassword);
                //                                strCOCID = "'" + objsamplecheckin.JobID + "'";
                //                                {
                //                                    using (MemoryStream COCnewms = new MemoryStream())
                //                                    {
                //                                        XtraReport xtraReport2 = new XtraReport();
                //                                        ObjReportingInfo.strJobID = strCOCID;
                //                                        xtraReport2 = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("COC_Report", ObjReportingInfo, false);
                //                                        DynamicDesigner.GlobalReportSourceCode.AssignLimsDatasource(xtraReport2, ObjReportingInfo);
                //                                        xtraReport2.ExportToPdf(COCnewms);
                //                                        COCnewms.Position = 0;
                //                                        iTextSharp.text.pdf.PdfReader cocPDFreader = new iTextSharp.text.pdf.PdfReader(COCnewms.ToArray());
                //                                        cocPDFreader.ConsolidateNamedDestinations();
                //                                        Add content
                //                                        for (int i = 1; i <= cocPDFreader.NumberOfPages; i++)
                //                                        {
                //                                            iTextSharp.text.pdf.PdfImportedPage page = PDFwriter.GetImportedPage(cocPDFreader, i);
                //                                            PDFwriter.AddPage(page);
                //                                        }
                //                                        iTextSharp.text.pdf.PRAcroForm form3 = cocPDFreader.AcroForm;
                //                                        if (form != null)
                //                                        {
                //                                            PDFwriter.CopyDocumentFields(cocPDFreader);
                //                                        }
                //                                        Close PDFreader
                //                                        cocPDFreader.Close();
                //                                    }
                //                                }
                //                            }

                //                            PDFwriter.Close();
                //                            PDFdoc.Close();
                //                            System.Net.Mime.ContentType ctmail = new System.Net.Mime.ContentType(System.Net.Mime.MediaTypeNames.Text.Plain);
                //                            MemoryStream mailpdfstream = new MemoryStream(mergenewms.ToArray());
                //                            System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(mailpdfstream, objsamplecheckin.JobID + ".pdf");
                //                            message.Attachments.Add(attachment);
                //                        }
                //                    }
                //                    try
                //                    {
                //                        if (message.To != null && message.To.Count > 0)
                //                        {
                //                            sc.Send(message);
                //                            boolMailSend = true;
                //                        }
                //                    }
                //                    catch (SmtpFailedRecipientsException ex)
                //                    {
                //                        for (int i = 0; i < ex.InnerExceptions.Length; i++)
                //                        {
                //                            SmtpStatusCode exstatus = ex.InnerExceptions[i].StatusCode;
                //                            if (exstatus == SmtpStatusCode.GeneralFailure || exstatus == SmtpStatusCode.ServiceNotAvailable || exstatus == SmtpStatusCode.SyntaxError || exstatus == SmtpStatusCode.SystemStatus || exstatus == SmtpStatusCode.TransactionFailed)
                //                            {
                //                                Application.ShowViewStrategy.ShowMessage(ex.Message);
                //                            }
                //                            else
                //                            {
                //                                Application.ShowViewStrategy.ShowMessage(ex.InnerExceptions[i].FailedRecipient);
                //                            }
                //                        }
                //                    }
                //                    objsamplecheckin.SendBy = ObjectSpace.GetObjectByKey<Employee>(SecuritySystem.CurrentUserId);
                //                    objsamplecheckin.SendDate = DateTime.Now;
                //                    objsamplecheckin.MailStatus = SampleReceiptNotificationStatus.Sent;
                //                    if (View is ListView)
                //                    {
                //                        ASPxGridListEditor lstEditor = ((ListView)View).Editor as ASPxGridListEditor;
                //                        if (lstEditor != null && lstEditor.Grid != null)
                //                        {
                //                            lstEditor.Grid.UpdateEdit();
                //                        }
                //                    }
                //                    ObjectSpace.CommitChanges();
                //                    ObjectSpace.Refresh();
                //                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "mailsendsuccess"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                //                }
                //                else
                //                {
                //                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "mailnotsent"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                //                    return;
                //                }
                //            }
                //            else
                //            {
                //                Application.ShowViewStrategy.ShowMessage("E-mail was should not be empty.", InformationType.Error, 3000, InformationPosition.Top);
                //            }
                //        }
                //        else
                //        {
                //            Application.ShowViewStrategy.ShowMessage("Mail content was should not be empty.", InformationType.Error, 3000, InformationPosition.Top);
                //        }
                //    }
                //} 
                #endregion
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }

        }
        public void Sendmail(Modules.BusinessObjects.SampleManagement.Samplecheckin objsamplecheckin)
        {
            SmtpClient sc = new SmtpClient();
            Employee currentUser = SecuritySystem.CurrentUser as Employee;
            string strSmtpHost = "Smtp.gmail.com";
            string strJobID = objsamplecheckin.JobID;
            string strMailFromUserName = currentUser.Email;
            string strMailFromPassword = currentUser.Password;
            
            MailMessage message = new MailMessage();
            message.IsBodyHtml = true;
            message.From = new MailAddress(strMailFromUserName);
            CriteriaOperator cs = CriteriaOperator.Parse("[Contents] = '0'");
            EmailContentTemplate objent = View.ObjectSpace.FindObject<EmailContentTemplate>(cs);
            if (objent != null && objent.Contents == Modules.BusinessObjects.Setting.Content.Samplecheckin)
            {
                if (objent != null)
                {
                    string objbody = objent.Body.Replace("[ReceivedDate]", objsamplecheckin.RecievedDate.ToString()).Replace("[JobID]", objsamplecheckin.JobID.ToString());
                    message.Body = objbody;
                    message.Subject = objent.Subject;
                }
            }
            if (objsamplecheckin != null && objsamplecheckin.Email != null)
            {
                message.To.Add(objsamplecheckin.Email);
                FileLinkSepDBController objfilelink = Frame.GetController<FileLinkSepDBController>();
                if (objfilelink != null)
                {
                    IList<Modules.BusinessObjects.SampleManagement.Reporting> lstReporting = ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.Reporting>(CriteriaOperator.Parse("[JobID.JobID] = ?", objsamplecheckin.JobID));
                    //if (_FTP.FileExists(strExportedPath))
                    foreach (Modules.BusinessObjects.SampleManagement.Reporting objReport in lstReporting)
                    {
                        DataTable dt = objfilelink.GetFileLink(objReport.ReportID);
                        byte[] objbyte = (byte[])dt.Rows[0]["FileContent"];
                        System.Net.Mime.ContentType ct = new System.Net.Mime.ContentType(System.Net.Mime.MediaTypeNames.Text.Plain);
                        MemoryStream pdfstream = new MemoryStream(objbyte);
                        NonPersistentObjectSpace Popupos = (NonPersistentObjectSpace)Application.CreateObjectSpace(typeof(PDFPreview));
                        PDFPreview objToShow = (PDFPreview)Popupos.CreateObject(typeof(PDFPreview));
                        objToShow.PDFData = objbyte;
                        pdfstream.Position = 0;
                        //iTextSharp.text.pdf.PdfReader reader = new iTextSharp.text.pdf.PdfReader(objbyte);
                        System.Net.Mail.Attachment attachment = new System.Net.Mail.Attachment(pdfstream, objsamplecheckin.JobID + ".pdf");
                        message.Attachments.Add(attachment);
                    }
                }
                NetworkCredential credential = new NetworkCredential();
                credential.UserName = strMailFromUserName;
                credential.Password = strMailFromPassword;
                sc.UseDefaultCredentials = true;
                sc.Host = strSmtpHost;
                sc.Port = Convert.ToInt32(((NameValueCollection)ConfigurationManager.GetSection("emailSettings"))["MailPort"]);
                sc.EnableSsl = true;
                sc.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                sc.DeliveryFormat = SmtpDeliveryFormat.SevenBit;
                sc.Credentials = new NetworkCredential(strMailFromUserName, strMailFromPassword);
                string sFileName = objsamplecheckin.JobID + ".pdf";

                if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\COCAttached")) == false)
                {
                    Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\COCAttached"));
                }
                string strFilePath = HttpContext.Current.Server.MapPath(@"~\COCAttached");
                string OriginalPath = strFilePath + sFileName;

                if (objsamplecheckin.JobID != null)
                {

                    MemoryStream ms = GetSampleReceipt(objsamplecheckin, new MemoryStream());
                    ms.Position = 0;
                    System.Net.Mail.Attachment sampleReceiptAttachment = new System.Net.Mail.Attachment(ms, System.Net.Mime.MediaTypeNames.Application.Octet);
                    System.Net.Mime.ContentDisposition sampleReceiptDisposition = sampleReceiptAttachment.ContentDisposition;

                    sampleReceiptDisposition.FileName = objsamplecheckin.JobID + "_SampleReceipt.pdf";

                    sampleReceiptDisposition.Size = ms.Length;

                    sampleReceiptDisposition.CreationDate = System.IO.File.GetCreationTime(OriginalPath);

                    sampleReceiptDisposition.ModificationDate = System.IO.File.GetLastWriteTime(OriginalPath);

                    sampleReceiptDisposition.ReadDate = System.IO.File.GetLastAccessTime(OriginalPath);
                    message.Attachments.Add(sampleReceiptAttachment);

                    using (FileStream fileStream = new FileStream(OriginalPath, FileMode.OpenOrCreate))
                    {

                        if (objsamplecheckin.Attachments.FirstOrDefault(i => i.Attachments != null && i.Category == Category.COC) != null)
                        {
                            foreach (Modules.BusinessObjects.SampleManagement.Attachment item in objsamplecheckin.Attachments.Where(i => i.Attachments != null && i.Category == Category.COC))
                            {
                                item.Attachments.SaveToStream(fileStream);
                                //objsamplecheckin.JobID.FileName = objsamplecheckin.JobID + "_EDD.xlsx";
                                fileStream.Position = 0;
                                System.Net.Mail.Attachment data = new System.Net.Mail.Attachment(fileStream, System.Net.Mime.MediaTypeNames.Application.Octet);
                                System.Net.Mime.ContentDisposition disposition = data.ContentDisposition;

                                disposition.FileName = objsamplecheckin.JobID + "COCAttached.pdf";

                                disposition.Size = fileStream.Length;

                                disposition.CreationDate = System.IO.File.GetCreationTime(OriginalPath);

                                disposition.ModificationDate = System.IO.File.GetLastWriteTime(OriginalPath);

                                disposition.ReadDate = System.IO.File.GetLastAccessTime(OriginalPath);
                                message.Attachments.Add(data);
                            }
                        }
                        try
                        {
                            if (message.To != null && message.To.Count > 0)
                            {
                                sc.Send(message);
                                boolMailSend = true;
                            }
                        }
                        catch (SmtpFailedRecipientsException ex)
                        {
                            for (int i = 0; i < ex.InnerExceptions.Length; i++)
                            {
                                SmtpStatusCode exstatus = ex.InnerExceptions[i].StatusCode;
                                if (exstatus == SmtpStatusCode.GeneralFailure || exstatus == SmtpStatusCode.ServiceNotAvailable || exstatus == SmtpStatusCode.SyntaxError || exstatus == SmtpStatusCode.SystemStatus || exstatus == SmtpStatusCode.TransactionFailed)
                                {
                                    Application.ShowViewStrategy.ShowMessage(ex.Message);
                                }
                                else
                                {
                                    Application.ShowViewStrategy.ShowMessage(ex.InnerExceptions[i].FailedRecipient);
                                }
                            }
                        }
                        objsamplecheckin.SendBy = ObjectSpace.GetObjectByKey<Employee>(SecuritySystem.CurrentUserId);
                        objsamplecheckin.SendDate = DateTime.Now;
                        objsamplecheckin.MailStatus = SampleReceiptNotificationStatus.Sent;
                        if (View is ListView)
                        {
                            ASPxGridListEditor lstEditor = ((ListView)View).Editor as ASPxGridListEditor;
                            if (lstEditor != null && lstEditor.Grid != null)
                            {
                                lstEditor.Grid.UpdateEdit();
                            }
                        }
                    }
                }
                else
                {
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "mailnotsent"), InformationType.Error, timer.Seconds, InformationPosition.Top);
                    return;
                }
            }
            else if (objsamplecheckin.Email == null)
            {
                Application.ShowViewStrategy.ShowMessage("Email was should not be empty.", InformationType.Error, 3000, InformationPosition.Top);
            }
        }
        private MemoryStream GetSampleReceipt(Samplecheckin objsamplecheckin, MemoryStream ms)
        {
            try
            {
                string strSampleReceipt = string.Empty;
                string strJobID = objsamplecheckin.JobID;

                XtraReport xtraReport = new XtraReport();

                objDRDCInfo.WebConfigConn = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SetConnectionString();

                DynamicReportBusinessLayer.BLCommon.SetDBConnection(objDRDCInfo.LDMSQLServerName, objDRDCInfo.LDMSQLDatabaseName, objDRDCInfo.LDMSQLUserID, objDRDCInfo.LDMSQLPassword);
                //if ((!(strJobID ==null)&&(strJobID .Length >0)))
                //{

                //    ObjReportingInfo.strJobID = strJobID ; }
                //else
                //{
                //    ObjReportingInfo.strJobID = strSampleReceipt;

                //}
                if ((!(strJobID == null) && (strJobID.Length > 0)))
                {
                    ObjReportingInfo.strJobID = "'" + strJobID + "'";
                }
                else
                {
                    ObjReportingInfo.strJobID = "'" + strSampleReceipt + "'";
                }
                xtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("xrReceiptNotification", ObjReportingInfo, false);
                //DynamicDesigner.GlobalReportSourceCode.AssignLimsDatasource(xtraReport,ObjReportingInfo);
                xtraReport.ExportToPdf(ms);
                return ms;

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
                return ms;
            }
        }

        ////private Ftp GetFTPConnection()
        ////{
        ////    try
        ////    {
        ////        Rebex.Net.Ftp FTP = new Rebex.Net.Ftp();
        ////        FTP.TransferType = FtpTransferType.Binary;
        ////        if ((!(strFTPServerName == null)
        ////                    && ((strFTPServerName.Length > 0)
        ////                    && (!(strFTPUserName == null)
        ////                    && (strFTPUserName.Length > 0)))))
        ////        {
        ////            try
        ////            {
        ////                FTP.Timeout = 6000;
        ////                FTP.Connect(strFTPServerName, FTPPort);
        ////                FTP.Login(strFTPUserName, strFTPPassword);
        ////                strFTPStatus = true;
        ////            }
        ////            catch (Exception ex)
        ////            {
        ////                strFTPStatus = false;
        ////                return new Rebex.Net.Ftp();
        ////            }
        ////        }
        ////        else
        ////        {
        ////            strFTPStatus = false;
        ////            return new Rebex.Net.Ftp();
        ////        }

        ////        return FTP;
        ////    }
        ////    catch (Exception ex)
        ////    {
        ////        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        ////        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        ////        return null;
        ////    }
        ////}

        private void ReadXmlFile_FTPConc()
        {
            try
            {
                string[] FTPconnectionstring = ObjReportDesignerInfo.WebConfigFTPConn.Split(';');
                strFTPServerName = FTPconnectionstring[0].Split('=').GetValue(1).ToString();
                strFTPUserName = FTPconnectionstring[1].Split('=').GetValue(1).ToString();
                strFTPPassword = FTPconnectionstring[2].Split('=').GetValue(1).ToString();
                strFTPPath = FTPconnectionstring[3].Split('=').GetValue(1).ToString();
                FTPPort = Convert.ToInt32(FTPconnectionstring[4].ToString().Split('=').GetValue(1).ToString());
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void COC_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                Modules.BusinessObjects.SampleManagement.Samplecheckin samplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)e.CurrentObject;
                if (samplecheckin != null && samplecheckin.Attachments != null)
                {
                    IObjectSpace objectSpace = Application.CreateObjectSpace();
                    CollectionSource cs = new CollectionSource(objectSpace, typeof(Modules.BusinessObjects.SampleManagement.Attachment));
                    cs.Criteria["Filter"] = CriteriaOperator.Parse("[Samplecheckin] = ?", samplecheckin.Oid);
                    ListView lvtestparar = Application.CreateListView("Samplecheckin_Attachments_ListView_ReceiptNotification", cs, false);
                    ShowViewParameters showViewParameters = new ShowViewParameters(lvtestparar);
                    showViewParameters.CreatedView = lvtestparar;
                    showViewParameters.Context = TemplateContext.PopupWindow;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    //showViewParameters.CreatedView.Caption= "Attach";
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.CancelAction.Active.SetItemValue("Cancel", false);
                    dc.AcceptAction.Active.SetItemValue("Ok", false);
                    dc.CloseOnCurrentObjectProcessing = false;

                    showViewParameters.Controllers.Add(dc);
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }

        }

        private void MailContent_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {

                    //    Modules.BusinessObjects.SampleManagement.Samplecheckin samplecheckin = (Modules.BusinessObjects.SampleManagement.Samplecheckin)e.CurrentObject;
                    //    if (samplecheckin != null && samplecheckin.Attachments != null)
                    //    {
                    //        IObjectSpace objectSpace = Application.CreateObjectSpace();
                    //        CriteriaOperator cs = CriteriaOperator.Parse("[SampleCheckin] Is Null AND [ContentType] = 'SampleCheckin'");
                    //        string strBody = string.Empty;
                    //        eNotificationContentTemplate objent = ObjectSpace.FindObject<eNotificationContentTemplate>(cs);
                    //        if (objent != null)
                    //        {
                    //            strBody = objent.Body;
                    //            if (strBody.ToUpper().Contains("@JOBID") && samplecheckin.JobID != null)
                    //            {
                    //                strBody = strBody.Replace("@JOBID", samplecheckin.JobID);
                    //            }
                    //            if (strBody.ToUpper().Contains("@TAT") && samplecheckin.TAT != null)
                    //            {
                    //                strBody = strBody.Replace("@TAT", samplecheckin.TAT.TAT);
                    //            }
                    //            if (strBody.ToUpper().Contains("@PROJECTID") && samplecheckin.ProjectID != null)
                    //            {
                    //                strBody = strBody.Replace("@PROJECTID", samplecheckin.ProjectID.ProjectId);
                    //            }
                    //            else if (strBody.ToUpper().Contains("@PROJECTID") && samplecheckin.ProjectID == null)
                    //            {
                    //                strBody = strBody.Replace("@PROJECTID", null);
                    //            }
                    //            if (strBody.ToUpper().Contains("@PROJECTNAME") && samplecheckin.ProjectName != null)
                    //            {
                    //                strBody = strBody.Replace("@PROJECTNAME", samplecheckin.ProjectName);
                    //            }
                    //            else if (strBody.ToUpper().Contains("@PROJECTNAME") && samplecheckin.ProjectID == null)
                    //            {
                    //                strBody = strBody.Replace("@PROJECTNAME", null);
                    //            }
                    //            if (strBody.ToUpper().Contains("@RECEIVEDDATE") && samplecheckin.RecievedDate != null)
                    //            {
                    //                strBody = strBody.Replace("@RECEIVEDDATE", samplecheckin.RecievedDate.ToString());
                    //            }
                    //        }

                    //        #region
                    //        //eNotificationContentTemplate objentNew = objectSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[SampleCheckin]=?", samplecheckin.Oid));
                    //        //if (objentNew == null)
                    //        //{
                    //        //    objentNew = objectSpace.CreateObject<eNotificationContentTemplate>();
                    //        //    objentNew.ContentType = TypeofContent.SampleCheckin;
                    //        //    objentNew.Body = strBody;
                    //        //    if (objent != null)
                    //        //    {
                    //        //        objentNew.Subject = objent.Subject;
                    //        //    }
                    //        //}
                    //        //if (objent != null)
                    //        //{
                    //        //    objentNew.FromMailID = objent.FromMailID;
                    //        //    objentNew.EMailPassword = objent.EMailPassword;
                    //        //    objentNew.MailServerName = objent.MailServerName;
                    //        //    objentNew.Port = objent.Port;
                    //        //    objentNew.EnableSSL = objent.EnableSSL;
                    //        //}
                    //        #endregion

                    //        eNotificationContentTemplate objentNew = objectSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[SampleCheckin]=?", samplecheckin.Oid));
                    //        //DashboardView lvtestparar = Application.CreateDashboardView(objectSpace, "MailContent", false);
                    //        if (objentNew == null)
                    //        {
                    //            objentNew = objectSpace.CreateObject<eNotificationContentTemplate>();
                    //            objentNew.Body = strBody;
                    //            if (objent != null)
                    //            {
                    //                objentNew.Subject = objent.Subject;
                    //            }
                    //            objentNew.SampleCheckin = objectSpace.GetObject(samplecheckin);
                    //        }
                    //        DetailView dv = Application.CreateDetailView(objectSpace, "eNotificationContentTemplate_DetailView_Copy", false, objentNew);
                    //        dv.ViewEditMode = ViewEditMode.Edit;
                    //        dv.Caption = "SampleReceipt MailContent";
                    //        ShowViewParameters showViewParameters = new ShowViewParameters();
                    //        showViewParameters.CreatedView = dv;
                    //        showViewParameters.Context = TemplateContext.PopupWindow;
                    //        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    //        DialogController dc = Application.CreateController<DialogController>();
                    //        dc.Accepting += Dc_MailContent;
                    //        showViewParameters.Controllers.Add(dc);
                    //        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    //        dc.Frame.View.ObjectSpace.CommitChanges();
                    //    }



                    foreach (Modules.BusinessObjects.SampleManagement.Samplecheckin subOut in View.SelectedObjects)
                    {

                        if (View.CurrentObject != null)
                        {
                            if (subOut != null)
                            {

                                CriteriaOperator cs = CriteriaOperator.Parse("[Contents] = '0'");
                                IObjectSpace objectSpace = Application.CreateObjectSpace();
                                EmailContentTemplate objent = objectSpace.FindObject<EmailContentTemplate>(cs);
                                if (objent != null && objent.Contents != null)
                                    if (objent != null)
                                    {
                                        eNotificationContentTemplate objNotification1 = objectSpace.CreateObject<eNotificationContentTemplate>();
                                        string objbody = objent.Body.Replace("[ReceivedDate]", subOut.RecievedDate.ToString()).Replace("[JobID]", subOut.JobID.ToString());
                                        objNotification1.Body = objbody;
                                        objNotification1.Subject = objent.Subject;
                                        objent.Body = objNotification1.Body;
                                        objent.Subject = objNotification1.Subject;
                                    }

                                DetailView dv = Application.CreateDetailView(objectSpace, "EmailContentTemplate_DetailView_Copy", false, objent);
                                dv.ViewEditMode = ViewEditMode.Edit;
                                dv.Caption = "SampleReceipt MailContent";
                                ShowViewParameters showViewParameters = new ShowViewParameters();
                                showViewParameters.CreatedView = dv;
                                showViewParameters.Context = TemplateContext.PopupWindow;
                                showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                                DialogController dc = Application.CreateController<DialogController>();
                                dc.Accepting += Dc_MailContent;
                                showViewParameters.Controllers.Add(dc);
                                Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                                //dc.Frame.View.ObjectSpace.CommitChanges();


                            }
                        }

                    }

                }
                else if (/*View.Id == "SubOutSampleRegistrations_ListView_TestOrder" || View.Id == "SubOutSampleRegistrations_DetailView_TestOrder" ||*/ View.Id == "SubOutSampleRegistrations_ListView_NotificationQueue")
                {
                    //SubOutSampleRegistrations samplecheckin = (SubOutSampleRegistrations)View.SelectedObjects;
                    foreach (SubOutSampleRegistrations subOut in View.SelectedObjects)
                    {

                        if (View.CurrentObject != null)
                        {
                            if (subOut != null && subOut.Attachments != null)
                            {

                                CriteriaOperator cs = CriteriaOperator.Parse("[Contents] = '1'");
                                IObjectSpace objectSpace = Application.CreateObjectSpace();
                                EmailContentTemplate objent = objectSpace.FindObject<EmailContentTemplate>(cs);
                                if (objent != null && objent.Contents != null)
                                    if (objent != null)
                                    {
                                        eNotificationContentTemplate objNotification1 = objectSpace.CreateObject<eNotificationContentTemplate>();
                                        string objbody = objent.Body.Replace("[ReceivedDate]", subOut.DateReceived.ToString()).Replace("[SuboutID]", subOut.SuboutOrderID.ToString());
                                        objNotification1.Body = objbody;
                                        objNotification1.Subject = objent.Subject;
                                        objent.Body = objNotification1.Body;
                                        objent.Subject = objNotification1.Subject;
                                    }
                                ////else
                                //{
                                //EmailContentTemplate objNotification = objectSpace.CreateObject<EmailContentTemplate>();
                                //        objNotification.Body = "<br/><br/>**The Attached PDF Report is for Samples received on 7/5/2024 submitted with Chain of Custody and EDD.**"; ;
                                //        objNotification.Subject = "SuboutOrder Notification";
                                //        //objNotification.Contents = TypeofContent.;
                                //        objent.Body = objNotification.Body;
                                //        objent.Subject = objNotification.Subject;
                                //        objectSpace.CommitChanges();

                                //   // }
                                DetailView dv = Application.CreateDetailView(objectSpace, "EmailContentTemplate_DetailView_Copy", false, objent);
                                dv.ViewEditMode = ViewEditMode.Edit;
                                dv.Caption = "SampleReceipt MailContent";
                                ShowViewParameters showViewParameters = new ShowViewParameters();
                                showViewParameters.CreatedView = dv;
                                showViewParameters.Context = TemplateContext.PopupWindow;
                                showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                                DialogController dc = Application.CreateController<DialogController>();
                                dc.Accepting += Dc_MailContent;
                                showViewParameters.Controllers.Add(dc);
                                Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                                //dc.Frame.View.ObjectSpace.CommitChanges();


                            }
                        }

                    }






                }
                else if (View.Id == "Reporting_ListView_Delivery")
                {

                    foreach (Modules.BusinessObjects.SampleManagement.Reporting subOut in View.SelectedObjects)
                    {

                        if (View.CurrentObject != null)
                        {
                            if (subOut != null)
                            {

                                CriteriaOperator cs = CriteriaOperator.Parse("[Contents] = '2'");
                                IObjectSpace objectSpace = Application.CreateObjectSpace();
                                EmailContentTemplate objent = objectSpace.FindObject<EmailContentTemplate>(cs);
                                if (objent != null && objent.Contents != null)
                                    if (objent != null)
                                    {
                                        eNotificationContentTemplate objNotification1 = objectSpace.CreateObject<eNotificationContentTemplate>();
                                        string objbody = objent.Body.Replace("[ReceivedDate]", subOut.ReportedDate.ToString()).Replace("[ReportID]", subOut.ReportID.ToString());
                                        objNotification1.Body = objbody;
                                        objNotification1.Subject = objent.Subject;
                                        objent.Body = objNotification1.Body;
                                        objent.Subject = objNotification1.Subject;
                                    }

                                DetailView dv = Application.CreateDetailView(objectSpace, "EmailContentTemplate_DetailView_Copy", false, objent);
                                dv.ViewEditMode = ViewEditMode.Edit;
                                dv.Caption = "SampleReceipt MailContent";
                                ShowViewParameters showViewParameters = new ShowViewParameters();
                                showViewParameters.CreatedView = dv;
                                showViewParameters.Context = TemplateContext.PopupWindow;
                                showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                                DialogController dc = Application.CreateController<DialogController>();
                                dc.Accepting += Dc_MailContent;
                                showViewParameters.Controllers.Add(dc);
                                Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                                //dc.Frame.View.ObjectSpace.CommitChanges();


                            }
                        }

                    }

                    //Modules.BusinessObjects.SampleManagement.Reporting objRpt = (Modules.BusinessObjects.SampleManagement.Reporting)e.CurrentObject;
                    //if (objRpt != null)
                    //{
                    //    IObjectSpace objectSpace = Application.CreateObjectSpace();
                    //    //CriteriaOperator cs = CriteriaOperator.Parse("[SampleCheckin] Is  Null");
                    //    CriteriaOperator cs = CriteriaOperator.Parse("[Reporting] Is Null And [ContentType] = 'Report'");
                    //    eNotificationContentTemplate objent = ObjectSpace.FindObject<eNotificationContentTemplate>(cs);
                    //    if (objent == null)
                    //    {
                    //        objent = objectSpace.CreateObject<eNotificationContentTemplate>();
                    //        objent.Body = "Report Delivery";
                    //    }
                    //    string strBody = objent.Body;
                    //    if (strBody.ToUpper().Contains("@JOBID") && objRpt.JobID != null)
                    //    {
                    //        strBody = strBody.Replace("@JOBID", objRpt.JobID.JobID);
                    //    }
                    //    if (strBody.ToUpper().Contains("@REPORTID") && objRpt.ReportID != null)
                    //    {
                    //        strBody = strBody.Replace("@REPORTID", objRpt.ReportID);
                    //    }
                    //    eNotificationContentTemplate objentNew = objectSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[Reporting]=?", objRpt.Oid));
                    //    //DashboardView lvtestparar = Application.CreateDashboardView(objectSpace, "MailContent", false);
                    //    if (objentNew == null)
                    //    {
                    //        objentNew = objectSpace.CreateObject<eNotificationContentTemplate>();
                    //        objentNew.Body = strBody;
                    //        objentNew.Subject = objent.Subject;
                    //        objentNew.Reporting = objectSpace.GetObject(objRpt);
                    //    }
                    //    DetailView dv = Application.CreateDetailView(objectSpace, "eNotificationContentTemplate_DetailView_Copy", false, objentNew);
                    //    dv.ViewEditMode = ViewEditMode.Edit;
                    //    dv.Caption = "Report MailContent";
                    //    ShowViewParameters showViewParameters = new ShowViewParameters();
                    //    showViewParameters.CreatedView = dv;
                    //    showViewParameters.Context = TemplateContext.PopupWindow;
                    //    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    //    DialogController dc = Application.CreateController<DialogController>();
                    //    dc.Accepting += Dc_MailContent;
                    //    showViewParameters.Controllers.Add(dc);
                    //    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    //    dc.Frame.View.ObjectSpace.CommitChanges();
                    //}
                }
                else if (View.Id == "Invoicing_ListView_Delivery")
                {
                    //    Modules.BusinessObjects.Setting.Invoicing.Invoicing objInv = (Modules.BusinessObjects.Setting.Invoicing.Invoicing)e.CurrentObject;
                    //    if (objInv != null)
                    //    {
                    //        IObjectSpace objectSpace = Application.CreateObjectSpace();
                    //        //CriteriaOperator cs = CriteriaOperator.Parse("[SampleCheckin] Is  Null");
                    //        eNotificationContentTemplate objent = objectSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[Invoice]=?", objInv.Oid));
                    //        if (objent == null)
                    //        {
                    //            CriteriaOperator cs = CriteriaOperator.Parse("[Invoice] Is Null And [ContentType] = 'Invoice'");
                    //            objent = ObjectSpace.FindObject<eNotificationContentTemplate>(cs);
                    //            if (objent == null)
                    //            {
                    //                objent = objectSpace.CreateObject<eNotificationContentTemplate>();
                    //                objent.Body = "Reports";
                    //            }
                    //        }
                    //        string strBody = objent.Body;
                    //        if (strBody.ToUpper().Contains("@JOBID") && objInv.JobID != null)
                    //        {
                    //            strBody = strBody.Replace("@JobID", objInv.JobID);
                    //        }
                    //        if (strBody.ToUpper().Contains("@INVOICEID") && objInv.InvoiceID != null)
                    //        {
                    //            strBody = strBody.Replace("@InvoiceID", objInv.InvoiceID);
                    //        }
                    //        if (strBody.ToUpper().Contains("@QUOTEID") && objInv.QuoteID != null)
                    //        {
                    //            strBody = strBody.Replace("@QuoteID", objInv.QuoteID.QuoteID);
                    //        }
                    //        if (objectSpace.IsNewObject(objent))
                    //        {
                    //            objent.Invoice = objectSpace.GetObject(objInv);
                    //        }
                    //        objent.Body = strBody;
                    //        objent.Subject = objent.Subject;
                    //        //eNotificationContentTemplate objentNew = objectSpace.FindObject<eNotificationContentTemplate>(CriteriaOperator.Parse("[Invoice]=?", objInv.Oid));
                    //        ////DashboardView lvtestparar = Application.CreateDashboardView(objectSpace, "MailContent", false);
                    //        //if (objentNew == null)
                    //        //{
                    //        //    objentNew = objectSpace.CreateObject<eNotificationContentTemplate>();
                    //        //    objentNew.Body = strBody;
                    //        //    objentNew.Subject = objent.Subject;
                    //        //    objentNew.Invoice = objectSpace.GetObject(objInv);
                    //        //}
                    //        DetailView dv = Application.CreateDetailView(objectSpace, "eNotificationContentTemplate_DetailView", false, objent);
                    //        dv.ViewEditMode = ViewEditMode.Edit;
                    //        dv.Caption = "Invoice MailContent";
                    //        ShowViewParameters showViewParameters = new ShowViewParameters();
                    //        showViewParameters.CreatedView = dv;
                    //        showViewParameters.Context = TemplateContext.PopupWindow;
                    //        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    //        DialogController dc = Application.CreateController<DialogController>();
                    //        dc.Accepting += Dc_MailContent;
                    //        showViewParameters.Controllers.Add(dc);
                    //        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    //        dc.Frame.View.ObjectSpace.CommitChanges();
                    //    }
                    //}
                    foreach (Modules.BusinessObjects.Setting.Invoicing.Invoicing subOut in View.SelectedObjects)
                    {

                        if (View.CurrentObject != null)
                        {
                            if (subOut != null)
                            {

                                CriteriaOperator cs = CriteriaOperator.Parse("[Contents] = '3'");
                                IObjectSpace objectSpace = Application.CreateObjectSpace();
                                EmailContentTemplate objent = objectSpace.FindObject<EmailContentTemplate>(cs);
                                if (objent != null && objent.Contents != null)
                                    if (objent != null)
                                    {
                                        eNotificationContentTemplate objNotification1 = objectSpace.CreateObject<eNotificationContentTemplate>();
                                        string objbody = objent.Body.Replace("[ReceivedDate]", subOut.DateReceived.ToString()).Replace("[InvoiceID]", subOut.InvoiceID.ToString());
                                        objNotification1.Body = objbody;
                                        objNotification1.Subject = objent.Subject;
                                        objent.Body = objNotification1.Body;
                                        objent.Subject = objNotification1.Subject;
                                    }

                                DetailView dv = Application.CreateDetailView(objectSpace, "EmailContentTemplate_DetailView_Copy", false, objent);
                                dv.ViewEditMode = ViewEditMode.Edit;
                                dv.Caption = "SampleReceipt MailContent";
                                ShowViewParameters showViewParameters = new ShowViewParameters();
                                showViewParameters.CreatedView = dv;
                                showViewParameters.Context = TemplateContext.PopupWindow;
                                showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                                DialogController dc = Application.CreateController<DialogController>();
                                dc.Accepting += Dc_MailContent;
                                showViewParameters.Controllers.Add(dc);
                                Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                                //dc.Frame.View.ObjectSpace.CommitChanges();


                            }
                        }

                    }

                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Dc_MailContent(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {
                    //DialogController dc = (DialogController)sender as DialogController;
                    //if (dc != null && dc.Frame != null)
                    //{
                    //    eNotificationContentTemplate objenoti = (eNotificationContentTemplate)e.AcceptActionArgs.CurrentObject;
                    //    if (objenoti != null)
                    //    {
                    //        Samplecheckin objsmpl = (Samplecheckin)View.CurrentObject;
                    //        if (objsmpl != null)
                    //        {
                    //            objenoti.SampleCheckin = dc.Frame.View.ObjectSpace.GetObject(objsmpl);
                    //        }
                    //    }
                    //    dc.Frame.View.ObjectSpace.CommitChanges();
                    //}
                }   
                //else if (View.Id == "SubOutSampleRegistrations_ListView_TestOrder" || View.Id == "SubOutSampleRegistrations_ListView_NotificationQueue")
                //{
                //    DialogController dc = (DialogController)sender as DialogController;
                //    if (dc != null && dc.Frame != null)
                //    {
                //        eNotificationContentTemplate objenoti = (eNotificationContentTemplate)e.AcceptActionArgs.CurrentObject;
                //        if (objenoti != null)
                //        {
                //            SubOutSampleRegistrations objsmpl = (SubOutSampleRegistrations)View.CurrentObject;
                //            if (objsmpl != null)
                //            {
                //                objenoti.SubOutSample = dc.Frame.View.ObjectSpace.GetObject(objsmpl);
                //            }
                //        }
                //        dc.Frame.View.ObjectSpace.CommitChanges();
                //    }
                //}
                else if (View.Id == "Reporting_ListView_Delivery")
                {
                    //DialogController dc = (DialogController)sender as DialogController;
                    //if (dc != null && dc.Frame != null)
                    //{
                    //    eNotificationContentTemplate objenoti = (eNotificationContentTemplate)e.AcceptActionArgs.CurrentObject;
                    //    if (objenoti != null)
                    //    {
                    //        Modules.BusinessObjects.SampleManagement.Reporting objRpt = (Modules.BusinessObjects.SampleManagement.Reporting)View.CurrentObject;
                    //        if (objRpt != null)
                    //        {
                    //            objenoti.Reporting = dc.Frame.View.ObjectSpace.GetObject(objRpt);
                    //        }
                    //    }
                    //    dc.Frame.View.ObjectSpace.CommitChanges();
                    //}
                }
                else if (View.Id == "Invoicing_ListView_Delivery")
                {
                    //DialogController dc = (DialogController)sender as DialogController;
                    //if (dc != null && dc.Frame != null)
                    //{
                    //    eNotificationContentTemplate objenoti = (eNotificationContentTemplate)e.AcceptActionArgs.CurrentObject;
                    //    if (objenoti != null)
                    //    {
                    //        Modules.BusinessObjects.Setting.Invoicing.Invoicing objInv = (Modules.BusinessObjects.Setting.Invoicing.Invoicing)View.CurrentObject;
                    //        if (objInv != null)
                    //        {
                    //            objenoti.Invoice = dc.Frame.View.ObjectSpace.GetObject(objInv);
                    //        }
                    //    }
                    //    dc.Frame.View.ObjectSpace.CommitChanges();
                    //}
                    //dc.Frame.View.ObjectSpace.CommitChanges();
                }
                //DialogController dc = (DialogController)sender as DialogController;
                //if (dc != null && dc.Frame != null)
                //{
                //    dc.Frame.View.ObjectSpace.CommitChanges();
                //}

            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void SampleReceipt_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "Samplecheckin_ListView_SampleReceiptNotification")
                {
                    if (View.SelectedObjects.Count > 0)
                    {
                        string strSampleReceipt = string.Empty;
                        foreach (Samplecheckin reqId in View.SelectedObjects)
                        {
                            if (strSampleReceipt == string.Empty)
                            {
                                strSampleReceipt = "'" + reqId.JobID + "'";
                            }
                            else
                            {
                                strSampleReceipt = strSampleReceipt + ",'" + reqId.JobID + "'";
                            }
                        }

                        string strTempPath = Path.GetTempPath();
                        String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                        if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\Preview\SampleReceipt\")) == false)
                        {
                            Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\Preview\SampleReceipt\"));
                        }
                        string strExportedPath = HttpContext.Current.Server.MapPath(@"~\Preview\SampleReceipt\" + timeStamp + ".pdf");
                        XtraReport xtraReport = new XtraReport();

                        objDRDCInfo.WebConfigConn = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                        SetConnectionString();

                        DynamicReportBusinessLayer.BLCommon.SetDBConnection(objDRDCInfo.LDMSQLServerName, objDRDCInfo.LDMSQLDatabaseName, objDRDCInfo.LDMSQLUserID, objDRDCInfo.LDMSQLPassword);
                        //DynamicDesigner.GlobalReportSourceCode.strLT = strLT;
                        ObjReportingInfo.strJobID = strSampleReceipt;
                        xtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("xrReceiptNotification", ObjReportingInfo, false);
                        //DynamicDesigner.GlobalReportSourceCode.AssignLimsDatasource(xtraReport,ObjReportingInfo);
                        xtraReport.ExportToPdf(strExportedPath);
                        string[] path = strExportedPath.Split('\\');
                        int arrcount = path.Count();
                        int sc = arrcount - 3;
                        string OriginalPath = string.Join("/", path.GetValue(sc), path.GetValue(sc + 1), path.GetValue(sc + 2));
                        //WebWindow.CurrentRequestWindow.RegisterClientScript("show", string.Format("window.open(window.location.href.split('{1}')[0]+'{0}');", OriginalPath, View.Id + "/"));
                        WebWindow.CurrentRequestWindow.RegisterClientScript("show", string.Format("window.open('{0}','_blank');", OriginalPath));
                    }
                    else
                    {
                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Warning, timer.Seconds, InformationPosition.Top);
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void Containers_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (ObjectSpace.IsModified)
                {
                    ObjectSpace.CommitChanges();
                }
                Save();
                {
                    Samplecheckin objsmplcheckin = SRInfo.CurrentJob;
                    if (objsmplcheckin != null)
                    {
                        SRInfo.strJobID = objsmplcheckin.JobID;
                        string[] strvmarr = objsmplcheckin.SampleMatries.Split(';');
                        SRInfo.lstSRvisualmat = new List<VisualMatrix>();
                        foreach (string strvmoid in strvmarr.ToList())
                        {
                            VisualMatrix lstvmatobj = ObjectSpace.FindObject<VisualMatrix>(CriteriaOperator.Parse("[Oid] = ?", new Guid(strvmoid)));
                            if (lstvmatobj != null)
                            {
                                SRInfo.lstSRvisualmat.Add(lstvmatobj);
                            }
                        }
                        SampleBottleAllocation newsmplbtlalloc = View.ObjectSpace.FindObject<SampleBottleAllocation>(CriteriaOperator.Parse("[SampleRegistration.JobID.JobID] = ?", SRInfo.strJobID));
                        newsmplbtlalloc.Qty = 1;
                        DetailView dvbottleAllocation = Application.CreateDetailView(View.ObjectSpace, "SampleBottleAllocation_DetailView_SampleRegistration", false, newsmplbtlalloc);
                        dvbottleAllocation.ViewEditMode = ViewEditMode.Edit;
                        //SampleBottleAllocation newsmplbtlalloc = View.ObjectSpace.CreateObject<SampleBottleAllocation>();
                        ShowViewParameters showViewParameters = new ShowViewParameters(dvbottleAllocation);
                        showViewParameters.CreatedView = dvbottleAllocation;
                        showViewParameters.Context = TemplateContext.PopupWindow;
                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                        showViewParameters.CreatedView.Closed += CreatedView_Closed_Container;
                        DialogController dc = Application.CreateController<DialogController>();
                        dc.SaveOnAccept = false;
                        dc.AcceptAction.Active["OkayBtn"] = false;
                        dc.CancelAction.Active["CancelBtn"] = false;
                        dc.CloseOnCurrentObjectProcessing = false;
                        showViewParameters.Controllers.Add(dc);
                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void CreatedView_Closed_Container(object sender, EventArgs e)
        {
            try
            {
                if (Frame is NestedFrame)
                {
                    NestedFrame nestedFrame = (NestedFrame)Frame;
                    if (nestedFrame != null)
                    {
                        CompositeView view = nestedFrame.ViewItem.View;
                        foreach (IFrameContainer frameContainer in view.GetItems<IFrameContainer>())
                        {
                            if ((frameContainer.Frame != null) && (frameContainer.Frame.View != null) && (frameContainer.Frame.View.ObjectSpace != null) && frameContainer.Frame.View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                            {
                                frameContainer.Frame.View.ObjectSpace.Refresh();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void PreInvoiceReport_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                Samplecheckin objSamplecheck = (Samplecheckin)View.CurrentObject;
                string strTempPath = Path.GetTempPath();
                String timeStamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                if (Directory.Exists(HttpContext.Current.Server.MapPath(@"~\Preview\PreInvoice\")) == false)
                {
                    Directory.CreateDirectory(HttpContext.Current.Server.MapPath(@"~\Preview\PreInvoice\"));
                }
                string strExportedPath = HttpContext.Current.Server.MapPath(@"~\Preview\PreInvoice\" + timeStamp + ".pdf");
                XtraReport xtraReport = new XtraReport();

                objDRDCInfo.WebConfigConn = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
                SetConnectionString();

                DynamicReportBusinessLayer.BLCommon.SetDBConnection(objDRDCInfo.LDMSQLServerName, objDRDCInfo.LDMSQLDatabaseName, objDRDCInfo.LDMSQLUserID, objDRDCInfo.LDMSQLPassword);
                ObjReportingInfo.strJobID = "'" + objSamplecheck.JobID + "'";
                xtraReport = DynamicDesigner.GlobalReportSourceCode.GetReportFromLayOut("PreInvoicing_Report", ObjReportingInfo, false);
                xtraReport.ExportToPdf(strExportedPath);
                string[] path = strExportedPath.Split('\\');
                int arrcount = path.Count();
                int sc = arrcount - 3;
                string OriginalPath = string.Join("/", path.GetValue(sc), path.GetValue(sc + 1), path.GetValue(sc + 2));
                //WebWindow.CurrentRequestWindow.RegisterClientScript("show", string.Format("window.open(window.location.href.split('{1}')[0]+'{0}');", OriginalPath, View.Id + "/"));
                WebWindow.CurrentRequestWindow.RegisterClientScript("show", string.Format("window.open('{0}','_blank');", OriginalPath));
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        //public void ResetNavigationCount()
        //{
        //    try
        //    {
        //        ShowNavigationController = Frame.GetController<ShowNavigationItemController>();
        //        ChoiceActionItem parentTaskManagement = ShowNavigationController.ShowNavigationItemAction.Items.FirstOrDefault(i => i.Id == "SampleManagement");
        //        if (parentTaskManagement.Id == "SampleManagement")
        //        {
        //            ChoiceActionItem childRegistration = parentTaskManagement.Items.FirstOrDefault(i => i.Id == "SampleRegistration");
        //            if (childRegistration != null)
        //            {
        //                IObjectSpace objectSpace = Application.CreateObjectSpace();
        //                var count = objectSpace.GetObjectsCount(typeof(Samplecheckin), CriteriaOperator.Parse("[Status] =  'PendingSubmit'"));
        //                var cap = childRegistration.Caption.Split(new string[] { " (" }, StringSplitOptions.None);
        //                if (count > 0)
        //                {
        //                    childRegistration.Caption = cap[0] + " (" + count + ")";
        //                }
        //                else
        //                {
        //                    childRegistration.Caption = cap[0];
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    }
        //}
        public void InsertSamplesInSampleLogin()
        {
            try
            {
                Samplecheckin objSampleCheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                if (objSampleCheckin != null && objSampleCheckin.NoOfSamples > 0)
                {
                    //IObjectSpace os = Application.CreateObjectSpace();
                    UnitOfWork uow = new UnitOfWork(((XPObjectSpace)this.ObjectSpace).Session.DataLayer);
                    Session currentSession = ((XPObjectSpace)this.ObjectSpace).Session;
                    Modules.BusinessObjects.SampleManagement.Samplecheckin obj = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.Samplecheckin>(objSampleCheckin.Oid);
                    Collector objCollector = null;
                    if (objSampleCheckin.Collector != null)
                    {
                        objCollector = uow.GetObjectByKey<Collector>(objSampleCheckin.Collector.Oid);
                    }
                    bool DBAccess = true;
                    int SampleNo = 0;
                    for (int i = 1; i <= objSampleCheckin.NoOfSamples; i++)
                    {
                        Modules.BusinessObjects.SampleManagement.SampleLogIn objSLNew = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                        //objSLNew.JobID = uow.GetObjectByKey<Samplecheckin>(objSampleCheckin.Oid);
                        objSLNew.JobID = obj;
                        if (string.IsNullOrEmpty(objSampleCheckin.SampleMatries) == false)
                        {
                            string[] strSamplematrix = objSampleCheckin.SampleMatries.Split(';');
                            if (strSamplematrix.Count() == 1)
                            {
                                objSLNew.VisualMatrix = uow.GetObjectByKey<Modules.BusinessObjects.Setting.VisualMatrix>(new Guid(strSamplematrix[0].Trim()));
                            }
                        }
                        objSLNew.BatchID = objSampleCheckin.BatchID;
                        objSLNew.PackageNumber = objSampleCheckin.PackageNo;
                        if (obj.DateCollected != null && obj.DateCollected != DateTime.MinValue)
                        {
                            objSLNew.CollectDate = Convert.ToDateTime(obj.DateCollected);
                        }
                        if (obj.CollectionTime != null)
                        {
                            objSLNew.CollectTime = obj.CollectionTime;
                        }
                        if (objCollector != null)
                        {
                            objSLNew.Collector = objCollector;
                        }
                        if (obj.IsSampling)
                        {
                            //objSLNew.IsNotTransferred = true;
                        }
                        if (DBAccess)
                        {
                            SelectedData sprocs = currentSession.ExecuteSproc("GetSampleID", new OperandValue(objSLNew.JobID.ToString()));
                            if (sprocs.ResultSet[1].Rows[0].Values[0] != null)
                            {
                                objSLInfo.SampleID = sprocs.ResultSet[1].Rows[0].Values[0].ToString();
                                SampleNo = Convert.ToInt32(objSLInfo.SampleID);
                                DBAccess = false;
                            }
                            else
                            {
                                return;
                            }
                        }
                        objSLNew.SampleNo = SampleNo;
                        uow.CommitChanges();
                        if (!string.IsNullOrEmpty(objSampleCheckin.NPTest) && objSLNew.VisualMatrix != null)
                        {
                            List<CustomDueDate> lstcustomrequest = uow.Query<CustomDueDate>().Where(j => j.SampleCheckin.Oid == objSampleCheckin.Oid).ToList();
                            VisualMatrix objVisualMatrix = uow.GetObjectByKey<VisualMatrix>(objSLNew.VisualMatrix.Oid);
                            List<string> lstTestNames = objSampleCheckin.NPTest.Split(';').ToList();
                            foreach (string objTest in lstTestNames.ToList())
                            {
                                List<string> lstTestMethodCompo = objTest.Split('|').ToList();
                                if (lstTestMethodCompo.Count == 2)
                                {
                                    CustomDueDate custom = lstcustomrequest.Where(j => j.TestMethod != null && j.TestMethod.MatrixName != null && j.TestMethod.MethodName != null && j.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && j.TestMethod.TestName == lstTestMethodCompo[0] && j.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1]).FirstOrDefault();
                                    List<Testparameter> lstTestParam = uow.Query<Testparameter>().Where(j => j.TestMethod != null && j.TestMethod.MatrixName != null && j.TestMethod.MethodName != null && j.Component != null && j.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && j.TestMethod.TestName == lstTestMethodCompo[0] && j.TestMethod.MethodName.MethodNumber == lstTestMethodCompo[1] && j.Component.Components == "Default" && j.QCType != null && j.QCType.QCTypeName == "Sample").ToList();
                                    if (lstTestParam.Count > 0 && custom != null)
                                    {
                                        if (custom.Parameter == null || custom.Parameter == "AllParam")
                                        {
                                            foreach (Testparameter objTestParam in lstTestParam.ToList())
                                            {
                                                SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objSLNew.Oid));
                                                if (objsp == null)
                                                {
                                                    SampleParameter newsample = new SampleParameter(uow);
                                                    newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSLNew.Oid);
                                                    newsample.Testparameter = objTestParam;
                                                    if(objSampleCheckin.TAT != null)
                                                    { newsample.TAT = uow.GetObjectByKey<TurnAroundTime>(objSampleCheckin.TAT.Oid); }
                                                    
                                                    newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                                                    if (custom.TestHold == true)
                                                    {
                                                        newsample.TestHold = true;
                                                    }
                                                    objSLNew.Test = true;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            string[] param = custom.ParameterDetails.Split(',');
                                            foreach (Testparameter objTestParam in lstTestParam.ToList())
                                            {
                                                if (param.Contains(objTestParam.Oid.ToString()))
                                                {
                                                    SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", objTestParam.Oid, objSLNew.Oid));
                                                    if (objsp == null)
                                                    {
                                                        SampleParameter newsample = new SampleParameter(uow);
                                                        newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSLNew.Oid);
                                                        newsample.Testparameter = objTestParam;
                                                        if (objSampleCheckin.TAT != null)
                                                        { newsample.TAT = uow.GetObjectByKey<TurnAroundTime>(objSampleCheckin.TAT.Oid); }
                                                        newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                                                        objSLNew.Test = true;
                                                        if (custom.TestHold == true)
                                                        {
                                                            newsample.TestHold = true;
                                                        }
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }
                                else if (lstTestMethodCompo.Count == 1)
                                {
                                    TestMethod objTm = ObjectSpace.FindObject<TestMethod>(CriteriaOperator.Parse("[TestName]=? And [IsGroup]=true And [MethodName.GCRecord] Is Null", lstTestMethodCompo[0]));
                                    if (objTm != null)
                                    {
                                        IList<GroupTestMethod> lstgrouptestmed = ObjectSpace.GetObjects<GroupTestMethod>(CriteriaOperator.Parse("[TestMethod.Oid] = ?", objTm.Oid));
                                        foreach (GroupTestMethod objgtm in lstgrouptestmed.ToList())
                                        {
                                            CustomDueDate custom = lstcustomrequest.Where(j => j.TestMethod != null && j.TestMethod.MatrixName != null && j.TestMethod.MatrixName.MatrixName == objVisualMatrix.MatrixName.MatrixName && j.TestMethod.Oid == objgtm.TestMethod.Oid).FirstOrDefault();
                                            IList<Testparameter> lsttestpara = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.Oid] = ? And [QCType.QCTypeName] = 'Sample' And [Component.Components] = 'Default'", objgtm.TestParameter.TestMethod.Oid));
                                            if (custom != null && custom.Parameter == null || custom != null && custom.Parameter == "AllParam")
                                            {
                                                foreach (Testparameter param1 in lsttestpara.ToList())
                                                {
                                                    SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, objSLNew.Oid));
                                                    if (objsp == null)
                                                    {
                                                        SampleParameter newsample = new SampleParameter(uow);
                                                        newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSLNew.Oid);
                                                        newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                                                        newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                                                        newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                                                        newsample.IsGroup = true;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (custom != null && custom.ParameterDetails != null)
                                                {
                                                    string[] param = custom.ParameterDetails.Split(',');
                                                    foreach (Testparameter param1 in lsttestpara.ToList())
                                                    {
                                                        if (param.Contains(param1.Oid.ToString()))
                                                        {
                                                            SampleParameter objsp = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("[Testparameter.Oid] = ? and [Samplelogin.Oid] = ?", param1.Oid, objSLNew.Oid));
                                                            if (objsp == null)
                                                            {
                                                                SampleParameter newsample = new SampleParameter(uow);
                                                                newsample.Samplelogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSLNew.Oid);
                                                                newsample.Testparameter = uow.GetObjectByKey<Testparameter>(param1.Oid);
                                                                newsample.Status = Modules.BusinessObjects.Hr.Samplestatus.PendingEntry;
                                                                newsample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objgtm.Oid);
                                                                newsample.IsGroup = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        SampleNo++;
                    }
                    uow.CommitChanges();

                    XPClassInfo samples = uow.GetClassInfo(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn));
                    IList<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSampleParam = uow.GetObjects(samples, CriteriaOperator.Parse("[JobID.Oid] = ?", objSampleCheckin.Oid), new SortingCollection(), 0, 0, false, true).Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList();

                    foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn sample in lstSampleParam)
                    {
                        AssignBottleAllocationToSamples(uow, sample.Oid);
                        sample.TestSummary = string.Join("; ", new XPQuery<SampleParameter>(uow).Where(i => i.Samplelogin.Oid == sample.Oid && i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.TestName).Distinct().ToList());
                        sample.FieldTestSummary = string.Join(", ", new XPQuery<SampleParameter>(uow).Where(i => i.Samplelogin.Oid == sample.Oid && i.Testparameter != null && i.Testparameter.TestMethod != null && i.Testparameter.TestMethod.IsFieldTest == true).Select(i => i.Testparameter.TestMethod.TestName).Distinct().ToList());
                    }
                    uow.CommitChanges();
                    if (this.Actions["btnSampleTest"] != null)
                    {
                        this.Actions["btnSampleTest"].Caption = "Tests" + "(" + View.ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("[Samplelogin.JobID.Oid] = ?", objSampleCheckin.Oid)).Where(i => i.Testparameter != null && i.Testparameter.TestMethod != null).Select(i => i.Testparameter.TestMethod.Oid).Distinct().Count() + ")";
                    }
                    if (this.Actions["btnBottleAllocation"] != null)
                    {
                        this.Actions["btnBottleAllocation"].Caption = "Containers" + "(" + View.ObjectSpace.GetObjects<Modules.BusinessObjects.SampleManagement.SampleLogIn>(CriteriaOperator.Parse("[JobID.Oid] = ?", objSampleCheckin.Oid)).Sum(i => i.Qty) + ")";
                    }
                    //os.Dispose();
                }
            }


            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        public void UpdateStatusInJobID()
        {
            try
            {
                if (Application.MainWindow.View.ObjectTypeInfo.Type == typeof(Samplecheckin))
                {
                    Samplecheckin objSamplecheckin = (Samplecheckin)Application.MainWindow.View.CurrentObject;
                    if (objSamplecheckin != null && objSamplecheckin.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                    {
                        UnitOfWork uow = new UnitOfWork(((XPObjectSpace)this.ObjectSpace).Session.DataLayer);
                        objSamplecheckin = uow.GetObjectByKey<Samplecheckin>(objSamplecheckin.Oid);
                        DefaultSetting objNavigationView = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));
                        DefaultSetting objSamplePreparation = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("[NavigationItemNameID]='SamplePreparationRootNode'"));
                        List<SampleParameter> lstSamples = uow.Query<SampleParameter>().Where(i => i.Samplelogin != null && i.Samplelogin.JobID != null && i.Samplelogin.JobID.Oid == objSamplecheckin.Oid).ToList();

                        if (objNavigationView != null && objNavigationView.Select)
                        {
                            if (lstSamples != null && lstSamples.Count > 0)
                            {
                                if (lstSamples.Where(i => i.SignOff).Count() == 0)
                                {
                                    objSamplecheckin.Status = Modules.BusinessObjects.Hr.SampleRegistrationSignoffStatus.PendingSigningOff;
                                    uow.CommitChanges();
                                }
                                else
                                  if (lstSamples.Where(i => i.SignOff).Count() < lstSamples.Count)
                                {
                                    objSamplecheckin.Status = Modules.BusinessObjects.Hr.SampleRegistrationSignoffStatus.PartiallySignedOff;
                                    uow.CommitChanges();
                                }
                                else if (lstSamples.Where(i => i.SignOff).Count() == lstSamples.Count)
                                {
                                    objSamplecheckin.Status = Modules.BusinessObjects.Hr.SampleRegistrationSignoffStatus.Signedoff;
                                    uow.CommitChanges();
                                }
                            }
                        }
                        else
                        {
                            if (lstSamples.FirstOrDefault(i => i.SignOff == false) != null)
                            {
                                lstSamples.Where(i => i.SignOff == false).ToList().ForEach(i => { i.SignOff = true; });
                            }
                        }
                        if (objSamplecheckin.IsSampling)
                        {
                            StatusDefinition objStatus = uow.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 29"));
                            if (objStatus != null)
                            {
                                objSamplecheckin.Index = objStatus;
                                if (objNavigationView != null && objNavigationView.Select)
                                {
                                    objSamplecheckin.Status = SampleRegistrationSignoffStatus.Signedoff;
                                }
                                else
                                {
                                    objSamplecheckin.Status = SampleRegistrationSignoffStatus.Submitted;
                                }
                                uow.CommitChanges();
                            }
                        }
                        else
                        {
                            StatusDefinition objStatus = uow.FindObject<StatusDefinition>(CriteriaOperator.Parse("[UqIndexID] = 10"));
                            if (objStatus != null)
                            {
                                objSamplecheckin.Index = objStatus;
                                if (objNavigationView != null && objNavigationView.Select)
                                {
                                    objSamplecheckin.Status = SampleRegistrationSignoffStatus.Signedoff;
                                }
                                else
                                {
                                    objSamplecheckin.Status = SampleRegistrationSignoffStatus.Submitted;
                                }
                                uow.CommitChanges();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void Btn_PreInvoiceDetails_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                Samplecheckin objSampleCheckin = (Samplecheckin)View.CurrentObject;
                if (objSampleCheckin != null)
                {
                    IObjectSpace os = Application.CreateObjectSpace();
                    objSampleCheckin = os.GetObjectByKey<Samplecheckin>(objSampleCheckin.Oid);
                    Invoicing objNewInvoice = os.CreateObject<Invoicing>();
                    objNewInvoice.Status = InviceStatus.PendingInvoicing;
                    objNewInvoice.JobID = objSampleCheckin.JobID;
                    if (objSampleCheckin.QuoteID != null)
                    {
                        CRMQuotes objQuotes = os.GetObjectByKey<CRMQuotes>(objSampleCheckin.QuoteID.Oid);
                        if (objQuotes != null)
                        {
                            objNewInvoice.QuoteID = objQuotes;
                            objNewInvoice.QuotedBy = objQuotes.QuotedBy;
                            objNewInvoice.QuotedDate = objQuotes.QuotedDate;
                        }
                    }
                    if (objSampleCheckin.ContactName != null)
                    {
                        objNewInvoice.PrimaryContact = os.GetObjectByKey<Contact>(objSampleCheckin.ContactName.Oid);
                        if (objSampleCheckin.ContactName.City != null)
                        {
                            objNewInvoice.BillCity = objSampleCheckin.ContactName.City.CityName;
                        }
                        objNewInvoice.BillStreet1 = objSampleCheckin.ContactName.Street1;
                        objNewInvoice.BillStreet2 = objSampleCheckin.ContactName.Street2;
                        objNewInvoice.BillZipCode = objSampleCheckin.ContactName.Zip;
                        objNewInvoice.PO = objSampleCheckin.PO;
                        if (objSampleCheckin.ContactName.Country != null)
                        {
                            objNewInvoice.BillCountry = objSampleCheckin.ContactName.Country.EnglishLongName;
                        }
                        if (objSampleCheckin.ContactName.State != null)
                        {
                            objNewInvoice.BillCountry = objSampleCheckin.ContactName.State.LongName;
                        }

                    }
                    objNewInvoice.DueDate = Convert.ToDateTime(objSampleCheckin.DueDate);
                    if (objSampleCheckin.TAT != null)
                    {
                        objNewInvoice.TAT = objSampleCheckin.TAT;
                    }
                    if (objSampleCheckin.ProjectID != null)
                    {
                        objNewInvoice.ProjectID = objSampleCheckin.ProjectID;
                    }
                    if (objSampleCheckin.ClientName != null)
                    {
                        objNewInvoice.AccountNumber = objSampleCheckin.ClientName.Account;
                        objNewInvoice.Client = objSampleCheckin.ClientName;
                        objNewInvoice.Email = objNewInvoice.Client.Contacts.Where(i => i.Email != null && i.IsInvoice == true).Select(i => i.Email).FirstOrDefault();
                    }
                    DetailView dvbottleAllocation = Application.CreateDetailView(os, "Invoicing_DetailView_PreInvoiceDetails", false, objNewInvoice);
                    ShowViewParameters showViewParameters = new ShowViewParameters(dvbottleAllocation);
                    showViewParameters.CreatedView = dvbottleAllocation;
                    showViewParameters.Context = TemplateContext.PopupWindow;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.AcceptAction.Active["OkayBtn"] = false;
                    dc.CancelAction.Active["CancelBtn"] = false;
                    dc.CloseOnCurrentObjectProcessing = false;
                    showViewParameters.Controllers.Add(dc);
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        public void InsertPTStudyLogDetails(Guid JobID)
        {
            try
            {
                Session currentSession = ((XPObjectSpace)this.ObjectSpace).Session;
                UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                Samplecheckin objJobID = uow.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid]= ?", JobID));
                if (objJobID != null && objJobID.ProjectCategory != null && (objJobID.ProjectCategory.CategoryName == "PT" || objJobID.ProjectCategory.CategoryName == "DOC" || objJobID.ProjectCategory.CategoryName == "MDL"))
                {
                    PTStudyLog Objstudylog = uow.FindObject<PTStudyLog>(CriteriaOperator.Parse("[SampleCheckinJobID.JobID]= ?", objJobID.JobID));
                    if (Objstudylog == null)
                    {
                        PTStudyLog objPT = new PTStudyLog(uow);
                        objPT.JobID = objJobID.JobID;
                        objPT.DatePTSampleReceived = objJobID.RecievedDate;
                        objPT.SampleCheckinJobID = objJobID;
                        objPT.Category = objJobID.ProjectCategory.CategoryName;
                        objPT.Save();
                        uow.CommitChanges();
                        XPClassInfo sampleParameterinfo;
                        sampleParameterinfo = uow.GetClassInfo(typeof(SampleParameter));
                        IList<SampleParameter> lstSampleParam = uow.GetObjects(sampleParameterinfo, CriteriaOperator.Parse("[Samplelogin.JobID.Oid]=?", objJobID.Oid), new SortingCollection(), 0, 0, false, true).Cast<SampleParameter>().ToList();
                        foreach (SampleParameter objParam in lstSampleParam)
                        {
                            PTStudyLogResults objPTRes = new PTStudyLogResults(uow);
                            SampleParameter objParameter = uow.GetObjectByKey<SampleParameter>(objParam.Oid);
                            objPTRes.PTStudyLog = objPT;
                            objPTRes.SampleID = objParameter;
                            if (objParam.Samplelogin != null)
                            {
                                objPTRes.SampleLogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objParam.Samplelogin.Oid);
                            }
                            objPTRes.Save();
                        }
                        uow.CommitChanges();
                    }
                    else
                    {
                        Objstudylog.JobID = objJobID.JobID;
                        Objstudylog.DatePTSampleReceived = objJobID.RecievedDate;
                        Objstudylog.SampleCheckinJobID = objJobID;
                        Objstudylog.Category = objJobID.ProjectCategory.CategoryName;
                        uow.CommitChanges();
                        XPClassInfo sampleParameterinfo;
                        sampleParameterinfo = uow.GetClassInfo(typeof(SampleParameter));
                        IList<SampleParameter> lstSampleParam = uow.GetObjects(sampleParameterinfo, CriteriaOperator.Parse("[Samplelogin.JobID.Oid]=?", objJobID.Oid), new SortingCollection(), 0, 0, false, true).Cast<SampleParameter>().ToList();
                        foreach (SampleParameter objParam in lstSampleParam)
                        {
                            PTStudyLogResults objPTRes = new PTStudyLogResults(uow);
                            SampleParameter objParameter = uow.GetObjectByKey<SampleParameter>(objParam.Oid);
                            objPTRes.PTStudyLog = Objstudylog;
                            objPTRes.SampleID = objParameter;
                            if (objParam.Samplelogin != null)
                            {
                                objPTRes.SampleLogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objParam.Samplelogin.Oid);
                            }
                            objPTRes.Save();
                        }
                        uow.CommitChanges();
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        public void InsertPTStudyLogTest(UnitOfWork uow, SampleParameter objParam)
        {
            try
            {
                if (objParam != null && objParam.Samplelogin != null && objParam.Samplelogin.JobID != null)
                {
                    Samplecheckin objJobID = uow.FindObject<Samplecheckin>(CriteriaOperator.Parse("[Oid]= ?", objParam.Samplelogin.JobID.Oid));
                    if (objJobID != null && objJobID.ProjectCategory != null && objJobID.Status != SampleRegistrationSignoffStatus.PendingSubmit && (objJobID.ProjectCategory.CategoryName == "PT" || objJobID.ProjectCategory.CategoryName == "DOC" || objJobID.ProjectCategory.CategoryName == "MDL"))
                    {
                        PTStudyLogResults objOldPTStudyTest = uow.FindObject<PTStudyLogResults>(CriteriaOperator.Parse("[SampleID] = ? And [SampleLogin] = ?", objParam.Oid, objParam.Samplelogin));
                        PTStudyLog Objstudylog = uow.FindObject<PTStudyLog>(CriteriaOperator.Parse("[SampleCheckinJobID.JobID]= ?", objJobID.JobID));
                        if (objOldPTStudyTest == null && Objstudylog != null)
                        {
                            PTStudyLogResults objPTRes = new PTStudyLogResults(uow);
                            //SampleParameter objParameter = uow.GetObjectByKey<SampleParameter>(objParam.Oid);
                            objPTRes.PTStudyLog = Objstudylog;
                            objPTRes.SampleID = objParam;
                            if (objParam.Samplelogin != null)
                            {
                                objPTRes.SampleLogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objParam.Samplelogin.Oid);
                            }
                            objPTRes.Save();
                        }
                    }

                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        public void DeletePTStudyLogTest(UnitOfWork uow, SampleParameter objParam)
        {
            try
            {
                if (objParam != null && objParam.Samplelogin != null && objParam.Samplelogin.JobID != null && objParam.Samplelogin.JobID.Status != SampleRegistrationSignoffStatus.PendingSubmit &&
                    objParam.Samplelogin.JobID.ProjectCategory != null && (objParam.Samplelogin.JobID.ProjectCategory.CategoryName == "PT" || objParam.Samplelogin.JobID.ProjectCategory.CategoryName == "DOC" || objParam.Samplelogin.JobID.ProjectCategory.CategoryName == "MDL"))
                {
                    PTStudyLogResults objOldPTStudyTest = uow.FindObject<PTStudyLogResults>(CriteriaOperator.Parse("[SampleID] = ? And [SampleLogin] = ?", objParam.Oid, objParam.Samplelogin));
                    if (objOldPTStudyTest != null)
                    {
                        uow.Delete(objOldPTStudyTest);
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestEdit_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (View.Id == "SampleLogIn_ListView_Copy_SampleRegistration")
                {
                    DashboardView dashboard = Application.CreateDashboardView(ObjectSpace, "TestEdit_DashboardView", false);
                    ShowViewParameters showViewParameters = new ShowViewParameters(dashboard);
                    showViewParameters.Context = TemplateContext.NestedFrame;
                    showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                    showViewParameters.CreatedView.Closed += CreatedView_Closed;
                    DialogController dc = Application.CreateController<DialogController>();
                    dc.SaveOnAccept = false;
                    dc.AcceptAction.Active.SetItemValue("disable", false);
                    dc.CancelAction.Active.SetItemValue("disable", false);
                    dc.CloseOnCurrentObjectProcessing = false;
                    showViewParameters.Controllers.Add(dc);
                    Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestEditAddTest_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                NestedFrame nestedFrame = (NestedFrame)Frame;
                if (nestedFrame != null)
                {
                    CompositeView view = nestedFrame.ViewItem.View;
                    DashboardViewItem testEditListView = ((DashboardView)view).FindItem("Test_Edit_Form") as DashboardViewItem;
                    if (testEditListView != null && testEditListView.InnerView != null)
                    {
                        Samplecheckin objSamplecheckin = (Samplecheckin)testEditListView.InnerView.CurrentObject;
                        if (objSamplecheckin.TestEditSampleLogIn == null)
                        {
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "SelectASampleID"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                        }
                        else if (objSamplecheckin != null && objSamplecheckin.TestEditSampleLogIn != null && objSamplecheckin.TestEditSampleLogIn.VisualMatrix != null && objSamplecheckin.TestEditSampleLogIn.VisualMatrix.MatrixName != null)
                        {
                            //List<Guid> lstTestParameter = new List<Guid>();
                            ////List<Guid> editTestTPOid = ((ListView)View).CollectionSource.List.Cast<SampleParameter>().Select(m => m.Testparameter.Oid).ToList();
                            //foreach (Testparameter objParam in ((ListView)View).CollectionSource.List.Cast<SampleParameter>().Select(m => m.Testparameter))
                            //{
                            //    List<Testparameter> editTestTParam = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.MatrixName.MatrixName] = ? And [TestMethod.TestName] = ? And [TestMethod.MethodName.MethodNumber] = ?", objParam.TestMethod.MatrixName.MatrixName, objParam.TestMethod.TestName, objParam.TestMethod.MethodName.MethodNumber)).ToList();
                            //    foreach (Testparameter newObjTestParam in editTestTParam)
                            //    {
                            //        lstTestParameter.Add(newObjTestParam.Oid);
                            //    }
                            //}
                            List<Guid> lstTestParameter = ((ListView)View).CollectionSource.List.Cast<SampleParameter>().SelectMany(m => ObjectSpace.GetObjects<Testparameter>
                            (CriteriaOperator.Parse("[TestMethod.MatrixName.MatrixName] = ? And [TestMethod.TestName] = ? And [TestMethod.MethodName.MethodNumber] = ?", m.Testparameter.TestMethod.MatrixName.MatrixName, m.Testparameter.TestMethod.TestName, m.Testparameter.TestMethod.MethodName.MethodNumber))).Select(objParam => objParam.Oid).ToList();
                            IObjectSpace objectSpace = Application.CreateObjectSpace();
                            CollectionSource cs = new CollectionSource(ObjectSpace, typeof(Testparameter));
                            using (XPView lstview = new XPView(((XPObjectSpace)this.ObjectSpace).Session, typeof(Testparameter)))
                            {
                                lstview.Criteria = CriteriaOperator.Parse("[TestMethod.MatrixName.Oid] = ?", objSamplecheckin.TestEditSampleLogIn.VisualMatrix.MatrixName.Oid);
                                lstview.Properties.Add(new ViewProperty("SPMatrix", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.MatrixName.MatrixName", true, true));
                                lstview.Properties.Add(new ViewProperty("SPTest", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.TestName", true, true));
                                lstview.Properties.Add(new ViewProperty("SPMethod", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.MethodName.MethodNumber", true, true));
                                lstview.Properties.Add(new ViewProperty("SPoid", DevExpress.Xpo.SortDirection.Ascending, "MAX(Oid)", false, true));
                                List<object> groups = new List<object>();
                                foreach (ViewRecord rec in lstview)
                                    groups.Add(rec["SPoid"]);
                                cs.Criteria["Filter"] = new GroupOperator(GroupOperatorType.And, new NotOperator(new InOperator("Oid", lstTestParameter)),
                                new InOperator("Oid", groups));
                            }
                            ListView createListView = Application.CreateListView("Testparameter_LookupListView_TestEdit", cs, false);
                            ShowViewParameters showViewParameters = new ShowViewParameters(createListView);
                            showViewParameters.Context = TemplateContext.NestedFrame;
                            showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                            showViewParameters.CreatedView.Closed += CreatedView_Closed;
                            DialogController dc = Application.CreateController<DialogController>();
                            dc.SaveOnAccept = false;
                            dc.CloseOnCurrentObjectProcessing = false;
                            dc.Accepting += EditTestTestParameter_Accepting;
                            dc.AcceptAction.Executed += editTestAcceptAction_Executed;
                            showViewParameters.Controllers.Add(dc);
                            Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void editTestAcceptAction_Executed(object sender, ActionBaseEventArgs e)
        {
            try
            {
                int selectedItemCount = 0;
                if (objSLInfo.lstEditTest_TP != null)
                {
                    if (Frame is NestedFrame)
                    {
                        NestedFrame nestedFrame = (NestedFrame)Frame;
                        if (nestedFrame != null)
                        {
                            CompositeView view = nestedFrame.ViewItem.View;
                            DashboardViewItem testEditListView = ((DashboardView)view).FindItem("Test_Edit_Form") as DashboardViewItem;
                            DefaultSetting objNavigationView = ObjectSpace.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));

                            if (testEditListView != null && testEditListView.InnerView != null)
                            {
                                Samplecheckin objSamplecheckin = testEditListView.InnerView.CurrentObject as Samplecheckin;
                                if (objSamplecheckin != null && objSamplecheckin.TestEditSampleLogIn != null)
                                {
                                    foreach (Testparameter objTestParam in objSLInfo.lstEditTest_TP)
                                    {
                                        selectedItemCount = objSLInfo.lstEditTest_TP.Count;
                                        List<Testparameter> editTestTPOid = ObjectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.MatrixName.MatrixName] = ? And [TestMethod.TestName] = ? And [TestMethod.MethodName.MethodNumber] = ?", objTestParam.TestMethod.MatrixName.MatrixName, objTestParam.TestMethod.TestName, objTestParam.TestMethod.MethodName.MethodNumber)).ToList();
                                        foreach (Testparameter objTest in editTestTPOid)
                                        {
                                            Modules.BusinessObjects.SampleManagement.SampleLogIn objSampleLogIn = View.ObjectSpace.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>
                                            (CriteriaOperator.Parse("[Oid] = ?", objSamplecheckin.TestEditSampleLogIn.Oid));
                                            Testparameter objTestParameter = View.ObjectSpace.FindObject<Testparameter>(CriteriaOperator.Parse("[Oid] = ?", objTest.Oid));
                                            SampleBottleAllocation smplnew = View.ObjectSpace.CreateObject<SampleBottleAllocation>();
                                            SampleParameter objSampleParameter = View.ObjectSpace.CreateObject<SampleParameter>();
                                            objSampleParameter.Testparameter = objTestParameter;
                                            objSampleParameter.Samplelogin = objSampleLogIn;
                                            smplnew.SampleRegistration = objSampleLogIn;
                                            smplnew.TestMethod = objTestParameter.TestMethod;
                                            smplnew.BottleID = "A";
                                            ((ListView)View).CollectionSource.Add(objSampleParameter);
                                            if (objNavigationView != null && !objNavigationView.Select)
                                            {
                                                if (objSampleLogIn.JobID.Status > 0)
                                                {
                                                    objSampleLogIn.Testparameters.Where(i => i.SampleParameter.Count > 0).SelectMany(i => i.SampleParameter).ToList().ForEach(i => i.SignOff = true);

                                                }
                                            }
                                        }
                                    }



                                    View.ObjectSpace.CommitChanges();
                                    //using (XPView lstview = new XPView(((XPObjectSpace)this.ObjectSpace).Session, typeof(Testparameter)))
                                    //{
                                    //    lstview.Criteria = CriteriaOperator.Parse("[TestMethod.MatrixName.Oid] = ?", objSamplecheckin.TestEditSampleLogIn.VisualMatrix.MatrixName.Oid);
                                    //    //lstview.Criteria = CriteriaOperator.Parse("[SignOff] = True And [Samplelogin.IsNotTransferred] = false And [GCRecord] IS NULL And [Samplelogin] IS NOT NULL and ([ABID] is Null or ([ABID] is not null))");
                                    //    lstview.Properties.Add(new ViewProperty("SPMatrix", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.MatrixName.MatrixName", true, true));
                                    //    lstview.Properties.Add(new ViewProperty("SPTest", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.TestName", true, true));
                                    //    lstview.Properties.Add(new ViewProperty("SPMethod", DevExpress.Xpo.SortDirection.Ascending, "TestMethod.MethodName.MethodNumber", true, true));
                                    //    lstview.Properties.Add(new ViewProperty("SPoid", DevExpress.Xpo.SortDirection.Ascending, "MAX(Oid)", false, true));
                                    //    List<object> groups = new List<object>();
                                    //    foreach (ViewRecord rec in lstview)
                                    //        groups.Add(rec["SPoid"]);
                                    //    //((ListView)View).CollectionSource.Criteria["TestEditFilter"] = new InOperator("Oid", groups);
                                    //}
                                    View.Refresh();
                                    if (selectedItemCount == 1)
                                    {
                                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "TestsAddedSuccessfully"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                                    }
                                    if (selectedItemCount > 1 && selectedItemCount != 0)
                                    {
                                        Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "TestsAddedSuccessfully>1"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void EditTestTestParameter_Accepting(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                if (e.AcceptActionArgs.SelectedObjects.Count > 0)
                {
                    objSLInfo.lstEditTest_TP = e.AcceptActionArgs.SelectedObjects.Cast<Testparameter>().ToList();
                }
                else
                {
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "SelectATestToAdd"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                    e.Cancel = true;
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestEditRemoveTest_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                ASPxGridListEditor gridListEditor = ((ListView)View).Editor as ASPxGridListEditor;
                int selectedItemCount = 0;
                if (Frame is NestedFrame)
                {
                    NestedFrame nestedFrame = (NestedFrame)Frame;
                    if (nestedFrame != null)
                    {
                        CompositeView view = nestedFrame.ViewItem.View;
                        DashboardViewItem testEditListView = ((DashboardView)view).FindItem("Test_Edit_Form") as DashboardViewItem;
                        if (testEditListView != null && testEditListView.InnerView != null)
                        {
                            Samplecheckin objSamplecheckin = testEditListView.InnerView.CurrentObject as Samplecheckin;
                            if (objSamplecheckin != null && objSamplecheckin.TestEditSampleLogIn != null)
                            {
                                if (View.SelectedObjects.Count > 0)
                                {
                                    selectedItemCount = View.SelectedObjects.Count;
                                    IObjectSpace objectSpace = Application.CreateObjectSpace();
                                    foreach (SampleParameter testEditSampleParameter in View.SelectedObjects)
                                    {
                                        IList<Testparameter> lstTestParameter = objectSpace.GetObjects<Testparameter>(CriteriaOperator.Parse("[TestMethod.MatrixName.MatrixName] = ? And [TestMethod.TestName] = ? And [TestMethod.MethodName.MethodNumber] = ?",
                                            testEditSampleParameter.Testparameter.TestMethod.MatrixName.MatrixName, testEditSampleParameter.Testparameter.TestMethod.TestName, testEditSampleParameter.Testparameter.TestMethod.MethodName.MethodNumber)).ToList();
                                        IList<SampleParameter> lstSampleParams = objectSpace.GetObjects<SampleParameter>(new InOperator("Testparameter.Oid",
                                            lstTestParameter.Select(tp => tp.Oid))).Where(f => f.Samplelogin != null && f.Samplelogin.Oid == objSamplecheckin.TestEditSampleLogIn.Oid).ToList();
                                        foreach (SampleParameter objSampleParameter in lstSampleParams)
                                        {
                                            if (string.IsNullOrEmpty(objSampleParameter.Result) && objSampleParameter.PrepMethodCount == 0 && (objSampleParameter.UQABID == null || objectSpace.IsDeletedObject(objSampleParameter.UQABID)))
                                            {
                                                SampleParameter objSPResult = objectSpace.GetObject<SampleParameter>(objSampleParameter);
                                                objectSpace.Delete(objSampleParameter);
                                                ((ListView)View).CollectionSource.Remove(testEditSampleParameter);
                                                objectSpace.CommitChanges();
                                                if (selectedItemCount == 1)
                                                {
                                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "TestRemoved"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                                                }
                                                else if (selectedItemCount > 1 && selectedItemCount != 0)
                                                {
                                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "TestRemoved>1"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                                                }
                                            }
                                            else if (!string.IsNullOrEmpty(objSampleParameter.Result) || objSampleParameter.PrepMethodCount > 0 || objSampleParameter.UQABID != null)
                                            {
                                                gridListEditor.Grid.Selection.CancelSelection();
                                                gridListEditor.Grid.Selection.UnselectRowByKey(testEditSampleParameter.Oid);
                                                //if (objSampleParameter.PrepMethodCount > 0 && !string.IsNullOrEmpty(objSampleParameter.Result))
                                                //{
                                                //    Application.ShowViewStrategy.ShowMessage("Prepmethod processed, unable to remove the tests from the samples.", InformationType.Warning, timer.Seconds, InformationPosition.Top);
                                                //}
                                                //else if (objSampleParameter.UQABID != null && !string.IsNullOrEmpty(objSampleParameter.Result))
                                                //{
                                                //    Application.ShowViewStrategy.ShowMessage("QCBatch created, unable to remove the tests from the samples.", InformationType.Warning, timer.Seconds, InformationPosition.Top);
                                                //}
                                                //else if(!string.IsNullOrEmpty(objSampleParameter.Result))
                                                //{
                                                //    Application.ShowViewStrategy.ShowMessage("Results processed, unable to remove the tests from the samples.", InformationType.Warning, timer.Seconds, InformationPosition.Top);
                                                //}
                                                //Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "ItemCannotBeRemoved"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                                                //Application.ShowViewStrategy.ShowMessage("The test with parameter " + objTestParameter.Parameter.ParameterName + " can not be deleted, since it has referenced already", InformationType.Warning, timer.Seconds, InformationPosition.Top);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "SelectAnItemToRemove"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestEditCopyTest_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            try
            {
                if (((ListView)View).CollectionSource.List.Count > 0)
                {
                    if (Frame is NestedFrame nestedFrame && nestedFrame.ViewItem.View is CompositeView view)
                    {
                        DashboardViewItem testEditListView = ((DashboardView)view).FindItem("TestEdit_Grid") as DashboardViewItem;
                        DashboardViewItem testEditDetailView = ((DashboardView)view).FindItem("Test_Edit_Form") as DashboardViewItem;

                        if (testEditListView != null && testEditDetailView != null &&
                            testEditListView.InnerView.Id == "SampleParameter_ListView_TestEdit" &&
                            testEditDetailView.InnerView.Id == "Samplecheckin_DetailView_TestEdit")
                        {
                            Samplecheckin objSamplecheckin = (Samplecheckin)testEditDetailView.InnerView.CurrentObject;
                            SRInfo.strSampleID = objSamplecheckin.TestEditSampleLogIn.SampleID;
                            if (objSamplecheckin.TestEditSampleLogIn == null)
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "SelectASampleID"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                            }
                            else if (objSamplecheckin.TestEditSampleLogIn != null)
                            {
                                IList selectedItems = View.SelectedObjects;
                                IList unselectedItems = new List<object>();
                                IList AllItems = ((ListView)View).CollectionSource.List;
                                foreach (object obj in ((ListView)View).CollectionSource.List)
                                {
                                    if (!selectedItems.Contains(obj))
                                    {
                                        unselectedItems.Add(obj);
                                    }
                                }
                                List<string> focusedTest = new List<string>();
                                IObjectSpace objectSpace = Application.CreateObjectSpace();
                                foreach (SampleParameter testEditSampleParameter in AllItems)
                                {
                                    SampleParameter objSampleParameter = objectSpace.GetObject(testEditSampleParameter);
                                    if (objSampleParameter != null)
                                    {
                                        testParameterOid.Add(testEditSampleParameter.Testparameter.Oid);
                                        sampleParameterOid.Add(testEditSampleParameter.Oid);
                                        focusedTest.Add(objSampleParameter.Testparameter.TestMethod.MatrixName.MatrixName.ToString());
                                    }
                                    objSLInfo.SLOid = testEditSampleParameter.Samplelogin.Oid.ToString();
                                }
                                object objToShow = objectSpace.CreateObject(typeof(SampleParameter));
                                if (objToShow != null)
                                {
                                    CollectionSource collectionSource = new CollectionSource(objectSpace, typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn));
                                    //collectionSource.Criteria.Clear();
                                    if (!string.IsNullOrEmpty(objSLInfo.SLOid))
                                    {
                                        DashboardView dashboard = Application.CreateDashboardView(ObjectSpace, "TestEdit_CopyTestsToSample_Dashboard", false);
                                        ShowViewParameters showViewParameters = new ShowViewParameters(dashboard);
                                        showViewParameters.Context = TemplateContext.NestedFrame;
                                        showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                                        showViewParameters.CreatedView.Closed += CreatedView_Closed;
                                        DialogController dc = Application.CreateController<DialogController>();
                                        dc.SaveOnAccept = false;
                                        //dc.AcceptAction.Active.SetItemValue("disable", false);
                                        //dc.CancelAction.Active.SetItemValue("disable", false);
                                        dc.CloseOnCurrentObjectProcessing = false;
                                        dc.Accepting += TestEditDashboardSampleLogin_Accepting;
                                        showViewParameters.Controllers.Add(dc);
                                        Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));

                                        //collectionSource.Criteria["filter1"] = CriteriaOperator.Parse("[JobID.JobID]='" + SRInfo.strJobID + "' and Oid <> ?", new Guid(objSLInfo.SLOid));
                                        //ListView listView = Application.CreateListView("SampleLogIn_LookupListView_EditTest", collectionSource, false);
                                        //ShowViewParameters showViewParameters = new ShowViewParameters(listView);
                                        //showViewParameters.CreatedView = listView;
                                        //showViewParameters.Context = TemplateContext.PopupWindow;
                                        //showViewParameters.TargetWindow = TargetWindow.NewModalWindow;
                                        //DialogController dc = Application.CreateController<DialogController>();
                                        //dc.SaveOnAccept = false;
                                        //dc.Accepting += EditTestCopyTest_Accepting;
                                        //dc.CloseOnCurrentObjectProcessing = false;
                                        //showViewParameters.Controllers.Add(dc);
                                        //Application.ShowViewStrategy.ShowView(showViewParameters, new ShowViewSource(null, null));
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "NoTestsAvailable"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }

        private void TestEditDashboardSampleLogin_Accepting(object sender, DialogControllerAcceptingEventArgs e)
        {
            try
            {
                DialogController dialogController = sender as DialogController;
                if (dialogController.Frame.View.Id == "TestEdit_CopyTestsToSample_Dashboard")
                {
                    DashboardViewItem testEditListView = ((DashboardView)dialogController.Frame.View).FindItem("TestEdit_SampleLogin_Grid") as DashboardViewItem;
                    DashboardViewItem testEditDetailView = ((DashboardView)dialogController.Frame.View).FindItem("TestEdit_SampleLogin_Form") as DashboardViewItem;

                    if (testEditListView != null && testEditDetailView != null &&
                        testEditListView.InnerView.Id == "SampleLogIn_LookupListView_EditTest" &&
                        testEditDetailView.InnerView.Id == "SampleLogIn_DetailView_EditTest")
                    {
                        if (testEditListView.InnerView.SelectedObjects.Count > 0)
                        {
                            int selectedItemCount = testEditListView.InnerView.SelectedObjects.Count;
                            ObjectSpace.CommitChanges();
                            IObjectSpace os = Application.CreateObjectSpace();
                            Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                            UnitOfWork uow = new UnitOfWork(((XPObjectSpace)os).Session.DataLayer);
                            IList<Testparameter> objtp = null;
                            Samplecheckin objJobId = null;
                            if (testParameterOid.Count > 0)
                            {
                                XPClassInfo TestParameterinfo;
                                TestParameterinfo = uow.GetClassInfo(typeof(Testparameter));
                                objtp = uow.GetObjects(TestParameterinfo, new InOperator("Oid", testParameterOid), null, int.MaxValue, false, true).Cast<Testparameter>().ToList();
                            }
                            List<Guid> lstSampleOid = new List<Guid>();
                            foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn obj in testEditListView.InnerView.SelectedObjects)
                            //foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn obj in e.AcceptActionArgs.SelectedObjects)
                            {
                                if (objtp != null)
                                {
                                    lstSampleOid.Add(obj.Oid);
                                    if (objJobId == null)
                                    {
                                        objJobId = obj.JobID;
                                    }
                                    CriteriaOperator criteria = CriteriaOperator.Parse("[Oid]='" + obj.Oid + "'");
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSL = uow.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(criteria);
                                    XPClassInfo TestParameterinfo;
                                    TestParameterinfo = uow.GetClassInfo(typeof(SampleParameter));
                                    IList<SampleParameter> objsp = uow.GetObjects(TestParameterinfo, new InOperator("Oid", sampleParameterOid), null, int.MaxValue, false, true).Cast<SampleParameter>().ToList();
                                    DefaultSetting objNavigationView = uow.FindObject<DefaultSetting>(CriteriaOperator.Parse("NavigationItemNameID='RegistrationSigningOff'"));

                                    {
                                        IList<SampleParameter> lsts = ObjectSpace.GetObjects<SampleParameter>(CriteriaOperator.Parse("Samplelogin.Oid=? ", objSL.Oid));
                                        foreach (SampleParameter item in lsts)
                                        {
                                            var parametersToRemove1 = objSL.Testparameters.Where(objTestSL => !objtp.Contains(objTestSL) && (!string.IsNullOrEmpty(item.uqQCBatchID) || !string.IsNullOrEmpty(item.PrepBatchID) || !string.IsNullOrEmpty(item.Result))).ToList();
                                            foreach (var objtestparameter in parametersToRemove1)
                                            {
                                                SampleParameter objsampleparameter = ObjectSpace.FindObject<SampleParameter>(CriteriaOperator.Parse("Testparameter.Oid=? ", objtestparameter.Oid));
                                                if (objsampleparameter != null)
                                                {

                                                    if (!string.IsNullOrEmpty(objsampleparameter.uqQCBatchID))
                                                    {
                                                        Application.ShowViewStrategy.ShowMessage("In this " + objSL.SampleID + " a test with a created QCbatchID was found, so the CopyToTest function did not copy it. ", InformationType.Info, timer.Seconds, InformationPosition.Top);
                                                        return;
                                                    }
                                                    else if (objsampleparameter.PrepMethodCount > 0)
                                                    {
                                                        Application.ShowViewStrategy.ShowMessage("In this " + objSL.SampleID + " a test with a created PrepBatchID was found, so the CopyToTest function did not copy it. ", InformationType.Info, timer.Seconds, InformationPosition.Top);
                                                        return;
                                                    }
                                                    else if (!string.IsNullOrEmpty(objsampleparameter.Result))
                                                    {
                                                        Application.ShowViewStrategy.ShowMessage("In this " + objSL.SampleID + " a test with a created result  was found, so the CopyToTest function did not copy it. ", InformationType.Info, timer.Seconds, InformationPosition.Top);
                                                        return;
                                                    }
                                                }
                                            }
                                            var parametersToRemove = objSL.Testparameters.Where(objTestSL => !objtp.Contains(objTestSL) && string.IsNullOrEmpty(item.uqQCBatchID) && string.IsNullOrEmpty(item.PrepBatchID) && string.IsNullOrEmpty(item.Result)).ToList();
                                            foreach (var parameterToRemove in parametersToRemove)
                                            {
                                                objSL.Testparameters.Remove(parameterToRemove);
                                            }
                                        }



                                        //objSL.Testparameters.Clear();
                                        foreach (Testparameter objtestperam in objtp)
                                        {
                                            if (!objSL.Testparameters.Contains(objtestperam))
                                            {
                                                foreach (SampleParameter sp in objsp)
                                                {
                                                    if (sp != null)
                                                    {
                                                        if (sp.Testparameter != null && objtestperam.Oid == sp.Testparameter.Oid)
                                                        {
                                                            objSL.Testparameters.Add(objtestperam);

                                                            if (objNavigationView != null && !objNavigationView.Select)
                                                            {
                                                                if (objSL.JobID.Status > 0)
                                                                {
                                                                    objSL.Testparameters.Where(i => i.SampleParameter.Count > 0).SelectMany(i => i.SampleParameter).ToList().ForEach(i => i.SignOff = true);

                                                                }
                                                            }
                                                        }
                                                    }

                                                }
                                            }
                                        }

                                        objSL.Save();
                                        uow.CommitChanges();
                                    }
                                    AssignBottleAllocationToSamples(uow, objSL.Oid);
                                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSample = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSL.Oid);
                                    IList<SampleParameter> childsampleparemter = uow.GetObjects(uow.GetClassInfo(typeof(SampleParameter)), CriteriaOperator.Parse("[Samplelogin]=?", objSample.Oid), null, int.MaxValue, false, true).Cast<SampleParameter>().ToList();

                                    foreach (SampleParameter Parentsp in objsp)
                                    {
                                        if (Parentsp != null)
                                        {
                                            foreach (SampleParameter CopiedSpPara in childsampleparemter)
                                            {
                                                if (CopiedSpPara != null && Parentsp.Testparameter.Oid == CopiedSpPara.Testparameter.Oid)
                                                {
                                                    CopiedSpPara.TAT = Parentsp.TAT;
                                                    CopiedSpPara.SubOut = Parentsp.SubOut;
                                                }
                                            }
                                        }
                                    }
                                    uow.CommitChanges();
                                }
                            }

                            if (testParameterOid.Count > 0)
                            {
                                testParameterOid.Clear();
                            }
                            if (sampleParameterOid.Count > 0)
                            {
                                sampleParameterOid.Clear();
                            }

                            if (objJobId != null && lstSampleOid != null && lstSampleOid.Count > 0 && objJobId.Status != SampleRegistrationSignoffStatus.PendingSubmit)
                            {
                                if (objJobId != null && objJobId.ProjectCategory != null && (objJobId.ProjectCategory.CategoryName == "PT" || objJobId.ProjectCategory.CategoryName == "DOC" || objJobId.ProjectCategory.CategoryName == "MDL"))
                                {
                                    PTStudyLog Objstudylog = uow.FindObject<PTStudyLog>(CriteriaOperator.Parse("[SampleCheckinJobID.JobID]= ?", objJobId.JobID));
                                    if (Objstudylog != null)
                                    {
                                        foreach (Guid objSampleLogInNew in lstSampleOid.ToList())
                                        {
                                            XPClassInfo sampleParameterinfo;
                                            sampleParameterinfo = uow.GetClassInfo(typeof(SampleParameter));
                                            IList<SampleParameter> lstSampleParam = uow.GetObjects(sampleParameterinfo, CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSampleLogInNew), new SortingCollection(), 0, 0, false, true).Cast<SampleParameter>().ToList();
                                            foreach (SampleParameter objParam in lstSampleParam)
                                            {
                                                if (uow.Query<PTStudyLogResults>().FirstOrDefault(i => i.SampleID != null && i.SampleID.Oid == objParam.Oid) == null)
                                                {
                                                    PTStudyLogResults objPTRes = new PTStudyLogResults(uow);
                                                    SampleParameter objParameter = uow.GetObjectByKey<SampleParameter>(objParam.Oid);
                                                    objPTRes.PTStudyLog = Objstudylog;
                                                    objPTRes.SampleID = objParameter;
                                                    if (objParam.Samplelogin != null)
                                                    {
                                                        objPTRes.SampleLogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objParam.Samplelogin.Oid);
                                                    }
                                                    objPTRes.Save();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (selectedItemCount == 1)
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "CopiedTestsAppliedSuccessfully"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                            }
                            if (selectedItemCount > 1)
                            {
                                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "CopiedTestsAppliedSuccessfully>1"), InformationType.Success, timer.Seconds, InformationPosition.Top);
                            }
                        }
                        else
                        {
                            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "SelectSampleToApplyCopiedTest"), InformationType.Info, timer.Seconds, InformationPosition.Top);
                            e.Cancel = true;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void SaveAs_Execute(object sender, SimpleActionExecuteEventArgs e)
        {
            if (View.SelectedObjects.Count > 0)
            {
                foreach (Samplecheckin objOldSp in View.SelectedObjects)
                {
                    Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
                    UnitOfWork uow = new UnitOfWork(currentSession.DataLayer);
                    if (objOldSp.IsSampling)
                    {
                        SRInfo.IsSampling = true;
                    }
                    else
                    {
                        SRInfo.IsSampling = false;
                    }
                    #region SamplingProposalInfo
                    Samplecheckin objNewSp = new Samplecheckin(uow);

                    /*General Information*/
                    if (objOldSp.ClientName != null)
                    {
                        objNewSp.ClientName = uow.GetObjectByKey<Customer>(objOldSp.ClientName.Oid);
                    }
                    objNewSp.ClientAddress = objOldSp.ClientAddress;
                    objNewSp.ClientPhone = objOldSp.ClientPhone;
                    if (objOldSp.ClientContact != null)
                    {
                        objNewSp.ClientContact = uow.GetObjectByKey<Contact>(objOldSp.ClientContact.Oid);
                    }
                    objNewSp.PO = objOldSp.PO;
                    if (objOldSp.PaymentStatus != null)
                    {
                        objNewSp.PaymentStatus = uow.GetObjectByKey<PaymentStatus>(objOldSp.PaymentStatus.Oid);
                    }
                    objNewSp.DateExpect = objOldSp.DateExpect;
                    //objNewSp.DateCollected = objOldSp.DateCollected;
                    //objNewSp.CollectionTime = objOldSp.CollectionTime;
                    if (objOldSp.ProjectID != null)
                    {
                        objNewSp.ProjectID = uow.GetObjectByKey<Project>(objOldSp.ProjectID.Oid);
                    }
                    if (objOldSp.COCSource != null)
                    {
                        objNewSp.COCSource = uow.GetObjectByKey<COCSettings>(objOldSp.COCSource.Oid);
                    }
                    /*Sample Information*/
                    objNewSp.NoOfSamples = objOldSp.NoOfSamples;

                    if (objOldSp.SampleMatries != null)
                    {
                        objNewSp.SampleMatries = objOldSp.SampleMatries;
                    }

                    if (objOldSp.SampleCategory != null)
                    {
                        objNewSp.SampleCategory = objOldSp.SampleCategory;
                    }

                    objNewSp.TestName = objOldSp.TestName;
                    objNewSp.NPTest = objOldSp.NPTest;
                    objNewSp.IsSampling = objOldSp.IsSampling;
                    /*Report Requirement*/
                    // objNewSp.DueDate = objOldSp.DueDate;
                    if (objOldSp.TAT != null)
                    {
                        objNewSp.TAT = uow.GetObjectByKey<TurnAroundTime>(objOldSp.TAT.Oid);
                        int tatHour = objOldSp.TAT.Count;
                        int Day = 0;
                        if (!objOldSp.IsSampling)
                        {
                            if (tatHour >= 24)
                            {
                                Day = tatHour / 24;
                                objNewSp.DueDate = AddWorkingDays(objOldSp.RecievedDate, Day);
                            }
                            else
                            {
                                objNewSp.DueDate = AddWorkingHours(objOldSp.RecievedDate, tatHour);
                            }
                        }
                    }
                    objNewSp.ReportTemplate = objOldSp.ReportTemplate;
                    CreateNewJobID(uow, objNewSp);
                    objNewSp.Save();
                    uow.CommitChanges();
                    #endregion

                    #region AttahmentInfo
                    /*Attachment */
                    XPClassInfo attachmentInfo;
                    attachmentInfo = uow.GetClassInfo(typeof(Attachment));
                    IList<Attachment> objAttachment = uow.GetObjects(attachmentInfo, CriteriaOperator.Parse("[Samplecheckin]=?", objOldSp.Oid), null, int.MaxValue, false, true).Cast<Attachment>().ToList();
                    if (objAttachment != null && objAttachment.Count > 0)
                    {
                        foreach (Attachment objAttch in objAttachment)
                        {
                            Attachment objNewAttachment = new Attachment(uow);
                            objNewAttachment.Name = objAttch.Name;
                            objNewAttachment.Attachments = objAttch.Attachments;
                            objNewAttachment.Date = objAttch.Date;
                            objNewAttachment.Operator = objAttch.Operator;
                            objNewAttachment.CreatedDate = DateTime.Now;
                            objNewAttachment.CreatedBy = objAttch.CreatedBy;
                            if (objNewSp != null)
                            {
                                objNewAttachment.Samplecheckin = uow.GetObjectByKey<Samplecheckin>(objNewSp.Oid);
                            }
                            objNewAttachment.Save();
                        }
                    }
                    #endregion
                    #region NotesInfo
                    /*Notes*/
                    XPClassInfo NotesInfo;
                    NotesInfo = uow.GetClassInfo(typeof(Notes));
                    IList<Notes> objnotes = uow.GetObjects(NotesInfo, CriteriaOperator.Parse("[Samplecheckin]=?", objOldSp.Oid), null, int.MaxValue, false, true).Cast<Notes>().ToList();
                    if (objnotes != null && objnotes.Count > 0)
                    {
                        foreach (Notes objN in objnotes)
                        {
                            Notes objNewNotes = new Notes(uow);
                            if (objN.Author != null)
                            {
                                objNewNotes.Author = uow.GetObjectByKey<Employee>(objN.Author.Oid);
                            }
                            objNewNotes.Date = DateTime.Now;
                            objNewNotes.Samplecheckin = objNewSp;
                            objNewNotes.Title = objN.Title;

                            if (objN.Attachment != null)
                            {
                                objNewNotes.Attachment = objN.Attachment;
                            }
                            objNewNotes.Text = objN.Text;
                            objNewNotes.Save();
                        }
                    }
                    #endregion
                    #region ImageInfo
                    /*Notes*/

                    if (objOldSp.ImageUpload != null && objOldSp.ImageUpload.Count > 0)
                    {
                        foreach (Modules.BusinessObjects.Setting.Image objImage in objOldSp.ImageUpload.ToList())
                        {
                            Modules.BusinessObjects.Setting.Image objoldImage = uow.GetObjectByKey<Modules.BusinessObjects.Setting.Image>(objImage.Oid);
                            if (objoldImage != null)
                            {
                                Modules.BusinessObjects.Setting.Image objNewImage = new Modules.BusinessObjects.Setting.Image(uow);
                                objNewImage.Name = objoldImage.Name;
                                objNewImage.ImageUpload = objoldImage.ImageUpload;
                                objNewImage.Sort = objoldImage.Sort;
                                objNewImage.Comment = objoldImage.Comment;
                                objNewImage.Save();
                                objNewSp.ImageUpload.Add(objNewImage);
                            }
                        }
                    }
                    #endregion
                    #region itemChargeInfo
                    XPClassInfo itemChargeInfo = uow.GetClassInfo(typeof(SampleCheckinItemChargePricing));
                    IList<SampleCheckinItemChargePricing> lstItemCharge = uow.GetObjects(itemChargeInfo, CriteriaOperator.Parse("[SampleCheckin]=?", objOldSp.Oid), null, int.MaxValue, false, true).Cast<SampleCheckinItemChargePricing>().ToList();
                    if (lstItemCharge.Count > 0)
                    {
                        foreach (SampleCheckinItemChargePricing objItemCharge in lstItemCharge)
                        {
                            SampleCheckinItemChargePricing objNewItem = new SampleCheckinItemChargePricing(uow);
                            objNewItem.ItemPrice = uow.GetObjectByKey<ItemChargePricing>(objItemCharge.ItemPrice.Oid);
                            objNewItem.Qty = objItemCharge.Qty;
                            objNewItem.UnitPrice = objItemCharge.UnitPrice;
                            objNewItem.Amount = objItemCharge.Amount;
                            objNewItem.FinalAmount = objItemCharge.FinalAmount;
                            objNewItem.Discount = objItemCharge.Discount;
                            objNewItem.Description = objItemCharge.Description;
                            objNewItem.NpUnitPrice = objItemCharge.NpUnitPrice;
                            objNewItem.SampleCheckin = objNewSp;
                            objNewItem.Save();
                        }
                    }
                    #endregion
                    #region CustomRequestInfo
                    XPClassInfo customRequestInfo = uow.GetClassInfo(typeof(CustomDueDate));
                    IList<CustomDueDate> lstCustomdueDate = uow.GetObjects(customRequestInfo, CriteriaOperator.Parse("[SampleCheckin]=?", objOldSp.Oid), null, int.MaxValue, false, true).Cast<CustomDueDate>().ToList();
                    if (lstItemCharge.Count > 0)
                    {
                        foreach (CustomDueDate objCustomDuedate in lstCustomdueDate)
                        {
                            CustomDueDate objNewcustomDueDate = new CustomDueDate(uow);
                            objNewcustomDueDate.TestMethod = objCustomDuedate.TestMethod;
                            objNewcustomDueDate.SampleCheckin = objNewSp;
                            objNewcustomDueDate.SampleMatrix = objCustomDuedate.SampleMatrix;
                            if (objCustomDuedate.TestMethod != null && objCustomDuedate.TestMethod.IsGroup)
                            {
                                objNewcustomDueDate.Parameter = "AllParam";
                            }
                            objNewcustomDueDate.DueDate = objNewSp.DueDate;
                            objNewcustomDueDate.TAT = objNewSp.TAT;
                            objNewcustomDueDate.Save();
                        }
                    }
                    #endregion
                    #region SamplesInfo
                    //*****SamplesInfo******//
                    XPClassInfo samplingInfo;
                    samplingInfo = uow.GetClassInfo(typeof(Modules.BusinessObjects.SampleManagement.SampleLogIn));

                    IList<Modules.BusinessObjects.SampleManagement.SampleLogIn> lstSampling = uow.GetObjects(samplingInfo, CriteriaOperator.Parse("[JobID]=?", objOldSp.Oid), null, int.MaxValue, false, true).Cast<Modules.BusinessObjects.SampleManagement.SampleLogIn>().ToList();

                    Samplecheckin objJobId = uow.GetObjectByKey<Samplecheckin>(objNewSp.Oid);
                    foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn objOldSampling in lstSampling.ToList().OrderBy(i => i.SampleNo))
                    {
                        Modules.BusinessObjects.SampleManagement.SampleLogIn objNewSampling = new Modules.BusinessObjects.SampleManagement.SampleLogIn(uow);
                        if (objOldSampling.VisualMatrix != null)
                        {
                            objNewSampling.VisualMatrix = uow.GetObjectByKey<VisualMatrix>(objOldSampling.VisualMatrix.Oid);
                        }
                        if (objOldSampling.Collector != null && !objOldSp.IsSampling)
                        {
                            objNewSampling.Collector = uow.GetObjectByKey<Collector>(objOldSampling.Collector.Oid);
                        }
                        objNewSampling.JobID = objJobId;
                        objNewSampling.ExcludeInvoice = false;
                        objNewSampling.SampleNo = objOldSampling.SampleNo;
                        objNewSampling.Test = true;
                        objNewSampling.AlternativeStation = objOldSampling.AlternativeStation;
                        objNewSampling.AlternativeStationOid = objOldSampling.AlternativeStationOid;
                        if (objOldSampling.SampleType != null)
                        {
                            objNewSampling.SampleType = uow.GetObjectByKey<SampleType>(objOldSampling.SampleType.Oid);
                        }
                        objNewSampling.Qty = objOldSampling.Qty;
                        if (objOldSampling.Storage != null)
                        {
                            objNewSampling.Storage = uow.GetObjectByKey<Storage>(objOldSampling.Storage.Oid);
                        }
                        if (objOldSampling.StationLocation != null)
                        {
                            objNewSampling.StationLocation = uow.GetObjectByKey<SampleSites>(objOldSampling.StationLocation.Oid);
                        }
                        objNewSampling.Preservetives = objOldSampling.Preservetives;
                        objNewSampling.SamplingLocation = objOldSampling.SamplingLocation;
                        if (objOldSampling.QCType != null)
                        {
                            objNewSampling.QCType = uow.GetObjectByKey<QCType>(objOldSampling.QCType.Oid);
                        }
                        if (objOldSampling.QCSource != null)
                        {
                            objNewSampling.QCSource = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objOldSampling.QCSource.Oid);
                        }
                        if (objOldSampling.Client != null)
                        {
                            objNewSampling.Client = uow.GetObjectByKey<Customer>(objOldSampling.Client.Oid);
                        }
                        if (objOldSampling.Department != null)
                        {
                            objNewSampling.Department = uow.GetObjectByKey<Department>(objOldSampling.Department.Oid);
                        }
                        if (objOldSampling.ProjectID != null)
                        {

                            objNewSampling.ProjectID = uow.GetObjectByKey<Project>(objOldSampling.ProjectID.Oid);
                        }
                        if (objOldSampling.PreserveCondition != null)
                        {

                            objNewSampling.PreserveCondition = uow.GetObjectByKey<PreserveCondition>(objOldSampling.PreserveCondition.Oid);
                        }
                        if (objOldSampling.StorageID != null)
                        {
                            objNewSampling.StorageID = uow.GetObjectByKey<Storage>(objOldSampling.StorageID.Oid);
                        }
                        if (!objOldSp.IsSampling)
                        {
                        objNewSampling.CollectDate = objOldSampling.CollectDate;
                        }
                        objNewSampling.CollectTime = objOldSampling.CollectTime;
                        objNewSampling.FlowRate = objOldSampling.FlowRate;
                        objNewSampling.TimeStart = objOldSampling.TimeStart;
                        objNewSampling.TimeEnd = objOldSampling.TimeEnd;
                        objNewSampling.Time = objOldSampling.Time;
                        objNewSampling.Volume = objOldSampling.Volume;
                        objNewSampling.Address = objOldSampling.Address;
                        objNewSampling.AreaOrPerson = objOldSampling.AreaOrPerson;
                        if (objOldSampling.BalanceID != null)
                        {
                            objNewSampling.BalanceID = uow.GetObjectByKey<Labware>(objOldSampling.BalanceID.Oid);
                        }
                        objNewSampling.AssignTo = objOldSampling.AssignTo;
                        objNewSampling.Barp = objOldSampling.Barp;
                        objNewSampling.BatchID = objOldSampling.BatchID;
                        objNewSampling.BatchSize = objOldSampling.BatchSize;
                        objNewSampling.BatchSize_pc = objOldSampling.BatchSize_pc;
                        objNewSampling.BatchSize_Units = objOldSampling.BatchSize_Units;
                        objNewSampling.Blended = objOldSampling.Blended;
                        objNewSampling.BottleQty = objOldSampling.BottleQty;
                        objNewSampling.BuriedDepthOfGroundWater = objOldSampling.BuriedDepthOfGroundWater;
                        objNewSampling.ChlorineFree = objOldSampling.ChlorineFree;
                        objNewSampling.ChlorineTotal = objOldSampling.ChlorineTotal;
                        objNewSampling.City = objOldSampling.City;
                        objNewSampling.CollectorPhone = objOldSampling.CollectorPhone;
                        objNewSampling.CompositeQty = objOldSampling.CompositeQty;
                        objNewSampling.DateEndExpected = objOldSampling.DateEndExpected;
                        objNewSampling.DateStartExpected = objOldSampling.DateStartExpected;
                        objNewSampling.Depth = objOldSampling.Depth;
                        objNewSampling.Description = objOldSampling.Description;
                        objNewSampling.DischargeFlow = objOldSampling.DischargeFlow;
                        objNewSampling.DischargePipeHeight = objOldSampling.DischargePipeHeight;
                        objNewSampling.DO = objOldSampling.DO;
                        objNewSampling.DueDate = objOldSampling.DueDate;
                        objNewSampling.Emission = objOldSampling.Emission;
                        objNewSampling.EndOfRoad = objOldSampling.EndOfRoad;
                        objNewSampling.EquipmentModel = objOldSampling.EquipmentModel;
                        objNewSampling.EquipmentName = objOldSampling.EquipmentName;
                        objNewSampling.FacilityID = objOldSampling.FacilityID;
                        objNewSampling.FacilityName = objOldSampling.FacilityName;
                        objNewSampling.FacilityType = objOldSampling.FacilityType;
                        objNewSampling.FinalForm = objOldSampling.FinalForm;
                        objNewSampling.FinalPackaging = objOldSampling.FinalPackaging;
                        objNewSampling.FlowRate = objOldSampling.FlowRate;
                        objNewSampling.FlowRateCubicMeterPerHour = objOldSampling.FlowRateCubicMeterPerHour;
                        objNewSampling.FlowRateLiterPerMin = objOldSampling.FlowRateLiterPerMin;
                        objNewSampling.FlowVelocity = objOldSampling.FlowVelocity;
                        objNewSampling.ForeignMaterial = objOldSampling.ForeignMaterial;
                        objNewSampling.Frequency = objOldSampling.Frequency;
                        objNewSampling.GISStatus = objOldSampling.GISStatus;
                        objNewSampling.GravelContent = objOldSampling.GravelContent;
                        objNewSampling.GrossWeight = objOldSampling.GrossWeight;
                        objNewSampling.GroupSample = objOldSampling.GroupSample;
                        objNewSampling.Hold = objOldSampling.Hold;
                        if (!objOldSp.IsSampling)
                        {
                        objNewSampling.Humidity = objOldSampling.Humidity;
                        }
                        objNewSampling.IceCycle = objOldSampling.IceCycle;
                        objNewSampling.Increments = objOldSampling.Increments;
                        objNewSampling.Interval = objOldSampling.Interval;
                        objNewSampling.IsActive = objOldSampling.IsActive;
                        objNewSampling.ItemName = objOldSampling.ItemName;
                        objNewSampling.KeyMap = objOldSampling.KeyMap;
                        objNewSampling.LicenseNumber = objOldSampling.LicenseNumber;
                        objNewSampling.ManifestNo = objOldSampling.ManifestNo;
                        objNewSampling.MonitoryingRequirement = objOldSampling.MonitoryingRequirement;
                        objNewSampling.NoOfCollectionsEachTime = objOldSampling.NoOfCollectionsEachTime;
                        objNewSampling.NoOfPoints = objOldSampling.NoOfPoints;
                        objNewSampling.Notes = objOldSampling.Notes;
                        objNewSampling.OriginatingEntiry = objOldSampling.OriginatingEntiry;
                        objNewSampling.OriginatingLicenseNumber = objOldSampling.OriginatingLicenseNumber;
                        objNewSampling.PackageNumber = objOldSampling.PackageNumber;
                        objNewSampling.ParentSampleDate = objOldSampling.ParentSampleDate;
                        objNewSampling.ParentSampleID = objOldSampling.ParentSampleID;
                        objNewSampling.PiecesPerUnit = objOldSampling.PiecesPerUnit;
                        objNewSampling.Preservetives = objOldSampling.Preservetives;
                        objNewSampling.ProjectName = objOldSampling.ProjectName;
                        objNewSampling.PurifierSampleID = objOldSampling.PurifierSampleID;
                        objNewSampling.PWSID = objOldSampling.PWSID;
                        if (objOldSampling.PWSSystemName != null)
                        {
                            objNewSampling.PWSSystemName = uow.GetObjectByKey<PWSSystem>(objOldSampling.PWSSystemName.Oid);
                        }
                        objNewSampling.RegionNameOfSection = objOldSampling.RegionNameOfSection;
                        objNewSampling.RejectionCriteria = objOldSampling.RejectionCriteria;
                        objNewSampling.RepeatLocation = objOldSampling.RepeatLocation;
                        objNewSampling.RetainedWeight = objOldSampling.RetainedWeight;
                        objNewSampling.RiverWidth = objOldSampling.RiverWidth;
                        objNewSampling.RushSample = objOldSampling.RushSample;
                        objNewSampling.SampleAmount = objOldSampling.SampleAmount;
                        objNewSampling.SampleCondition = objOldSampling.SampleCondition;
                        objNewSampling.SampleDescription = objOldSampling.SampleDescription;
                        objNewSampling.SampleImage = objOldSampling.SampleImage;
                        objNewSampling.SamplePointID = objOldSampling.SamplePointID;
                        objNewSampling.SamplePointType = objOldSampling.SamplePointType;
                        if (!objOldSampling.IsReanalysis)
                        {
                            objNewSampling.SampleSource = objOldSampling.SampleSource;
                        }
                        objNewSampling.SampleTag = objOldSampling.SampleTag;
                        objNewSampling.SampleWeight = objOldSampling.SampleWeight;
                        objNewSampling.SamplingAddress = objOldSampling.SamplingAddress;
                        objNewSampling.SamplingEquipment = objOldSampling.SamplingEquipment;
                        objNewSampling.SamplingLocation = objOldSampling.SamplingLocation;
                        objNewSampling.SamplingProcedure = objOldSampling.SamplingProcedure;
                        objNewSampling.SequenceTestSampleID = objOldSampling.SequenceTestSampleID;
                        objNewSampling.SequenceTestSortNo = objOldSampling.SequenceTestSortNo;
                        objNewSampling.ServiceArea = objOldSampling.ServiceArea;
                        objNewSampling.SiteCode = objOldSampling.SiteCode;
                        objNewSampling.SiteDescription = objOldSampling.SiteDescription;
                        objNewSampling.SiteID = objOldSampling.SiteID;
                        objNewSampling.SiteNameArchived = objOldSampling.SiteNameArchived;
                        objNewSampling.SiteUserDefinedColumn1 = objOldSampling.SiteUserDefinedColumn1;
                        objNewSampling.SiteUserDefinedColumn2 = objOldSampling.SiteUserDefinedColumn2;
                        objNewSampling.SiteUserDefinedColumn3 = objOldSampling.SiteUserDefinedColumn3;
                        objNewSampling.SubOut = objOldSampling.SubOut;
                        if (objOldSampling.SystemType != null)
                        {
                            objNewSampling.SystemType = uow.GetObjectByKey<SystemTypes>(objOldSampling.SystemType.Oid);
                        }
                        objNewSampling.TargetMGTHC_CBD_mg_pc = objOldSampling.TargetMGTHC_CBD_mg_pc;
                        objNewSampling.TargetMGTHC_CBD_mg_unit = objOldSampling.TargetMGTHC_CBD_mg_unit;
                        objNewSampling.TargetPotency = objOldSampling.TargetPotency;
                        objNewSampling.TargetUnitWeight_g_pc = objOldSampling.TargetUnitWeight_g_pc;
                        objNewSampling.TargetUnitWeight_g_unit = objOldSampling.TargetUnitWeight_g_unit;
                        objNewSampling.TargetWeight = objOldSampling.TargetWeight;
                        objNewSampling.Time = objOldSampling.Time;
                        objNewSampling.TimeEnd = objOldSampling.TimeEnd;
                        objNewSampling.TimeStart = objOldSampling.TimeStart;
                        objNewSampling.TotalSamples = objOldSampling.TotalSamples;
                        objNewSampling.TotalTimes = objOldSampling.TotalTimes;
                        if (objOldSampling.TtimeUnit != null)
                        {
                            objNewSampling.TtimeUnit = uow.GetObjectByKey<Modules.BusinessObjects.Setting.Unit>(objOldSampling.TtimeUnit.Oid);
                        }
                        if (objOldSampling.WaterType != null)
                        {
                            objNewSampling.WaterType = uow.GetObjectByKey<WaterTypes>(objOldSampling.WaterType.Oid);
                        }
                        objNewSampling.ZipCode = objOldSampling.ZipCode;
                        //objNewSampling.ModifiedBy = objOldSampling.ModifiedBy;
                        if (objOldSampling.ModifiedBy != null)
                        {
                            objNewSampling.ModifiedBy = uow.GetObjectByKey<Modules.BusinessObjects.Hr.CustomSystemUser>(objOldSampling.ModifiedBy.Oid);
                        }
                        objNewSampling.ModifiedDate = objOldSampling.ModifiedDate;
                        objNewSampling.Comment = objOldSampling.Comment;
                        if (!objOldSp.IsSampling)
                        {
                        objNewSampling.Latitude = objOldSampling.Latitude;
                        }
                        if (!objOldSp.IsSampling)
                        {
                        objNewSampling.Longitude = objOldSampling.Longitude;
                        }
                        objNewSampling.WindDirection = objOldSampling.WindDirection;
                        if (!objOldSp.IsSampling)
                        {
                        objNewSampling.Temp = objOldSampling.Temp;
                        }
                        objNewSampling.WeatherCondition = objOldSampling.WeatherCondition;
                        objNewSampling.Transparencyk = objOldSampling.Transparencyk;
                        objNewSampling.Transparencyk1 = objOldSampling.Transparencyk1;
                        objNewSampling.Transparencyk2 = objOldSampling.Transparencyk2;
                        List<Testparameter> lsttp = uow.Query<Testparameter>().Where(j => j.QCType.QCTypeName == "Sample" && j.SampleLogIns.Where(a => a.Oid == objOldSampling.Oid).Count() > 0).ToList();
                        foreach (var objLineA in lsttp)
                        {
                            objNewSampling.Testparameters.Add(uow.GetObjectByKey<Testparameter>(objLineA.Oid));
                        }
                        foreach (var objSampleparameter in objOldSampling.SampleParameter.Where(a => a.IsGroup == true && a.GroupTest != null).ToList())
                        {
                            SampleParameter sample = objNewSampling.SampleParameter.FirstOrDefault<SampleParameter>(obj => obj.Testparameter.Oid == objSampleparameter.Testparameter.Oid);
                            if (objSampleparameter.GroupTest != null && sample != null)
                            {
                                sample.IsGroup = true;
                                sample.GroupTest = uow.GetObjectByKey<GroupTestMethod>(objSampleparameter.GroupTest.Oid);
                            }
                        }
                        foreach (var objSampleparameter in objOldSampling.SampleParameter.Where(a => a.SubOut == true).ToList())
                        {
                            SampleParameter sample = objNewSampling.SampleParameter.FirstOrDefault<SampleParameter>(obj => obj.Testparameter.Oid == objSampleparameter.Testparameter.Oid);
                            if (sample != null)
                            {
                                sample.SubOut = true;
                            }
                        }
                        objNewSampling.Save();
                        List<SampleBottleAllocation> smplold = uow.Query<SampleBottleAllocation>().Where(i => i.SampleRegistration != null && i.SampleRegistration.Oid == objOldSampling.Oid).ToList();
                        if (smplold != null && smplold.Count > 0)
                        {
                            foreach (SampleBottleAllocation smpl in smplold.ToList())
                            {
                                SampleBottleAllocation smplnew = new SampleBottleAllocation(uow);
                                smplnew.SampleRegistration = objNewSampling;
                                smplnew.TestMethod = uow.GetObjectByKey<TestMethod>(smpl.TestMethod.Oid);
                                smplnew.BottleID = smpl.BottleID;
                                if (smpl.Containers != null)
                                {
                                    smplnew.Containers = uow.GetObjectByKey<Modules.BusinessObjects.Setting.Container>(smpl.Containers.Oid);
                                }
                                if (smpl.Preservative != null)
                                {
                                    smplnew.Preservative = uow.GetObjectByKey<Preservative>(smpl.Preservative.Oid);
                                }
                                if (smpl.StorageID != null)
                                {
                                    smplnew.StorageID = uow.GetObjectByKey<Storage>(smpl.StorageID.Oid);
                                }
                                if (smpl.StorageCondition != null)
                                {
                                    smplnew.StorageCondition = uow.GetObjectByKey<PreserveCondition>(smpl.StorageCondition.Oid);
                                }
                            }
                        }
                    }
                    #endregion
                    #region SampleConditionCheckInfo
                    XPClassInfo sampleConditioncheckIbfo = uow.GetClassInfo(typeof(SampleConditionCheck));
                    IList<SampleConditionCheck> lstSampleconditionCheck = uow.GetObjects(sampleConditioncheckIbfo, CriteriaOperator.Parse("[SampleRegistration]=?", objOldSp.Oid), null, int.MaxValue, false, true).Cast<SampleConditionCheck>().ToList();
                    if (lstSampleconditionCheck.Count > 0)
                    {
                        foreach (SampleConditionCheck objSampleConditionCheck in lstSampleconditionCheck)
                        {
                            SampleConditionCheck objNewSampleCheck = new SampleConditionCheck(uow);
                            objNewSampleCheck.SampleRegistration = objNewSp;
                            objNewSampleCheck.JobID = objNewSp.JobID;
                            if (objSampleConditionCheck.ClientName != null)
                            {
                                objNewSampleCheck.ClientName = uow.GetObjectByKey<Customer>(objSampleConditionCheck.ClientName.Oid);
                            }
                            if (objSampleConditionCheck.CheckInBy != null)
                            {
                                objNewSampleCheck.CheckInBy = uow.GetObjectByKey<Employee>(objSampleConditionCheck.CheckInBy.Oid);
                            }
                            objNewSampleCheck.CheckInDate = objSampleConditionCheck.CheckInDate;
                            if (objSampleConditionCheck.VisualMatrix != null)
                            {
                                objNewSampleCheck.VisualMatrix = objSampleConditionCheck.VisualMatrix;
                            }
                            objNewSampleCheck.Temperature = objSampleConditionCheck.Temperature;
                            objNewSampleCheck.ThermometerID = objSampleConditionCheck.ThermometerID;
                            objNewSampleCheck.SamplePH = objSampleConditionCheck.SamplePH;
                            objNewSampleCheck.PHPaperID = objSampleConditionCheck.PHPaperID;
                            objNewSampleCheck.Save();
                            foreach (SampleConditionCheckPoint objCheckPoint in objSampleConditionCheck.SampleConditionCheckPoint.ToList())
                            {
                                SampleConditionCheckPoint point = new SampleConditionCheckPoint(uow);
                                point.CheckPoint = objCheckPoint.CheckPoint;
                                point.Yes = objCheckPoint.Yes;
                                point.No = objCheckPoint.No;
                                point.NA = objCheckPoint.NA;
                                point.Save();
                                objNewSampleCheck.SampleConditionCheckPoint.Add(point);
                            }
                            foreach (SampleConditionCheckComment objCheckComment in objSampleConditionCheck.SampleConditionCheckComment.ToList())
                            {
                                SampleConditionCheckComment newcomment = new SampleConditionCheckComment(uow);
                                newcomment.Title = objCheckComment.Title;
                                newcomment.Note = newcomment.Note;
                                newcomment.User = objCheckComment.User;
                                newcomment.DateTime = newcomment.DateTime;
                                newcomment.Save();
                                objNewSampleCheck.SampleConditionCheckComment.Add(newcomment);
                            }
                        }
                    }
                    #endregion
                    uow.CommitChanges();
                    Application.ShowViewStrategy.ShowMessage(objNewSp.JobID + " JobID created successfully.", InformationType.Success, timer.Seconds, InformationPosition.Top);
                    DateTime srDateFilter = DateTime.MinValue;
                    if (sampleRegistrationDateFilterAction != null && sampleRegistrationDateFilterAction.SelectedItem != null)
                    {
                        if (sampleRegistrationDateFilterAction.SelectedItem.Id == "3M")
                        {
                            srDateFilter = DateTime.Today.AddMonths(-3);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "6M")
                        {
                            srDateFilter = DateTime.Today.AddMonths(-6);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "1Y")
                        {
                            srDateFilter = DateTime.Today.AddYears(-1);
                        }
                        else if (sampleRegistrationDateFilterAction.SelectedItem.Id == "2Y")
                        {
                            srDateFilter = DateTime.Today.AddYears(-2);
                        }
                    }
                    if (View is ListView)
                    {
                        if (srDateFilter != DateTime.MinValue)
                        {
                            //  ((ListView)View).CollectionSource.Criteria["dateFilter"] = CriteriaOperator.Parse("[CreatedDate] >= ? and [CreatedDate] <= ?", srDateFilter, DateTime.Now);
                            ((ListView)View).CollectionSource.Criteria["dateFilter"] = CriteriaOperator.Parse("[CreatedDate] >= ?", srDateFilter);
                        }
                        else
                        {
                            ((ListView)View).CollectionSource.Criteria.Remove("dateFilter");
                        }
                        View.ObjectSpace.Refresh();
                    }
                }
            }
            else
            {
                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages", "selectchkbox"), InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        private void CreateNewJobID(UnitOfWork uow, Samplecheckin objSampleCheckin)
        {
            try
            {
                JobIDFormat objJDformat = uow.FindObject<JobIDFormat>(CriteriaOperator.Parse(""));
                if (objJDformat != null)
                {
                    var curdateISampling = DateTime.Now.ToString("yyMM");
                    CriteriaOperator filternew = null;
                    if (objSampleCheckin.IsSampling)
                    {
                        filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1 And [IsSampling] = True And [JobID] like  ?+'%'", curdateISampling);
                    }
                    else
                    {
                        filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1 And [IsSampling] <> True");
                    }
                    SRInfo.bolNewJobID = false;
                    if (objSampleCheckin.IsSampling)
                    {
                        CriteriaOperator qcct = CriteriaOperator.Parse("Max(JobID)");
                        string tempqc = (Convert.ToInt32(uow.Evaluate(typeof(Samplecheckin), qcct, filternew)) + 1).ToString();
                        //string tempqc = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), qcct, filternew)) + 1).ToString();
                        string strSampling = "32";
                        if (tempqc != "1")
                        {
                            var predate = tempqc.Substring(0, 4);
                            if (predate != curdateISampling)
                            {
                                tempqc = curdateISampling + strSampling + "01";
                            }
                        }
                        else
                        {
                            tempqc = curdateISampling + strSampling + "01";
                        }
                        objSampleCheckin.JobID = strJobID = tempqc;
                    }
                    else
                    {
                        if (objJDformat.Dynamic == true)
                        {
                            if (!string.IsNullOrEmpty(objSampleCheckin.JobID))
                            {
                                if (objSampleCheckin.JobID != strJobID)
                                {
                                    var curdate = DateTime.Now;
                                    string strjobid = string.Empty;
                                    int formatlen = 0;

                                    if (objJDformat.Year == YesNoFilter.Yes)
                                    {
                                        strjobid += curdate.ToString(objJDformat.YearFormat.ToString());
                                        formatlen = objJDformat.YearFormat.ToString().Length;
                                    }
                                    if (objJDformat.Month == YesNoFilter.Yes)
                                    {
                                        strjobid += curdate.ToString(objJDformat.MonthFormat.ToUpper());
                                        formatlen = formatlen + objJDformat.MonthFormat.Length;
                                    }
                                    if (objJDformat.Day == YesNoFilter.Yes)
                                    {
                                        strjobid += curdate.ToString(objJDformat.DayFormat);
                                        formatlen = formatlen + objJDformat.DayFormat.Length;
                                    }
                                    CriteriaOperator sam = objJDformat.Prefix == YesNoFilter.Yes ? CriteriaOperator.Parse("Max(SUBSTRING(JobID, " + objJDformat.PrefixValue.ToString().Length + "))") : CriteriaOperator.Parse("Max(SUBSTRING(JobID, 0))");
                                    string tempid = (Convert.ToInt32(uow.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                                    ///string tempid = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                                    if (tempid != "1")
                                    {
                                        var predate = tempid.Substring(0, formatlen);
                                        if (predate == strjobid)
                                        {
                                            if (objJDformat.Prefix == YesNoFilter.Yes)
                                            {
                                                if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                {
                                                    strjobid = objJDformat.PrefixValue + tempid;
                                                }
                                            }
                                            else
                                            {
                                                strjobid = tempid;
                                            }
                                        }
                                        else
                                        {
                                            if (objJDformat.Prefix == YesNoFilter.Yes)
                                            {
                                                if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                                {
                                                    strjobid = objJDformat.PrefixValue + strjobid;
                                                }
                                            }
                                            if (objJDformat.SequentialNumber > 1)
                                            {
                                                if (objJDformat.NumberStart > 0)
                                                {
                                                    strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                                }
                                                else
                                                {
                                                    strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                                }
                                            }
                                            else
                                            {
                                                if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                                {
                                                    strjobid = strjobid + objJDformat.NumberStart;
                                                }
                                                else
                                                {
                                                    strjobid = strjobid + "1";
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (objJDformat.Prefix == YesNoFilter.Yes)
                                        {
                                            if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                            {
                                                strjobid = objJDformat.PrefixValue + strjobid;
                                            }
                                        }
                                        if (objJDformat.SequentialNumber > 1)
                                        {
                                            if (objJDformat.NumberStart > 0)
                                            {
                                                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                            }
                                            else
                                            {
                                                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                            }
                                        }
                                        else
                                        {
                                            if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                            {
                                                strjobid = strjobid + objJDformat.NumberStart;
                                            }
                                            else
                                            {
                                                strjobid = strjobid + "1";
                                            }
                                        }
                                    }
                                    objSampleCheckin.JobID = strJobID = strjobid;
                                    Application.ShowViewStrategy.ShowMessage("This JobID has been used. The Newly Generated JobID =" + strJobID, InformationType.Success, timer.Seconds, InformationPosition.Top);
                                }
                            }
                            else
                            {
                                var curdate = DateTime.Now;
                                string strjobid = string.Empty;
                                int formatlen = 0;

                                if (objJDformat.Year == YesNoFilter.Yes)
                                {
                                    strjobid += curdate.ToString(objJDformat.YearFormat.ToString());
                                    formatlen = objJDformat.YearFormat.ToString().Length;
                                }
                                if (objJDformat.Month == YesNoFilter.Yes)
                                {
                                    strjobid += curdate.ToString(objJDformat.MonthFormat.ToUpper());
                                    formatlen = formatlen + objJDformat.MonthFormat.Length;
                                }
                                if (objJDformat.Day == YesNoFilter.Yes)
                                {
                                    strjobid += curdate.ToString(objJDformat.DayFormat);
                                    formatlen = formatlen + objJDformat.DayFormat.Length;
                                }
                                CriteriaOperator sam = objJDformat.Prefix == YesNoFilter.Yes ? CriteriaOperator.Parse("Max(SUBSTRING(JobID, " + objJDformat.PrefixValue.ToString().Length + "))") : CriteriaOperator.Parse("Max(SUBSTRING(JobID, 0))");
                                string tempid = (Convert.ToInt32(uow.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                                //filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1");
                                // string tempid = (Convert.ToInt32(((XPObjectSpace)os).Session.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                                if (tempid != "1")
                                {
                                    var predate = tempid.Substring(0, formatlen);
                                    if (predate == strjobid)
                                    {
                                        if (objJDformat.Prefix == YesNoFilter.Yes)
                                        {
                                            if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                            {
                                                strjobid = objJDformat.PrefixValue + tempid;
                                            }
                                        }
                                        else
                                        {
                                            strjobid = tempid;
                                        }
                                    }
                                    else
                                    {
                                        if (objJDformat.Prefix == YesNoFilter.Yes)
                                        {
                                            if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                            {
                                                strjobid = objJDformat.PrefixValue + strjobid;
                                            }
                                        }
                                        if (objJDformat.SequentialNumber > 1)
                                        {
                                            if (objJDformat.NumberStart > 0)
                                            {
                                                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                            }
                                            else
                                            {
                                                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                            }
                                        }
                                        else
                                        {
                                            if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                            {
                                                strjobid = strjobid + objJDformat.NumberStart;
                                            }
                                            else
                                            {
                                                strjobid = strjobid + "1";
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    if (objJDformat.Prefix == YesNoFilter.Yes)
                                    {
                                        if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                                        {
                                            strjobid = objJDformat.PrefixValue + strjobid;
                                        }
                                    }
                                    if (objJDformat.SequentialNumber > 1)
                                    {
                                        if (objJDformat.NumberStart > 0)
                                        {
                                            strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                                        }
                                        else
                                        {
                                            strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                                        }
                                    }
                                    else
                                    {
                                        if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                                        {
                                            strjobid = strjobid + objJDformat.NumberStart;
                                        }
                                        else
                                        {
                                            strjobid = strjobid + "1";
                                        }
                                    }
                                }
                                objSampleCheckin.JobID = strJobID = strjobid;
                            }
                        }
                    }
                }



                //var curdate = DateTime.Now;
                //string strjobid = string.Empty;
                //int formatlen = 0;
                //JobIDFormat objJDformat = uow.FindObject<JobIDFormat>(CriteriaOperator.Parse(""));
                //if (objJDformat != null)
                //{
                //    if (objJDformat.Year == YesNoFilter.Yes)
                //    {
                //        strjobid += curdate.ToString(objJDformat.YearFormat.ToString());
                //        formatlen = objJDformat.YearFormat.ToString().Length;
                //    }
                //    if (objJDformat.Month == YesNoFilter.Yes)
                //    {
                //        strjobid += curdate.ToString(objJDformat.MonthFormat.ToUpper());
                //        formatlen = formatlen + objJDformat.MonthFormat.Length;
                //    }
                //    if (objJDformat.Day == YesNoFilter.Yes)
                //    {
                //        strjobid += curdate.ToString(objJDformat.DayFormat);
                //        formatlen = formatlen + objJDformat.DayFormat.Length;
                //    }
                //    CriteriaOperator sam = objJDformat.Prefix == YesNoFilter.Yes ? CriteriaOperator.Parse("Max(SUBSTRING(JobID, " + objJDformat.PrefixValue.ToString().Length + "))") : CriteriaOperator.Parse("Max(SUBSTRING(JobID, 0))");
                //    CriteriaOperator filternew = CriteriaOperator.Parse("[IsAlpacJobid]=1");
                //    string tempid = (Convert.ToInt32(uow.Evaluate(typeof(Samplecheckin), sam, filternew)) + 1).ToString();
                //    if (tempid != "1")
                //    {
                //        var predate = tempid.Substring(0, formatlen);
                //        if (predate == strjobid)
                //        {
                //            if (objJDformat.Prefix == YesNoFilter.Yes)
                //            {
                //                if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                //                {
                //                    strjobid = objJDformat.PrefixValue + tempid;
                //                }
                //            }
                //            else
                //            {
                //                strjobid = tempid;
                //            }
                //        }
                //        else
                //        {
                //            if (objJDformat.Prefix == YesNoFilter.Yes)
                //            {
                //                if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                //                {
                //                    strjobid = objJDformat.PrefixValue + strjobid;
                //                }
                //            }
                //            if (objJDformat.SequentialNumber > 1)
                //            {
                //                if (objJDformat.NumberStart > 0)
                //                {
                //                    strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                //                }
                //                else
                //                {
                //                    strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                //                }
                //            }
                //            else
                //            {
                //                if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                //                {
                //                    strjobid = strjobid + objJDformat.NumberStart;
                //                }
                //                else
                //                {
                //                    strjobid = strjobid + "1";
                //                }
                //            }
                //        }
                //    }
                //    else
                //    {
                //        if (objJDformat.Prefix == YesNoFilter.Yes)
                //        {
                //            if (!string.IsNullOrEmpty(objJDformat.PrefixValue))
                //            {
                //                strjobid = objJDformat.PrefixValue + strjobid;
                //            }
                //        }
                //        if (objJDformat.SequentialNumber > 1)
                //        {
                //            if (objJDformat.NumberStart > 0)
                //            {
                //                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - objJDformat.NumberStart.ToString().Length)), '0') + objJDformat.NumberStart;
                //            }
                //            else
                //            {
                //                strjobid = strjobid.PadRight(Convert.ToInt32(strjobid.Length + (objJDformat.SequentialNumber - 1)), '0') + "1";
                //            }
                //        }
                //        else
                //        {
                //            if (objJDformat.NumberStart > 0 && objJDformat.NumberStart < 10)
                //            {
                //                strjobid = strjobid + objJDformat.NumberStart;
                //            }
                //            else
                //            {
                //                strjobid = strjobid + "1";
                //            }
                //        }
                //    }
                //    objSampleCheckin.JobID = strJobID = strjobid;
                //}
            }
            catch (Exception ex)
            {
                Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
                Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
            }
        }
        //private void EditTestCopyTest_Accepting(object sender, DialogControllerAcceptingEventArgs e)
        //{
        //    try
        //    {
        //        if (e.AcceptActionArgs.SelectedObjects.Count > 0)
        //        {
        //            ObjectSpace.CommitChanges();
        //            IObjectSpace os = Application.CreateObjectSpace();
        //            Session currentSession = ((XPObjectSpace)(this.ObjectSpace)).Session;
        //            UnitOfWork uow = new UnitOfWork(((XPObjectSpace)os).Session.DataLayer);
        //            IList<Testparameter> objtp = null;
        //            Samplecheckin objJobId = null;
        //            if (testParameterOid.Count > 0)
        //            {
        //                XPClassInfo TestParameterinfo;
        //                TestParameterinfo = uow.GetClassInfo(typeof(Testparameter));
        //                objtp = uow.GetObjects(TestParameterinfo, new InOperator("Oid", testParameterOid), null, int.MaxValue, false, true).Cast<Testparameter>().ToList();
        //            }
        //            List<Guid> lstSampleOid = new List<Guid>();
        //            foreach (Modules.BusinessObjects.SampleManagement.SampleLogIn obj in e.AcceptActionArgs.SelectedObjects)
        //            {
        //                if (objtp != null)
        //                {
        //                    lstSampleOid.Add(obj.Oid);
        //                    if (objJobId == null)
        //                    {
        //                        objJobId = obj.JobID;
        //                    }
        //                    CriteriaOperator criteria = CriteriaOperator.Parse("[Oid]='" + obj.Oid + "'");
        //                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSL = uow.FindObject<Modules.BusinessObjects.SampleManagement.SampleLogIn>(criteria);
        //                    XPClassInfo TestParameterinfo;
        //                    TestParameterinfo = uow.GetClassInfo(typeof(SampleParameter));
        //                    IList<SampleParameter> objsp = uow.GetObjects(TestParameterinfo, new InOperator("Oid", sampleParameterOid), null, int.MaxValue, false, true).Cast<SampleParameter>().ToList();
        //                    {
        //                        foreach (Testparameter objtestperam in objtp)
        //                        {
        //                            if (!objSL.Testparameters.Contains(objtestperam))
        //                            {
        //                                foreach (SampleParameter sp in objsp)
        //                                {
        //                                    if (sp != null)
        //                                    {
        //                                        if (objtestperam.Oid == sp.Testparameter.Oid)
        //                                        {
        //                                            objSL.Testparameters.Add(objtestperam);
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        objSL.Save();
        //                        uow.CommitChanges();
        //                    }
        //                    AssignBottleAllocationToSamples(uow, objSL.Oid);
        //                    Modules.BusinessObjects.SampleManagement.SampleLogIn objSample = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objSL.Oid);
        //                    IList<SampleParameter> childsampleparemter = uow.GetObjects(uow.GetClassInfo(typeof(SampleParameter)), CriteriaOperator.Parse("[Samplelogin]=?", objSample.Oid), null, int.MaxValue, false, true).Cast<SampleParameter>().ToList();

        //                    foreach (SampleParameter Parentsp in objsp)
        //                    {
        //                        if (Parentsp != null)
        //                        {
        //                            foreach (SampleParameter CopiedSpPara in childsampleparemter)
        //                            {
        //                                if (CopiedSpPara != null && Parentsp.Testparameter.Oid == CopiedSpPara.Testparameter.Oid)
        //                                {
        //                                    CopiedSpPara.TAT = Parentsp.TAT;
        //                                    CopiedSpPara.SubOut = Parentsp.SubOut;
        //                                }
        //                            }
        //                        }
        //                    }
        //                    uow.CommitChanges();
        //                }
        //            }

        //            if (testParameterOid.Count > 0)
        //            {
        //                testParameterOid.Clear();
        //            }
        //            if (sampleParameterOid.Count > 0)
        //            {
        //                sampleParameterOid.Clear();
        //            }

        //            if (objJobId != null && lstSampleOid != null && lstSampleOid.Count > 0 && objJobId.Status != SampleRegistrationSignoffStatus.PendingSubmit)
        //            {
        //                if (objJobId != null && objJobId.ProjectCategory != null && (objJobId.ProjectCategory.CategoryName == "PT" || objJobId.ProjectCategory.CategoryName == "DOC" || objJobId.ProjectCategory.CategoryName == "MDL"))
        //                {
        //                    PTStudyLog Objstudylog = uow.FindObject<PTStudyLog>(CriteriaOperator.Parse("[SampleCheckinJobID.JobID]= ?", objJobId.JobID));
        //                    if (Objstudylog != null)
        //                    {
        //                        foreach (Guid objSampleLogInNew in lstSampleOid.ToList())
        //                        {
        //                            XPClassInfo sampleParameterinfo;
        //                            sampleParameterinfo = uow.GetClassInfo(typeof(SampleParameter));
        //                            IList<SampleParameter> lstSampleParam = uow.GetObjects(sampleParameterinfo, CriteriaOperator.Parse("[Samplelogin.Oid]=?", objSampleLogInNew), new SortingCollection(), 0, 0, false, true).Cast<SampleParameter>().ToList();
        //                            foreach (SampleParameter objParam in lstSampleParam)
        //                            {
        //                                if (uow.Query<PTStudyLogResults>().FirstOrDefault(i => i.SampleID != null && i.SampleID.Oid == objParam.Oid) == null)
        //                                {
        //                                    PTStudyLogResults objPTRes = new PTStudyLogResults(uow);
        //                                    SampleParameter objParameter = uow.GetObjectByKey<SampleParameter>(objParam.Oid);
        //                                    objPTRes.PTStudyLog = Objstudylog;
        //                                    objPTRes.SampleID = objParameter;
        //                                    if (objParam.Samplelogin != null)
        //                                    {
        //                                        objPTRes.SampleLogin = uow.GetObjectByKey<Modules.BusinessObjects.SampleManagement.SampleLogIn>(objParam.Samplelogin.Oid);
        //                                    }
        //                                    objPTRes.Save();
        //                                }
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //            if (e.AcceptActionArgs.SelectedObjects.Count == 1)
        //            {
        //                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "CopiedTestsAppliedSuccessfully"), InformationType.Success, timer.Seconds, InformationPosition.Top); 
        //            }
        //            if (e.AcceptActionArgs.SelectedObjects.Count > 1)
        //            {
        //                Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "CopiedTestsAppliedSuccessfully>1"), InformationType.Success, timer.Seconds, InformationPosition.Top); 
        //            }
        //        }
        //        else
        //        {
        //            Application.ShowViewStrategy.ShowMessage(CaptionHelper.GetLocalizedText(@"Messages\LDMMessages\EditTestMessageGroup", "SelectSampleToApplyCopiedTest"), InformationType.Info, timer.Seconds, InformationPosition.Top);
        //            e.Cancel = true;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Frame.GetController<ExceptionTrackingViewController>().InsertException(ex.Message, ex.StackTrace, this.GetType().Name, System.Reflection.MethodBase.GetCurrentMethod().Name, View.Id);
        //        Application.ShowViewStrategy.ShowMessage(ex.Message, InformationType.Error, timer.Seconds, InformationPosition.Top);
        //    }
        //}
    }
}
